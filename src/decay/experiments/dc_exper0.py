import os, sys

# The command line must contain dt values
if len(sys.argv) > 1:
    dt_values = [float(arg) for arg in sys.argv[1:]]
else:
    print 'Usage: %s dt1 dt2 dt3 ...';  sys.exit(1)  # abort

# Fixed physical parameters
I = 1
a = 2
T = 5

# Run module file as a stand-alone application
cmd = 'python dc_mod.py --I %g --a %g --makeplot --T %g' % \
      (I, a, T)
dt_values_str = ' '.join([str(v) for v in dt_values])
cmd += ' --dt %s' % dt_values_str
print cmd
failure = os.system(cmd)
if failure:
    print 'Command failed:', cmd; sys.exit(1)

# Combine images into rows with 2 plots in each row
combine_image_commands = []
for method in 'BE', 'CN', 'FE':
    imagefiles = ' '.join(['%s_%s.pdf' % (method, dt)
                           for dt in dt_values])
    combine_image_commands.append(
        'montage -background white -geometry 100%' + \
        ' -tile 2x %s %s.png' % (imagefiles, method))
    combine_image_commands.append(
        'pdftk %s output tmp.pdf' % imagefiles)
    num_rows = int(round(len(dt_values)/2.0))
    combine_image_commands.append(
        'pdfnup --nup 2x%d tmp.pdf' % num_rows)
    combine_image_commands.append(
        'mv -f tmp-nup.pdf %s.pdf' % method)
    imagefiles = ' '.join(['%s_%s.png' % (method, dt)
                           for dt in dt_values])

for cmd in combine_image_commands:
    print cmd
    failure = os.system(cmd)
    if failure:
        print 'Command failed:', cmd; sys.exit(1)

# Remove the files generated by dc_mod.py
from glob import glob
filenames = glob('*_*.png') + glob('*_*.pdf') + glob('*_*.eps')  +\
            glob('tmp*.pdf')
for filename in filenames:
    os.remove(filename)
