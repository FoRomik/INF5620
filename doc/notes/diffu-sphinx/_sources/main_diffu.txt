.. Automatically generated reST file from Doconce source
   (http://code.google.com/p/doconce/)

Finite difference methods for diffusion processes
=================================================

:Author: Hans Petter Langtangen

:Date: Nov 15, 2012

Note: **VERY PRELIMINARY VERSION**








A simple 1D diffusion equation
==============================

We consider a diffusion problem for a quantity :math:`u(x,t)`:

.. math::
        
        \frac{\partial u}{\partial t} &=
        \alpha \frac{\partial^2 u}{\partial x^2}, \quad x\in (0,L),\ t\in (0,T]
        \\
        u(x,0) &= I(x), \quad  x\in [0,L]
        \\
        u(0,t) & = 0, \quad  t>0,
        \\
        u(L,t) & = 0, \quad  t>0\thinspace .
        
        

Equation (:ref:`diffu:pde1`) is known as a one-dimensional
*diffusion equation*, also often referred to as a
*heat equation*. With only a first-order derivative in time,
only one *initial condition* is needed, while the second-order
derivative in time leads to a demand for two *boundary conditions*.
The parameter :math:`\alpha` must be given and is referred to as the
*diffusion coefficient*.

Diffusion equations like (:ref:`diffu:pde1`) have a wide range of
applications throughout physical, biological, and financial sciences.
One of the most common applications is propagation of heat, where
:math:`u(x,t)` represents the temperature of some substance at point :math:`x` and
time :math:`t`. the chapter :ref:`diffu:app` goes into several widely occurring
applications.

.. _diffu:pde1:FE:

Forward Euler scheme
--------------------

The first step in the discretization procedure is to replace the
domain :math:`[0,L]\times [0,T]` by a set of mesh points. Here we apply
equally spaced mesh points


.. math::
         x_i=i\Delta x,\quad i=0,\ldots,N_x,

and


.. math::
         t_n=n\Delta t,\quad n=0,\ldots,N \thinspace . 

Moreover, :math:`u^n_i` denotes the numerical approximation of :math:`u(x_i,t_n)`.
Approximating the PDE (:ref:`diffu:pde1`) at a mesh point :math:`(x_i,t_n)`
leads to


.. math::
   :label: diffu:pde1:step2
        
        \frac{\partial}{\partial t} u(x_i, t_n) =
        \alpha\frac{\partial^2}{\partial x^2} u(x_i, t_n),
        
        

Let us first replace
the time derivative by a forward difference and the spatial
derivative by a central difference:


.. math::
   :label: diffu:pde1:step3a
        
        [D_t^+ u = \alpha D_xD_x u]^n_i \thinspace .
        
        

Written out,


.. math::
   :label: diffu:pde1:step3b
        
        \frac{u^{n+1}-u^n}{\Delta t} = \alpha \frac{u^{n}_{i+1} - 2u^n_i + u^n_{i-1}}{\Delta x^2} \thinspace .
        
        

As usual, we anticipate that :math:`u^n_i` is already computed such that
:math:`u^{n+1}_i` is the only unknown, which we can easily solve for:


.. math::
   :label: diffu:pde1:step4
        
        u^{n+1}_i = u^n_i + \alpha\frac{\Delta t}{\Delta x^2}\left(
        u^{n}_{i+1} - 2u^n_i + u^n_{i-1}\right) \thinspace .
        
        


The computational algorithm is then

 1. compute $u^0_i=I(x_i)$for :math:`i=0,\ldots,N_x`

 2. for :math:`n=0,1,\ldots,N`:

   1. apply :eq:`diffu:pde1:step4` for all the internal
      spatial points :math:`i=1,\ldots,N_x-1`

   2. set the boundary values
      :math:`u^{n+1}_i=0` for :math:`i=0` and :math:`i=N_x`


The algorithm is compactly fully specified in Python:


.. code-block:: python

        x = linspace(0, L, Nx+1)   # mesh points in space
        dx = x[1] - x[0]
        t = linspace(0, T, N+1)    # mesh points in time
        dt = t[1] - t[0]
        C = a*dt/dx**2
        u   = zeros(Nx+1)
        u_1 = zeros(Nx+1)
        
        # Set initial condition u(x,0) = I(x)
        for i in range(0, Nx+1):
            u_1[i] = I(x[i])
        
        for n in range(0, N):
            # Compute u at inner mesh points
            for i in range(1, Nx):
                u[i] = u_1[i] + C*(u_1[i-1] - 2*u_1[i] + u_1[i+1])
        
            # Insert boundary conditions
            u[0] = 0;  u[Nx] = 0
        
            # Update u_1 before next step
            u_1[:]= u


.. _diffu:pde1:BE:

Backward Euler Scheme
---------------------


We now apply a backward difference in time in :eq:`diffu:pde1:step2`,
but the same central difference in space:


.. math::
   :label: diffu:pde1:step3aBE
        
        [D_t^- u = D_xD_x u]^n_i,
        
        

which written out reads


.. math::
   :label: diffu:pde1:step3bBE
        
        \frac{u^{n}_i-u^n-1_i}{\Delta t} = \alpha\frac{u^{n}_{i+1} - 2u^n_i + u^n_{i-1}}{\Delta x^2} \thinspace .
        
        

Now we assume :math:`u^{n-1}_i` is computed, but all quantities at the "new"
time level :math:`n` are unknown. This time it is not possible to solve
with respect to :math:`u_i^{n}` because this value couples to its neighbors
in space, :math:`u^n_{i-1}` and :math:`u^n_{i+1}`, which are also unknown.
Let us examine this fact for the case when :math:`N_x=3`. Equation :eq:`diffu:pde1:step3bBE` written for :math:`i=1,\ldots,Nx-1= 1,2` becomes


.. math::
        
        \frac{u^{n}_1-u^{n-1}_1}{\Delta t} &= \alpha\frac{u^{n}_{2} - 2u^n_1 + u^n_{0}}{\Delta x^2}\\
        \frac{u^{n}_2-u^{n-1}_2}{\Delta t} &= \alpha\frac{u^{n}_{3} - 2u^n_2 + u^n_{1}}{\Delta x^2}
        

The boundary values :math:`u^n_0` and :math:`u^n_3` are known as zero. Collecting the
unknown new values :math:`u^n_1` and :math:`u^n_2` on the left-hand side gives


.. math::
        
        \left(1+  2\alpha\frac{\Delta t}{\Delta x^2}\right) u^{n}_1
        - \alpha\frac{\Delta t}{\Delta x^2} u^{n}_{2}  &= u^n-1_1,\\
        - \alpha\frac{\Delta t}{\Delta x^2} u^{n}_{2} +
        \left(1+  2\alpha\frac{\Delta t}{\Delta x^2}\right) u^{n}_2
          &= u^n-1_2
        \thinspace .
        

This is a coupled :math:`2\times 2` system of algebraic equations for
the unknowns :math:`u^n_1` and :math:`u^n_2`.
Discretization methods that lead to a coupled system of equations
for the unknown function at a new time level are said to be
*implicit methods*.
.. index:: implicit discretization methods

.. index:: explicit discretization methods

The counterpart, *explicit methods*, refers to discretization
methods where there is a simple explicit formula for the values of
the unknown function at each of the spatial mesh points at the new
time level. From an implementational point of view, implicit methods
are more comprehensive to code since they require
the solution of coupled equations, i.e., a matrix system, at each time level.

In the general case, :eq:`diffu:pde1:step3bBE` gives rise to
a coupled :math:`(Nx-1)\times (Nx-1)` system of algebraic equations for
all the unknown :math:`u^n_i` at the interior spatial points :math:`i=1,\ldots,Nx-1`.
Collecting the unknowns on the left-hand side, and
introducing the quantity


.. math::
        
        C = \alpha\frac{\Delta t}{\Delta x^2},
        

:eq:`diffu:pde1:step3bBE` can be written


.. math::
   :label: diffu:pde1:step4BE
        
        - Cu^n_{i-1} + \left(1+  2C\right) u^{n}_i - Cu^n_{i+1}) = u_{i-1}^n,
        
        

for :math:`i=1,\ldots,Nx-1`.
One can either view these equations as a system for where the
:math:`u^{n}_i` values at the internal grid points, :math:`i=1,\ldots,N_x-1`, are
unknown, or we may append the boundary values :math:`u^n_0` and :math:`u^n_{N_x}`
to the system. In the latter case, all :math:`u^n_i` for :math:`i=0,\ldots,N_x`
are unknown and we must add the boundary equations to
the :math:`N_x-1` equations in :eq:`diffu:pde1:step4BE`:


.. math::
        
        u_0^n &= 0,\\
        u_{N_x}^n &= 0\thinspace .
        
        


A coupled system of algebraic equations can be written on matrix form,
and this is important if we want to call up ready-made software for
solving the system.  The equations :eq:`diffu:pde1:step4BE`
and (:ref:`diffu:pde1:step4BE:BC:0`)--(:ref:`diffu:pde1:step4BE:BC:L`)
correspond to the matrix equation


.. math::
         AU = b

where :math:`U=(u^n_0,\ldots,u^n_{N_x})`, and
the matrix :math:`A` has the following structure:


.. math::
   :label: diffu:pde1:matrix:sparsity
        
        A =
        \left(
        \begin{array}{cccccccccc}
        A_{0,0} & A_{0,1} & 0
        &\cdots &
        \cdots & \cdots & \cdots &
        \cdots & 0 \\
        A_{1,0} & A_{1,1} & 0 & \ddots &   & &  & &  \vdots \\
        0 & A_{2,1} & A_{2,2} & A_{2,3} &
        \ddots & &  &  & \vdots \\
        \vdots & \ddots &  & \ddots & \ddots & 0 &  & & \vdots \\
        \vdots &  & \ddots & \ddots & \ddots & \ddots & \ddots & & \vdots \\
        \vdots & &  & 0 & A_{i,i-1} & A_{i,i} & A_{i,i+1} & \ddots & \vdots \\
        \vdots & & &  & \ddots & \ddots & \ddots &\ddots  & 0 \\
        \vdots & & & &  &\ddots  & \ddots &\ddots  & A_{N_x-1,N_x} \\
        0 &\cdots & \cdots &\cdots & \cdots & \cdots  & 0 & A_{N_x,N_x-1} & A_{N_x,N_x}
        \end{array}
        \right)
        
        

The nonzero elements are given by


.. math::
        
        A_{i,i-1} &= -C\\
        A_{i,i} &= 1+ 2C\\
        A_{i,i+1} &= -C
        

for the equations for internal points, :math:`i=1,\ldots,N_x-1`. The equations
for the boundary points correspond to


.. math::
        
        A_{0,0} &= 1,\\
        A_{0,1} &= 0,\\
        A_{N_x,N_x-1} &= 0,\\
        A_{N_x,N_x} &= 1\thinspace .
        

The right-hand side :math:`b` is written as


.. math::
        
        b = \left(\begin{array}{c}
        b_0\\
        b_1\\
        \vdots\\
        b_i\\
        \vdots\\
        b_{N_x}
        \end{array}\right)
        

with


.. math::
        
        b_0 &= 0,\\
        b_i &= u^{n-1}_i,\quad i=1,\ldots,N_x-1,\\
        b_{N_x} &= 0 \thinspace . 


We observe that the matrix :math:`A` contains quantities that do not change
in time. Therefore, :math:`A` can be formed once and for all before we enter
the recursive formulas for the time evolution.
The right-hand side :math:`b`, however, must be updated at each time step.
This leads to the following computational algorithm, here sketched
with Python code:


.. code-block:: python

        x = linspace(0, L, Nx+1)   # mesh points in space
        dx = x[1] - x[0]
        t = linspace(0, T, N+1)    # mesh points in time
        u   = zeros(Nx+1)
        u_1 = zeros(Nx+1)
        
        # Data structures for the linear system
        A = zeros((Nx+1, Nx+1))
        b = zeros(Nx+1)
        
        for i in range(1, Nx):
            A[i,i-1] = -C
            A[i,i+1] = -C
            A[i,i] = 1 + 2*C
        A[0,0] = A[Nx,Nx] = 1
        
        # Set initial condition u(x,0) = I(x)
        for i in range(0, Nx+1):
            u_1[i] = I(x[i])
        
        import scipy.linalg
        
        for n in range(0, N):
            # Compute b and solve linear system
            for i in range(1, Nx):
                b[i] = -u_1[i]
            b[0] = b[Nx] = 0
            u[:] = scipy.linalg.solve(A, b)
        
            # Update u_1 before next step
            u_1[:] = u


.. _diffu:pde1:impl:sparse:

Sparse matrix implementation
----------------------------

We have seen from :eq:`diffu:pde1:matrix:sparsity` that the matrix :math:`A`
is tridiagonal. The code segment above used a full, dense matrix
representation of :math:`A`, which stores a lot of values we know are zero
beforehand, and worse, the solution algorithm computes with all these zeros.
With :math:`N_x+1` unknowns, the work by the solution algorithm is :math:`\frac{1}{3}
(N_x+1)^3` and the storage requirements :math:`(N_x+1)^2`. By utilizing
the fact that :math:`A` is tridiagonal and employing corresponding software
tools, the work and storage demands can be proportional to :math:`N_x` only.

The key idea is to apply a data structure for a
tridiagonal or sparse matrix. The ``scipy.sparse`` package has
relevant utilities. For example, we can store the nonzero diagonals of
a matrix. The package also has linear system solvers that operate on
sparse matrix data structures. The code below illustrates how we
can store only the main diagonal and the upper and lower diagonals.


.. code-block:: python

        # Representation of sparse matrix and right-hand side
        main  = zeros(Nx+1)
        lower = zeros(Nx-1)
        upper = zeros(Nx-1)
        b     = zeros(Nx+1)
        
        # Precompute sparse matrix
        main[:] = 1 + 2*C
        lower[:] = -C  #1
        upper[:] = -C  #1
        # Insert boundary conditions
        main[0] = 1
        main[Nx] = 1
        
        A = scipy.sparse.diags(
            diagonals=[main, lower, upper],
            offsets=[0, -1, 1], shape=(Nx+1, Nx+1),
            format='csr')
        print A.todense()
        
        # Set initial condition
        for i in range(0,Nx+1):
            u_1[i] = I(x[i])
        
        for n in range(0, N):
            b = u_1
            b[0] = b[-1] = 0.0  # boundary conditions
            u[:] = scipy.sparse.linalg.spsolve(A, b)
            u_1[:] = u

The ``scipy.sparse.linalg.spsolve`` function utilizes the sparse storage
structure of ``A`` and performs in this case a very efficient Gaussian
elimination solve.


.. _diffu:pde1:theta:

The :math:`\theta` Rule
-----------------------

The :math:`\theta` rule provides a family of finite difference approximations
in time. Applied to the 1D diffusion problem we have


.. math::
         \frac{u^{n+1}_i-u^n_i}{\Delta t} =
        \alpha\left( \theta \frac{u^{n+1}_{i+1} - 2u^{n+1}_i + u^{n+1}_{i-1}}{\Delta x^2}
        + (1-\theta) \frac{u^{n}_{i+1} - 2u^n_i + u^n_{i-1}}{\Delta x^2}\right)
        \thinspace .
        

This scheme also leads to a matrix system with entries :math:`1+2C\theta` on
the main diagonal of the matrix, and :math:`-C\theta` on the super- and sub-diagonal.
The right-hand side entry :math:`b_i` is


.. math::
         b_i = u^n_{i} + C(1-\theta)
        \frac{u^{n}_{i+1} - 2u^n_i + u^n_{i-1}}{\Delta x^2}\thinspace .
        




The Laplace and Poisson equation as the steady state limit
----------------------------------------------------------

The Laplace equation, :math:`\nabla^2 u = 0`, or the Poisson equation,
:math:`-\nabla^2 u = f`, occur in numerous applications throughout science and
engineering. We can solve 1D variants of the Laplace equations with the listed
software, because we can interpret :math:`u_{xx}=0` as the limiting solution
of :math:`u_t = \alpha u_{xx}` when :math:`u` reach a steady state limit where
:math:`u_t=0`. Technically in a program, we just take one large time step,
or equivalently, set :math:`\alpha` to a large value. All we need is to have
:math:`C` large. As :math:`C\rightarrow\infty`, we can from the schemes see that
we get


.. math::
         \frac{u^{n+1}_{i+1} - 2u^{n+1}_i + u^{n+1}_{i-1}}{\Delta x^2} = 0,

which is nothing but the discretization :math:`[D_xD_x u]^{n+1}_i=0` of
:math:`u_{xx}=0`.

The Backward Euler scheme can solve the limit equation directly and
hence produce a solution of the 1D Laplace equation.
With the Forward Euler scheme we must do the time stepping since :math:`C>1/2`
is illegal and leads to instability. We may interpret this time stepping
as solving the equation system from :math:`u_{xx}` by iterating on a time
pseudo time variable.

Extensions
----------

 * Variable coefficients

 * Neumann and Robin conditions

 * 2D and 3D

Analysis of schemes for the diffusion equation
==============================================

.. _diffu:pde1:analysis:uex:

Properties of the solution
--------------------------

A particular characteristic of diffusive processes, governed
by an equation like


.. math::
   :label: diffu:pde1:eq
        
        u_t = \alpha u_{xx},
        
        

is that the
initial shape :math:`u(x,0)=I(x)` spreads out in space with time,
along with a decaying amplitude. For example, :eq:`diffu:pde1:eq`
admits a solution of the form


.. math::
   :label: diffu:pde1:sol1
        
        u(x,t) = Qe^{-at}\sin\left( kx\right),
        
        \thinspace  .
        

The parameters :math:`Q` and :math:`k` can be freely chosen, while
inserting :eq:`diffu:pde1:sol1` in :eq:`diffu:pde1:eq` gives the constraint


.. math::
         a = -\alpha k^2
        \thinspace .
        



A very important feature is that the initial shape :math:`I(x)=Q\sin kx`
undergoes a damping :math:`\exp{(-\alpha k^2t)}`, meaning that
rapid oscillations in space, corresponding to large :math:`k`, are very much
faster dampened than slow oscillations in space, corresponding to small
:math:`k`. This feature leads to a smoothing of the initial condition with time.

The following examples illustrates the damping properties of the
diffusion equation. We consider the problem


.. math::
        
        u_t &= u_{xx},\quad x\in (0,1),\ t\in (0,T],\\
        u(0,t) &= u(1,t) = 0,\quad t\in (0,T],\\
        u(x,0) & = \sin (\pi x) + 0.1\sin(100\pi x)
        \thinspace .
        

The initial condition has been chosen such that adding
two solutions like :eq:`diffu:pde1:sol1` constructs
an analytical solution to the problem:


.. math::
   :label: diffu:pde1:sol2
        
        u(x,t) = e^{-\pi^2 t}\sin (\pi x) + 0.1e^{-\pi^2 10^4 t}\sin (100\pi x)
        
        \thinspace .
        

Figure :ref:`diffu:pde1:fig:damping` illustrates the rapid damping of
rapid oscillations :math:`\sin (100\pi x)` and the very much slower damping of the
slowly varying :math:`\sin (\pi x)` term. After about :math:`t=0.5\cdot10^{-4}` the rapid
oscillations do not have a visible amplitude, while we have to wait
until :math:`t\sim 0.5` before the amplitude of the long wave :math:`\sin (\pi x)`
becomes invisible.


.. _diffu:pde1:fig:damping:

.. figure:: fig-diffu/diffusion_damping.png
   :width: 800

   *Evolution of the solution of a diffusion problem: initial condition (upper left), 1/100 reduction of the small waves (upper right), 1/10 reduction of the long wave (lower left), and 1/100 reduction of the long wave (lower right)*


.. x/sqrt(t) solution, kernel with integral


The relevance of studying the behavior of a particular solution of the form
:eq:`diffu:pde1:sol1` is related to a Fourier representation of
the solution. We first express the initial condition as a Fourier series


.. math::
        
        I(x) \approx \sum_{k\in K} b_k e^{ikx},
        

where :math:`i=\sqrt{-1}` and :math:`K` is a set of :math:`k` values needed to build
:math:`I(x)` with sufficient accuracy from basic sinusoidal components
:math:`e^{ikx}`.  Instead of using a specific sine or cosine function for
the spatial variation, we use a complex exponential function to ease
the hand calculations later.  Letting :math:`K` contain infinitely many :math:`k`
values makes the sum converge to :math:`I(x)` under reasonable assumptions
on the smoothness of :math:`I(x)`.

The corresponding
solution :math:`u` can now be expressed as


.. math::
   :label: diffu:pde1:u:Fourier
        
        u(x,t) \approx \sum_{k\in K} b_k e^{-\alpha k^2t}e^{ikx},
        
        \thinspace .
        


Note that :eq:`diffu:pde1:sol2` is a special case of
:eq:`diffu:pde1:u:Fourier` where :math:`K=\{\pi, 100\pi\}`, :math:`b_{\pi}=1`,
and :math:`b_{100\pi}=0.1`.


.. _diffu:pde1:analysis:

Analysis of the finite difference schemes
-----------------------------------------

We have seen that a general solution of the diffusion equation
can be built as a linear combination of basic components


.. math::
         e^{-\alpha k^2t}e^{ikx} \thinspace . 

A fundamental question is whether such components are also solutions of
the finite difference schemes. This is indeed the case, but the
amplitude :math:`\exp{(-\alpha k^2t)}` might be modified (which also happens when
solving the ODE counterpart :math:`u'=-\alpha u`).
We therefore look for numerical solutions of the form


.. math::
   :label: diffu:pde1:analysis:uni
        
        u^n_q = A^n e^{ikq\Delta x} = A^ne^{ikx},
        
        

where :math:`A` must be determined by inserting the component into an actual scheme.

Stability  (1)
~~~~~~~~~~~~~~

The exact wave component decays according to :math:`\exp{(-\alpha k^2t)}`.
We should therefore require :math:`|A| < 1` to have a decaying numerical
solution as well. However, if
:math:`-1\leq A<0`, :math:`A^n` will change sign from time level to
time level, and we get stable, non-physical oscillations in the numerical
solutions that are not present in the exact solution.


.. index:: amplification factor


Accuracy  (1)
~~~~~~~~~~~~~

To determine how accurately a finite difference scheme treats one
wave component :eq:`diffu:pde1:analysis:uni`, we see that the basic
deviation from the exact solution is reflected in how well
:math:`A^n` approximates :math:`\exp{(-\alpha k^2t)}=\exp{(-\alpha k^2 n\Delta t)}`,
or how well the numerical amplification factor
:math:`A` approximates the exact amplification factor
:math:`A_{\small\mbox{e}} = \exp{(-\alpha k^2 \Delta t)}`.

.. We shall in particular investigate the error :math:`A_{\small\mbox{e}} - A` in the

.. amplification factor.



.. _diffu:pde1:analysis:FE:

Analysis of the Forward Euler scheme
------------------------------------

.. 2DO: refer to vib and wave



The Forward Euler finite difference scheme for :math:`u_t = \alpha u_{xx}` can
be written as


.. math::
         [D_t^+ u = \alpha D_xD_x u]^n_q\thinspace . 

Inserting a wave component :eq:`diffu:pde1:analysis:uni`
in the scheme demands calculating the terms


.. math::
         e^{ikq\Delta x}[D_t^+ A]^n = e^{ikq\Delta x}A^n\frac{A-1}{\Delta t},

and


.. math::
         A^nD_xD_x [e^{ikx}]_q = A^n\left( - e^{ikq\Delta x}\frac{4}{\Delta x^2}
        \sin^2\left(\frac{k\Delta x}{2}\right)\right)
        \thinspace . 

Inserting these terms in the discrete equation and
dividing by :math:`A^n e^{ikq\Delta x}` leads to



.. math::
        
        \frac{A-1}{\Delta t} = -\alpha \frac{4}{\Delta x^2}\sin^2\left(
        \frac{k\Delta x}{2}\right),
        

and consequently


.. math::
        
        A = 1 -4C\sin^2\left(
        \frac{k\Delta x}{2}\right),
        

where :math:`C` is a constant introduced for convenience:


.. math::
        
        C = \frac{\alpha\Delta t}{\Delta x^2}
        \thinspace .
        

The complete numerical solution is then


.. math::
        
        u^n_q = \left(1 -4C\sin^2\left(
        \frac{k\Delta x}{2}\right)\right)^ne^{ikq\Delta x}
        \thinspace .
        


Stability  (2)
~~~~~~~~~~~~~~

We easily see that :math:`A\leq 1`, but :math:`A<-1` might be a possibility that will lead
to growth of a numerical wave component. The criterion :math:`A\geq -1` implies


.. math::
         4C\sin^2 (p/2)\leq 2
        \thinspace . 

The worst case is when :math:`\sin^2 (p/2)=1`, so a sufficient criterion for
stability is


.. math::
        
        C\leq \frac{1}{2},
        

or expressed as a condition on :math:`\Delta t`:


.. math::
        
        \Delta t\leq \frac{\Delta x^2}{2\alpha}\thinspace .
        


Accuracy  (2)
~~~~~~~~~~~~~

Since :math:`A` is expressed in terms of :math:`C` and the parameter we now call
:math:`p=k\Delta x`, we also express :math:`A_{\small\mbox{e}}` by :math:`C` and :math:`p`:


.. math::
         A_{\small\mbox{e}} = \exp{(-\alpha k^2\Delta t)} = \exp{(-Cp^2)}
        \thinspace .

Computing
the Taylor series expansion of :math:`A/A_{\small\mbox{e}}` in terms of :math:`C`
can easily be done with aid of ``sympy``:


.. code-block:: python

        def A_exact(C, p):
            return exp(-C*p**2)
        
        def A_FE(C, p):
            return 1 - 4*C*sin(p/2)**2
        
        from sympy import *
        C, p = symbols('C p')
        A_err_FE = A_FE(C, p)/A_exact(C, p)
        print A_err_FE.series(C, 0, 6)

The result is


.. math::
         \frac{A}{A_{\small\mbox{e}}} = 1 - 4 C \sin^{2}(p/2) + C p^{2} - 4 C^{2} p^{2} \sin^{2}(p/2) + \frac{1}{2} C^{2} p^{4} + \cdots
        

Recalling that :math:`C=\alpha\Delta t/\Delta x`, :math:`p=k\Delta x`, and that
:math:`\sin^2(p/2)\leq 1`, we
realize that the dominating error terms are at most


.. math::
         1 - 4\alpha \frac{\Delta t}{\Delta x^2} +
        \alpha\Delta t - 4\alpha^2\Delta t^2
        + \alpha^2 \Delta t^2\Delta x^2 + \cdots
        \thinspace .
        



.. _diffu:pde1:analysis:BE:

Analysis of the Backward Euler scheme
-------------------------------------

Discretizing :math:`u_t = \alpha u_{xx}` by a Backward Euler scheme,


.. math::
         [D_t^- u = \alpha D_xD_x u]^n_q,

and inserting a wave component :eq:`diffu:pde1:analysis:uni`,
leads to calculations similar to those arising from the Forward Euler scheme,
but since


.. math::
         e^{ikq\Delta x}[D_t^- A]^n = A^ne^{ikq\Delta x}\frac{1 - A^{-1}}{\Delta t},

we get


.. math::
        
        \frac{1-A^{-1}}{\Delta t} = -\alpha \frac{4}{\Delta x^2}\sin^2\left(
        \frac{k\Delta x}{2}\right),
        

and then


.. math::
   :label: diffu:pde1:analysis:BE:A
        
        A = \left(1  + 4C\sin^2(p/2)\right)^{-1}
        
        \thinspace .
        

The complete numerical solution can be written


.. math::
        
        u^n_q = \left(1  + 4C\sin^2 (p/2)\right)^{-n}
        e^{ikq\Delta x} \thinspace .
        


Stability  (3)
~~~~~~~~~~~~~~

We see from :eq:`diffu:pde1:analysis:BE:A` that :math:`0<A<1`, which means
that all numerical wave components are stable and non-oscillatory
for any :math:`\Delta t >0`.



.. _diffu:pde1:analysis:CN:

Analysis of the Crank-Nicolson scheme
-------------------------------------

The Crank-Nicolson scheme can be written as


.. math::
         [D_t u = \alpha D_xD_x \overline{u}^x]^{n+\frac{1}{2}}_q, 

or


.. math::
         [D_t u]^{n+\frac{1}{2}}_q = \frac{1}{2}\alpha\left( [D_xD_x u]^{n}_q +
        [D_xD_x u]^{n+1}_q\right)
        \thinspace .
        

Inserting :eq:`diffu:pde1:analysis:uni` in the time derivative approximation
leads to


.. math::
         [D_t A^n e^{ikq\Delta x}]^{n+\frac{1}{2}} = A^{n+\frac{1}{2}} e^{ikq\Delta x}\frac{A^{\frac{1}{2}}-A^{-\frac{1}{2}}}{\Delta t} = A^ne^{ikq\Delta x}\frac{A-1}{\Delta t}
        \thinspace .

Inserting :eq:`diffu:pde1:analysis:uni` in the other terms
and dividing by
:math:`A^ne^{ikq\Delta x}` gives the relation


.. math::
        
        \frac{A-1}{\Delta t} = -\frac{1}{2}\alpha\frac{4}{\Delta x^2}
        \sin^2\left(\frac{k\Delta x}{2}\right)
        (1 + A),
        

and after some more algebra,


.. math::
        
        A = \frac{ 1 - 2C\sin^2(p/2)}{1 + 2C\sin^2(p/2)}
        \thinspace .
        

The exact numerical solution is hence


.. math::
        
        u^n_q = \left(\frac{ 1 - 2C\sin^2(p/2)}{1 + 2C\sin^2(p/2)}\right)^ne^{ikp\Delta x}
        \thinspace .
        


Stability  (4)
~~~~~~~~~~~~~~

The criteria :math:`A>-1` and :math:`A<1` are fulfilled for any :math:`\Delta t >0`.

Summary of accuracy of amplification factors
--------------------------------------------

We can plot the various amplification factors against :math:`p=k\Delta x` for
different choices of the :math:`C` parameter. Figures :ref:`diffu:pde1:fig:A:err:C20`,
:ref:`diffu:pde1:fig:A:err:C0.5`, and :ref:`diffu:pde1:fig:A:err:C0.1`
show how long and small waves are damped by the various schemes compared
to the exact damping. As long as all schemes are stable, the amplification
factor is positive, except for Crank-Nicolson when :math:`C>0.5`.


.. _diffu:pde1:fig:A:err:C20:

.. figure:: fig-diffu/diffusion_A_C20_C2_FDM.png
   :width: 800

   *Error in amplification factor for large time steps*



.. _diffu:pde1:fig:A:err:C0.5:

.. figure:: fig-diffu/diffusion_A_C05_C025_FDM.png
   :width: 800

   *Error in amplification factor for time steps around the Forward Euler stability limit*



.. _diffu:pde1:fig:A:err:C0.1:

.. figure:: fig-diffu/diffusion_A_C01_C001_FDM.png
   :width: 800

   *Error in amplification factor for small time steps*


The effect of negative amplification factors is that :math:`A^n` changes sign
from one time level to the next, thereby giving rise to oscillations in
time in an animation of the solution. We see from Figure :ref:`diffu:pde1:fig:A:err:C20` that for :math:`C=20`, waves with :math:`p\geq \pi/2` undergo a damping close to
:math:`-1`, which means that the amplitude does not decay and that the wave component
jumps up and down in time. For :math:`C=2` we have a damping of a factor of 0.5
from one time level to the next, which is very much smaller than the
exact damping. Short waves will therefore fail to be effectively dampened.
These waves will manifest themselves as high frequency
oscillatory noise in the solution.

A value :math:`p=\pi/2` corresponds to
four mesh points per wave length of :math:`e^{ikx}`, while
:math:`p=\pi` implies only two points per wave length, which is the smallest number
of points we can have to represent the wave on the mesh.

To demonstrate the oscillatory behavior of the Crank-Nicolson scheme, we
choose an initial condition that leads to short waves with
significant amplitude. A discontinuous :math:`I(x)` will in particular serve
this purpose.

Run :math:`C=...`...

