.. !split


.. _decay:app:

Applications of exponential decay models
========================================

This section presents many mathematical models that all
end up with ODEs of the type :math:`u'=-au+b`.
The applications are taken from biology,
finance, and physics, and cover population growth or decay, compound
interest and inflation, radioactive decay, cooling of objects,
compaction of geological media, pressure
variations in the atmosphere, and air resistance on falling or rising
bodies.

.. _decay:app:scaling:

Scaling  (1)
------------

Real applications of a model :math:`u'=-au+b` will often involve a lot
of parameters in the expressions for :math:`a` and :math:`b`. It can be quite
a challenge to find relevant values of all parameters. In simple
problems, however, it turns out that it is not always necessary
to estimate all parameters because we can lump them into one or
a few *dimensionless* numbers by using a very attractive technique
called scaling. It simply means to stretch the :math:`u` and :math:`t` axis
is the present problem - and suddenly all parameters in the problem
are lumped one parameter if :math:`b\neq 0` and no parameter when :math:`b=0`!

Scaling means that we introduce a new function :math:`\bar u(\bar t)`,
with


.. math::
         \bar u = \frac{u - u_m}{u_c},\quad \bar t = \frac{t}{t_c},

where :math:`u_m` is a characteristic value of :math:`u`, :math:`u_c` is a characteristic
size of the range of :math:`u` values, and :math:`t_c` is a characteristic
size of the range of :math:`t_c` where :math:`u` varies significantly.
Choosing :math:`u_m`, :math:`u_c`, and :math:`t_c` is not always easy and often an art
in complicated problems. We just state one choice first:


.. math::
         u_c = I,\quad u_m = b/a,\quad t_c = 1/a{\thinspace .}

Inserting :math:`u=u_m + u_c\bar u` and :math:`t=t_c\bar t` in the problem
:math:`u'=-au + b`, assuming :math:`a` and :math:`b` are constants, results after some
algebra in the *scaled problem*


.. math::
         \frac{d\bar u}{d\bar t} = -\bar u,\quad \bar u(0)=1 - \beta,

where :math:`\beta` is a dimensionless number


.. math::
         \beta = \frac{b}{Ia}{\thinspace .}

That is, only the special combination of :math:`b/(Ia)` matters, not what
the individual values of :math:`b`, :math:`a`, and :math:`I` are. Moreover, if :math:`b=0`,
the scaled problem is independent of :math:`a` and :math:`I`! In practice this means
that we can perform one numerical simulation of the scaled problem and
recover the solution of any problem for a given :math:`a` and :math:`I` by
stretching the axis in the plot: :math:`u=I\bar u` and :math:`t =\bar t/a`.
For :math:`b\neq 0`, we simulate the scaled problem for a few :math:`\beta` values
and recover the physical solution :math:`u` by translating and stretching the :math:`u`
axis and stretching the :math:`t` axis.

The scaling breaks down if :math:`I=0`. In that case we may choose :math:`u_m=0`,
:math:`u_c=b/a`, and :math:`t_c=1/b`, resulting in a slightly different scaled problem:


.. math::
         \frac{d\bar u}{d\bar t} = 1 -\bar u,\quad \bar u(0)=0{\thinspace .}

As with :math:`b=0`, the case :math:`I=0` has a scaled problem with no physical
parameters!

It is common to drop the bars after scaling and write the scaled
problem as :math:`u'=-u`, :math:`u(0)=1-\beta`, or :math:`u'=1-u`, :math:`u(0)=0`.
Any implementation of the problem :math:`u'=-au+b`, :math:`u(0)=I`, can be
reused for the scaled problem by setting :math:`a=1`, :math:`b=0`, and :math:`I=1-\beta`
in the code, if :math:`I\neq 0`, or one sets
:math:`a=1`, :math:`b=1`, and :math:`I=0` when the physical :math:`I` is zero.
Falling bodies in fluids, as described in the section :ref:`decay:app:drag`,
involves :math:`u'=-au+b` with seven physical parameters. All these vanish
in the scaled version of the problem if we start the motion from rest!



.. _decay:app:pop:

Evolution of a population
-------------------------


.. index:: population dynamics


Let :math:`N` be the number of individuals in a population occupying some
spatial domain.
Despite :math:`N` being an integer in this problem,
we shall compute with :math:`N` as a real number
and view :math:`N(t)` as a continuous function of time.
The basic model assumption is that in a time interval :math:`\Delta t` the number of
newcomers to the populations (newborns) is proportional to
:math:`N`, with proportionality constant :math:`\bar b`. The amount of
newcomers will increase the population and result in
to

.. math::
         N(t+\Delta t) = N(t) + \bar bN(t)\thinspace . 

It is obvious that a long time interval :math:`\Delta t` will result in
more newcomers and hence a larger :math:`\bar b`. Therefore, we introduce
:math:`b=\bar b/\Delta t`: the number of newcomers per unit time and per
individual. We must then multiply :math:`b` by the length of the time
interval considered and by the population size to get the
total number of new individuals, :math:`b\Delta t N`.

If the number of removals from the population (deaths) is also
proportional to :math:`N`, with proportionality constant :math:`d\Delta t`,
the population evolves according to

.. math::
         N(t+\Delta t) = N(t) + b\Delta t N(t) - d\Delta t N(t)\thinspace . 

Dividing by :math:`\Delta t` and letting :math:`\Delta t \rightarrow 0`,
we get the ODE


.. math::
        
        N' = (b-d)N,\quad N(0)=N_0\thinspace .
        

In a population where the death rate (:math:`d`) is larger than
then newborn rate (:math:`b`), :math:`a>0`, and the population experiences
exponential decay rather than exponential growth.

In some populations there is an immigration of individuals into the
spatial domain. With :math:`I` individuals coming in per time unit,
the equation for the population change becomes


.. math::
         N(t+\Delta t) = N(t) + b\Delta t N(t) - d\Delta t N(t) + \Delta t I\thinspace . 

The corresponding ODE reads

.. math::
        
        N' = (b-d)N + I,\quad N(0)=N_0
        \thinspace .
        


Some simplification arises if we introduce a fractional measure
of the population: :math:`u=N/N_0` and set :math:`r=b-d`. The ODE problem
now becomes

.. math::
   :label: decay:app:pop:ueq
        
        u' = ru + f,\quad u(0)=1,
        
        

where :math:`f=I/N_0` measures the net immigration per time unit as
the fraction of the initial population. Very often, :math:`r` is approximately
constant, but :math:`f` is usually a function of time.


.. index:: logistic model


The growth rate :math:`r` of a population decreases if the environment
has limited resources. Suppose the environment can sustain at
most :math:`N_{\max}` individuals. We may then assume that the growth rate
approaches zero as :math:`N` approaches :math:`N_{\max}`, i.e., as :math:`u` approaches
:math:`M=N_{\max}/N_0`. The simplest possible evolution of :math:`r` is then a
linear function: :math:`r(t)=r_0(1-u(t)/M)`, where :math:`r_0`
is the initial growth rate when the population is small relative to the
maximum size and there is enough resources. Using this :math:`r(t)` in
:eq:`decay:app:pop:ueq` results in the *logistic model* for the
evolution of a population (assuming for the moment that :math:`f=0`):

.. math::
   :label: decay:app:pop:logistic
        
        u' = r_0(1-u/M)u,\quad u(0)=1
        \thinspace .
        
        

Initially, :math:`u` will grow at rate :math:`r_0`, but the growth will decay
as :math:`u` approaches :math:`M`, and then there is no more change in :math:`u`, causing
:math:`u\rightarrow M` as :math:`t\rightarrow\infty`.
Note that the logistic equation :math:`u'=r_0(1-u/M)u` is *nonlinear* because
of the quadratic term :math:`-u^2r_0/M`.

.. _decay:app:interest:

Compound interest and inflation
-------------------------------

Say the annual interest rate is :math:`r` percent and that the bank
adds the interest once a year to your investment.
If :math:`u^n` is the investment in year :math:`n`, the investment in year :math:`u^{n+1}`
grows to


.. math::
         u^{n+1} = u^n + \frac{r}{100}u^n
        \thinspace . 

In reality, the interest rate is added every day. We therefore introduce
a parameter :math:`m` for the number of periods per year when the interest
is added. If :math:`n` counts the periods, we have the fundamental model
for compound interest:

.. math::
   :label: decay:app:interest:eq1
        
        u^{n+1} = u^n + \frac{r}{100 m}u^n
        \thinspace .
        
        

This model is a *difference equation*, but it can be transformed to a
continuous differential equation through a limit process.
The first step is to derive a formula for the growth of the investment
over a time :math:`t`.
Starting with an investment :math:`u^0`, and assuming that :math:`r` is constant in time,
we get

.. math::
        
        u^{n+1} &= \left(1 + \frac{r}{100 m}\right)u^{n}\\ 
        &= \left(1 + \frac{r}{100 m}\right)^2u^{n-1}\\ 
        &\ \ \vdots\\ 
        &= \left(1 +\frac{r}{100 m}\right)^{n+1}u^{0}
        

Introducing time :math:`t`, which here is a real-numbered counter for years,
we have that :math:`n=mt`, so we can write


.. math::
         u^{mt} = \left(1 + \frac{r}{100 m}\right)^{mt} u^0\thinspace . 

The second step is to assume *continuous compounding*, meaning that the
interest is added continuously. This implies :math:`m\rightarrow\infty`, and
in the limit one gets the formula

.. math::
        
        u(t) = u_0e^{rt/100},
        

which is nothing but the solution of the ODE problem

.. math::
   :label: decay:app:interest:eq2
        
        u' = \frac{r}{100}u,\quad u(0)=u_0
        \thinspace .
        
        

This is then taken as the ODE model for compound interest if :math:`r>0`.
However, the reasoning applies equally well to inflation, which is
just the case :math:`r<0`. One may also take the :math:`r` in :eq:`decay:app:interest:eq2`
as the net growth of an investemt, where :math:`r` takes both compound interest
and inflation into account. Note that for real applications we must
use a time-dependent :math:`r` in :eq:`decay:app:interest:eq2`.


Introducing :math:`a=\frac{r}{100}`, continuous inflation of an initial
fortune :math:`I` is then
a process exhibiting exponential decay according to

.. math::
         u' = -au,\quad u(0)=I\thinspace . 



.. _decay:app:nuclear:

Radioactive Decay
-----------------


.. index:: radioactive decay


An atomic nucleus of an unstable atom may lose energy by emitting
ionizing particles and thereby be transformed to a nucleus with a
different number of protons and neutrons.  This process is known as
`radioactive decay <http://en.wikipedia.org/wiki/Radioactive_decay>`_.
Actually, the process is stochastic when viewed for a single atom,
because it is impossible to predict exactly when a particular atom
emits a particle. Nevertheless, with a large number of atoms, :math:`N`, one
may view the process as deterministic and compute the mean behavior of
the decay. Below we reason intuitively about an ODE for the mean
behavior. Thereafter, we show mathematically that a detailed stochastic model
for single atoms leads the same mean behavior.

Deterministic model
~~~~~~~~~~~~~~~~~~~

Suppose at time :math:`t`, the number of the original atom type is :math:`N(t)`.
A basic model assumption is that the transformation of the atoms of the original
type in a small time interval :math:`\Delta t` is proportional to
:math:`N`, so that

.. math::
         N(t+\Delta t) = N(t) - a\Delta t N(t),

where :math:`a>0` is a constant. Introducing :math:`u=N(t)/N(0)`, dividing by
:math:`\Delta t` and letting :math:`\Delta t\rightarrow 0` gives the
following ODE:


.. math::
        
        u' = -au,\quad u(0)=1
        \thinspace .
        

The parameter :math:`a` can for a given nucleus be expressed through the
*half-life* :math:`t_{1/2}`, which is the time taken for the decay to reduce the
initial amount by one half, i.e., :math:`u(t_{1/2}) = 0.5`.
With :math:`u(t)=e^{-at}`, we get :math:`t_{1/2}=a^{-1}\ln 2` or :math:`a=\ln 2/t_{1/2}`.

.. `<http://en.wikipedia.org/wiki/Exponential_decay>`_


Stochastic model
~~~~~~~~~~~~~~~~

We have originally :math:`N_0` atoms. Each atom may have decayed or
survived at a particular time :math:`t`. We want to count how many original
atoms that are left, i.e., how many atoms that have survived.
The survival of a single atom at time :math:`t` is a random event. Since there
are only two outcomes, survival or decay, we have a
`Bernoulli trial <http://en.wikipedia.org/wiki/Bernoulli_trial>`_.
Let :math:`p` be the
probability of survival (implying that the probability of decay
is :math:`1-p`). If each atom survives independently of
the others, and the probability of survival is the same for every
atom, we have :math:`N_0` statistically Bernoulli trials, known as
a *binomial experiment* from probability theory.
The probability :math:`P(N)` that :math:`N` out
of the :math:`N_0` atoms have survived at time :math:`t` is then given by the
famous *binomial distribution*


.. math::
         P(N) = \frac{N_0!}{N! (N_0-N)!}p^N (1-p)^{N_0-N}{\thinspace .} 

The mean (or expected) value :math:`{\hbox{E}\lbrack P \rbrack}` of :math:`P(N)` is known to be :math:`N_0p`.

It remains to estimate :math:`p`. Let the interval :math:`[0,t]` be divided into :math:`m`
small subintervals of length :math:`\Delta t`. We make the assumption that
the probability of decay of a single atom in an interval of length :math:`\Delta t`
is :math:`\tilde p`, and that this probability is proportional to :math:`\Delta t`:
:math:`\tilde p = \lambda\Delta t` (it sounds natural that the probability
of decay increases with :math:`\Delta t`). The corresponding probability of survival
is :math:`1-\lambda\Delta t`. Believing that :math:`\lambda` is independent
of time, we have, for each interval of length :math:`\Delta t`,
a Bernoulli trial: the atom either survives or
decays in that interval. Now, :math:`p` should be the probability that the atom
survives in all the intervals, i.e., that we have :math:`m` successful
Bernoulli trials in a row and therefore


.. math::
         p = (1-\lambda\Delta t)^m{\thinspace .}

The expected number of atoms of the original type at time :math:`t` is


.. math::
        
        {\hbox{E}\lbrack P \rbrack} = N_0p = N_0(1-\lambda\Delta t)^m,\quad m=t/\Delta t{\thinspace .}
        


To see the relation between the two types of Bernoulli trials and the
ODE above, we go to the limit :math:`\Delta t\rightarrow t`, :math:`m\rightarrow\infty`.
One can show that


.. math::
         p = \lim_{m\rightarrow\infty} (1-\lambda\Delta t)^m
        = \lim_{m\rightarrow\infty} \left(1-\lambda\frac{t}{m}\right)^m = e^{-\lambda t}
        

This is the famous exponential waiting time (or arrival time) distribution for a
Poisson process in probability theory (obtained here, as often done, as
the limit of a binomial experiment). The probability of decay,
:math:`1-e^{-\lambda t}`, follows an `exponential distribution <http://en.wikipedia.org/wiki/Exponential_distribution>`_.
The limit means that :math:`m` is very
large, hence :math:`\Delta t` is very small, and :math:`\tilde p=\lambda\Delta t`
is very small since the intensity of the events, :math:`\lambda`, is assumed
finite. This situation corresponds to a very small probability
that an atom will decay in a very short time interval, which is a
reasonable model.
The same model occurs in lots of different applications, e.g.,
when waiting for a taxi, or when finding defects along a rope.

Relation between stochastic and deterministic models
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With :math:`p=e^{-\lambda t}` we get the expected number of original atoms
at :math:`t` as :math:`N_0p=N_0e^{-\lambda t}`, which is exactly the solution of
the ODE model :math:`N'=-\lambda N`. This gives also an interpretation
of :math:`a` via :math:`\lambda` or vice versa. Our important finding here
is that the ODE model
captures the mean behavior of the underlying stochastic model. This
is, however, not always the common relation between microscopic stochastic
models and macroscopic "averaged" models.

Also of interest is to see that a Forward Euler discretization of
:math:`N'=-\lambda N`, :math:`N(0)=N_0`, gives :math:`N^m = N_0(1-\lambda\Delta t)^m`
at time :math:`t_m=m\Delta t`, which is exactly the
expected value of the stochastic experiment with :math:`N_0` atoms
and :math:`m` small intervals of length :math:`\Delta t`, where each atom can
decay with probability :math:`\lambda\Delta t` in an interval.

A fundamental question is how accurate the ODE model is. The underlying
stochastic model fluctuates around its expected value. A measure
of the fluctuations is the standard deviation of the binomial experiment with
:math:`N_0` atoms, which can be shown to be :math:`{\hbox{Std}\lbrack P \rbrack}=\sqrt{N_0p(1-p)}`. Compared
to the size of the expectation, we get
the normalized standard deviation


.. math::
         \frac{\sqrt{{\hbox{Var}\lbrack P \rbrack}}}{{\hbox{E}\lbrack P \rbrack}} = N_0^{-1/2}\sqrt{p^{-1}-1}
        = N_0^{-1/2}\sqrt{(1-e^{-\lambda t})^{-1}-1}\approx
        (N_0\lambda t)^{-1/2},
        

showing that the normalized fluctuations are very small if :math:`N_0` is
very large, which is usually the case.



.. _decay:app:Newton:cooling:

Newton's law of cooling
-----------------------

.. `<http://web.bham.ac.uk/winterhs/Newton.htm>`_

.. I. Newton, Scala Graduum Caloris, Philosophical Transactions of the Royal Society of London, 1701

.. explanation: `<http://www.madsci.org/posts/archives/2000-11/973522810.Ph.r.html>`_


When a body at some temperature is placed in a cooling environment,
experience shows that the temperature falls rapidly in the beginning,
and then the changes in temperature levels off until the body's
temperature equals that of the surroundings. Newton carried out some
experiments on cooling hot iron and found that the temperature
evolved as a "geometric progression at times in arithmetic progression",
meaning that the temperature decayed exponentially.
Later, this result was formulated as a differential equation:
the rate of change of the temperature in a body is proportional to
the temperature difference between the body and its surroundings.
This statement is known as *Newton's law of cooling*, which
can be mathematically expressed as

.. math::
   :label: decay:Newton:cooling
        
        {dT\over dt} = -k(T-T_s),
        
        

where :math:`T` is the temperature of the body, :math:`T_s` is the temperature
of the surroundings, :math:`t` is time, and :math:`k` is a positive constant.
Equation :eq:`decay:Newton:cooling` is primarily viewed as an
empirical law, valid when heat is efficiently convected away
from the surface of the body by a flowing fluid such as air
at constant temperature :math:`T_s`.
The *heat transfer coefficient* :math:`k` reflects the transfer of
heat from the body to
the surroundings and must be determined from physical experiments.

We must obviously have an initial condition :math:`T(0)=T_0` in addition
to the cooling law :eq:`decay:Newton:cooling`.


.. _decay:app:atm:

Decay of atmospheric pressure with altitude
-------------------------------------------

.. The Barometric Formula

.. `<http://en.wikipedia.org/wiki/Barometric_formula>`_


Vertical equilibrium of air in the atmosphere is governed by
the equation


.. math::
   :label: decay:app:atm:dpdz
        
        \frac{dp}{dz} = -\varrho g
        \thinspace .
        
        

Here, :math:`p(z)` is the air pressure, :math:`\varrho` is the density of
air, and :math:`g=9.807\hbox{ m/s}^2` is a standard value of
the acceleration of gravity.
(Equation :eq:`decay:app:atm:dpdz` follows directly from the general
Navier-Stokes equations for fluid motion, with
the assumption that the air does not move.)

The pressure is related to density and temperature through the ideal gas law


.. math::
   :label: decay:app:atm:rho
        
        \varrho = \frac{Mp}{R^*T}, 
        

where :math:`M` is the molar mass of the Earth's air (0.029 kg/mol),
:math:`R^*` is the universal
gas constant (:math:`8.314` Nm/(mol K)), and :math:`T` is the temperature.
All variables :math:`p`, :math:`\varrho`, and :math:`T` vary with the height :math:`z`.
Inserting :eq:`decay:app:atm:rho` in :eq:`decay:app:atm:dpdz` results
in an ODE with a variable coefficient:


.. math::
   :label: decay:app:atm:ode
        
        \frac{dp}{dz} = -\frac{Mg}{R^*T(z)} p
        
        \thinspace  .
        


Multiple atmospheric layers
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The atmosphere can be approximately modeled by seven layers.
In each layer, :eq:`decay:app:atm:ode` is applied with
a linear temperature of the form


.. math::
         T(z) = \bar T_i + L_i(z-h_i),

where :math:`z=h_i` denotes the bottom of layer number :math:`i`,
having temperature :math:`\bar T_i`,
and :math:`L_i` is a constant in layer number :math:`i`. The table below
lists :math:`h_i` (m), :math:`\bar T_i` (K), and :math:`L_i` (K/m) for the layers
:math:`i=0,\ldots,6`.

================  ================  ================  ================  
   :math:`i`        :math:`h_i`     :math:`\bar T_i`    :math:`L_i`     
================  ================  ================  ================  
0                                0               288           -0.0065  
1                           11,000               216               0.0  
2                           20,000               216             0.001  
3                           32,000               228            0.0028  
4                           47,000               270               0.0  
5                           51,000               270           -0.0028  
6                           71,000               214            -0.002  
================  ================  ================  ================  

For implementation it might be convenient to write :eq:`decay:app:atm:ode`
on the form

.. math::
        
        \frac{dp}{dz} = -\frac{Mg}{R^*(\bar T(z) + L(z)(z-h(z)))} p,
        

where :math:`\bar T(z)`, :math:`L(z)`, and :math:`h(z)` are piecewise constant
functions with values given in the table.
The value of the pressure at the sea level :math:`z=0`, :math:`p_0=p(0)`, is :math:`101325` Pa.

Simplification: :math:`L=0`
~~~~~~~~~~~~~~~~~~~~~~~~~~~

One commonly used simplification is to assume that the temperature is
constant within each layer. This means that :math:`L=0`.

Simplification: one-layer model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Another commonly used approximation is to work with one layer instead of
seven. This `one-layer model <http://en.wikipedia.org/wiki/Density_of_air>`_
is based on :math:`T(z)=T_0 - Lz`, with
sea level standard temperature :math:`T_0=288` K and
temperature lapse rate :math:`L=0.0065` K/m.

.. _decay:app:sediment:

Compaction of sediments
-----------------------

Sediments, originally made from materials like sand and mud, get
compacted through geological time by the weight of new material that
is deposited on the sea bottom. The porosity :math:`\phi` of the sediments
tells how much void (fluid) space there is between the sand and
mud grains. The porosity reduces with depth because the weight of
the sediments above and causes the void space to shrink and thereby
increase the compaction.

A typical assumption is that the change in :math:`\phi` at some depth :math:`z`
is negatively proportional to :math:`\phi`. This assumption leads to
the differential equation problem


.. math::
   :label: decay:app:sediment:phi:eq
        
        \frac{d\phi}{dz} = -c\phi,\quad \phi(0)=\phi_0,
        
        

where the :math:`z` axis points downwards, :math:`z=0` is the surface with known
porosity, and :math:`c>0` is a constant.

The upper part of the Earth's crust consists of many geological layers
stacked on top of each other, as indicated in Figure
:ref:`decay:app:sediment:fig:layers`.  The model
:eq:`decay:app:sediment:phi:eq` can be applied for each layer. In
layer number :math:`i`, we have the unknown porosity function :math:`\phi_i(z)`
fulfilling :math:`\phi_i'(z)=-c_iz`, since the constant :math:`c` in the model
:eq:`decay:app:sediment:phi:eq` depends on the type of sediment in
the layer. From the figure we see that new layers of sediments are
deposited on top of older ones as time progresses. The compaction,
as measured by :math:`\phi`, is
rapid in the beginning and then decreases (exponentially) with depth
in each layer.


.. _decay:app:sediment:fig:layers:

.. figure:: fig-decay/Compaction_of_Sediment.png
   :width: 600

   *Illustration of the compaction of geological layers (with different colors) through time*


When we drill a well at present time through the right-most column of
sediments in Figure :ref:`decay:app:sediment:fig:layers`, we can measure
the thickness of the sediment in (say) the bottom layer. Let :math:`L_1` be
this thickness.  Assuming that the volume of sediment remains constant
through time, we have that the initial volume, :math:`\int_0^{L_{1,0}}
\phi_1 dz`, must equal the volume seen today,
:math:`\int_{\ell-L_1}^{\ell}\phi_1 dz`, where :math:`\ell` is the depth of the
bottom of the sediment in the present day configuration.  After having
solved for :math:`\phi_1` as a function of :math:`z`, we can then find the
original thickness :math:`L_{1,0}` of the sediment from the equation


.. math::
         \int_0^{L_{1,0}} \phi_1 dz = \int_{\ell-L_1}^{\ell}\phi_1 dz \thinspace .

In hydrocarbon exploration it is important to know :math:`L_{1,0}` and the
compaction history of the various layers of sediments.

.. _decay:app:drag:

Vertical motion of a body in a viscous fluid
--------------------------------------------


A body moving vertically through a fluid (liquid or gas) is subject to
three different types of forces: the gravity force, `the drag force <http://en.wikipedia.org/wiki/Drag_(physics)>`_,
and the buoyancy force.

Overview of forces
~~~~~~~~~~~~~~~~~~

The gravity force is :math:`F_g= -mg`, where :math:`m` is the mass of the body and
:math:`g` is the acceleration of gravity.
The uplift or buoyancy force ("Archimedes force") is :math:`F_b = \varrho gV`,
where :math:`\varrho` is the density of the fluid and
:math:`V` is the volume of the body.
Forces and other quantities are taken as positive in the upward
direction.

The drag force is of two types, depending on the Reynolds number

.. math::
        
        \hbox{Re} = \frac{\varrho d|v|}{\mu},
        

where :math:`d` is the diameter of the body in
the direction perpendicular to the flow, :math:`v` is the velocity of the
body, and :math:`\mu` is the dynamic viscosity of the fluid.
When :math:`\hbox{Re} < 1`, the drag force is fairly well modeled by
the so-called Stokes' drag,
which for a spherical body of diameter :math:`d` reads

.. math::
        
        F_d^{(S)} = - 3\pi d\mu v
        \thinspace .
        

For large Re, typically :math:`\hbox{Re} > 10^3`, the drag force is quadratic
in the velocity:

.. math::
        
        F_d^{(q)} = -{1\over2}C_D\varrho A|v|v,
        

where :math:`C_D` is a dimensionless drag coefficient depending on the body's shape,
and :math:`A` is the cross-sectional area as
produced by a cut plane, perpendicular to the motion, through the thickest
part of the body. The superscripts :math:`\,{}^q` and :math:`\,{}^S` in
:math:`F_d^{(S)}` and :math:`F_d^{(q)}` indicates Stokes drag and quadratic drag,
respectively.

Equation of motion
~~~~~~~~~~~~~~~~~~

All the mentioned forces act in the vertical direction.
Newton's second law of motion applied to the body says that the sum of
these forces must equal the mass of the body times its acceleration
:math:`a` in the vertical direction.


.. math::
         ma = F_g + F_d^{(S)} + F_b ,

if we choose to work with the Stokes drag.
Inserting the expressions for the forces yields


.. math::
          ma = -mg - 3\pi d\mu v + \varrho gV
        \thinspace .
        

The unknowns here are :math:`v` and :math:`a`, i.e., we have two unknowns but only
one equation. From kinematics in physics we know that
the acceleration is the time derivative of the velocity: :math:`a = dv/dt`.
This is our second equation.
We can easily eliminate :math:`a` and get a single differential equation for :math:`v`:


.. math::
         m{dv\over dt} = -mg - 3\pi d\mu v + \varrho gV
        \thinspace .
        

A small rewrite of this equation is handy: We express :math:`m` as :math:`\varrho_bV`,
where :math:`\varrho_b` is the density of the body, and we divide by
the mass to get


.. math::
   :label: decay:app:fallingbody:model:S
        
        v'(t) = - \frac{3\pi d\mu}{\varrho_b V} v + g\left(\frac{\varrho}{\varrho_b} -1\right)
        
        \thinspace .
        

We may introduce the constants

.. math::
        
        a = \frac{3\pi d\mu}{\varrho_b V},\quad
        b = g\left(\frac{\varrho}{\varrho_b} -1\right),
        

so that the structure of the differential equation becomes evident:


.. math::
   :label: decay:app:fallingbody:gmodel:S
        
        v'(t) = -av(t) + b
        
        \thinspace .
        

The corresponding initial condition is :math:`v(0)=v_0` for some prescribed
starting velocity :math:`v_0`.

This derivation can be repeated with the quadratic drag force
:math:`F_d^{(q)}`, giving the result


.. math::
   :label: decay:app:fallingbody:model:q
        
        v'(t) =
        -{1\over2}C_D{\varrho A\over\varrho_b V}|v|v +
        g\left({\varrho\over\varrho_b} - 1\right)
        \thinspace .
        
        

Defining


.. math::
        
        a = {1\over2}C_D{\varrho A\over\varrho_b V},
        

and :math:`b` as above, we can write :eq:`decay:app:fallingbody:model:q` as

.. math::
   :label: decay:app:fallingbody:gmodel:q
        
        v'(t) = -a|v|v + b
        \thinspace .
        
        



.. index:: terminal velocity


Terminal velocity
~~~~~~~~~~~~~~~~~

An interesting aspect of :eq:`decay:app:fallingbody:gmodel:S` and
:eq:`decay:app:fallingbody:gmodel:q` is whether we can approach
a constant, so-called *terminal velocity* :math:`v_T`, as :math:`t\rightarrow\infty`. The
existence of :math:`v_T` assumes that
:math:`v'(t)\rightarrow 0` as :math:`t\rightarrow\infty` and therefore


.. math::
        0 = -av_T + b

and

.. math::
         0 = -a|v_T|v_T + b
        \thinspace .
        

The former equation implies :math:`v_T = b/a`, while the latter has solutions
:math:`v_T =-\sqrt{|b|/a}` for a falling body (:math:`v_T<0`) and
:math:`v_T = \sqrt{b/a}` for a rising body (:math:`v_T>0`).

A Crank-Nicolson scheme
~~~~~~~~~~~~~~~~~~~~~~~

Both governing equations, the Stokes' drag model
:eq:`decay:app:fallingbody:gmodel:S` and the quadratic drag model
:eq:`decay:app:fallingbody:gmodel:q`, can be readily solved
by the Forward Euler scheme. The Crank-Nicolson method gives
a nonlinear equation in :math:`v` when applied to
:eq:`decay:app:fallingbody:gmodel:q`:


.. math::
        
        \frac{v^{n+1}-v^n}{\Delta t}
        = -a\frac{1}{2}(|v^{n+1}|v^{n+1} + |v^n|v^n) + b
        \thinspace .
        

However, instead of approximating the term :math:`-|v|v` by an arithmetic
average, we can use a *geometric average*:


.. index:: geometric average


.. index::
   single: averaging; geometric



.. math::
        
        (|v|v)^{n+\frac{1}{2}} \approx |v^n|v^{n+1}
        \thinspace .
        

The error is of second order in :math:`\Delta t`, just as for the arithmetic
average. With this approximation trick,


.. math::
        
        \frac{v^{n+1}-v^n}{\Delta t} = - a|v^{n}|v^{n+1} + b
        

becomes a *linear* equation in :math:`v^{n+1}`, and we can
therefore easily solve for :math:`v^{n+1}`:

.. math::
   :label: decay:app:fallingbody:gmodel:q:CN
        
        v^{n+1} = \frac{v_n + \Delta t b^{n+\frac{1}{2}}}{1 + \Delta t a^{n+\frac{1}{2}}|v^{n}|}{\thinspace .}
        
        


Physical data
~~~~~~~~~~~~~

Suitable values of :math:`\mu` are :math:`1.8\cdot 10^{-5}\hbox{ Pa}\, \hbox{s}` for air
and :math:`8.9\cdot 10^{-4}\hbox{ Pa}\, \hbox{s}` for water.
Densities can be taken as :math:`1.2\hbox{ kg/m}^3` for air and as
:math:`1.0\cdot 10^3\hbox{ kg/m}^3` for water. For considerable vertical
displacement in the atmosphere one should take into account that
the density of air varies with height, see the section :ref:`decay:app:atm`.
One possible density variation arises from the one-layer model
in the section :ref:`decay:app:atm`.

Any density variation makes :math:`b` time dependent and we need
:math:`b^{n+\frac{1}{2}}` in :eq:`decay:app:fallingbody:gmodel:q:CN`.
To compute :math:`b^{n+\frac{1}{2}}` we must also compute the vertical
position :math:`z(t)` of the body. Since :math:`v=dz/dt`, we can use a centered
difference approximation:


.. math::
         \frac{z^{n+\frac{1}{2}} - z^{n-\frac{1}{2}}}{\Delta t} = v^n
        \quad\Rightarrow\quad z^{n+\frac{1}{2}} = z^{n-\frac{1}{2}}+\Delta t\, v^n{\thinspace .}

This :math:`z^{n+\frac{1}{2}}` is used in the expression for :math:`b`
to compute :math:`\varrho(z^{n+\frac{1}{2}})` and then :math:`b^{n+\frac{1}{2}}`.

The `drag coefficient <http://en.wikipedia.org/wiki/Drag_coefficient>`_ :math:`C_D` depends heavily
on the shape of the body.  Some values are: 0.45 for a sphere, 0.42
for a semi-sphere, 1.05 for a cube, 0.82 for a long cylinder (with the
length along the vertical direction), 0.75 for a rocket,
1.0-1.3 for a man in upright position, 1.3 for a flat plate perpendicular
to the flow, and
0.04 for a streamlined (droplet-like) body.

Verification
~~~~~~~~~~~~

To verify the program, one may assume a heavy body in air such that the :math:`F_b`
force can be neglected, and further assume a small velocity such that the
air resistance :math:`F_d` can also be neglected. Simply setting :math:`\varrho =0`
removes both these terms from the equation. The motion then leads to
the velocity
:math:`v(t)=v_0 - gt`, which is linear in :math:`t` and therefore should be
reproduced to machine precision (say tolerance :math:`10^{-15}`) by any
implementation based on the Crank-Nicolson or Forward Euler schemes.

Another verification, but not as powerful as the one above,
can be based on computing the terminal velocity and comparing with
the exact expressions.
The advantage of this verification is that we can also
the test situation :math:`\varrho\neq 0`.

Obviously, the method of manufactured solutions can be applied to
test the implementation of all terms in the governing equation.


.. index:: scaling


Scaling  (2)
~~~~~~~~~~~~

Applying scaling, as described in the section :ref:`decay:app:scaling`,
will for the linear case reduce the need to estimate values for
seven parameters to choose values of *one* dimensionless parameter


.. math::
         \beta = \frac{\varrho_bgV\left(\frac{\varrho}{\varrho_b} -1\right)}{3\pi d\mu I},

if :math:`I\neq 0`, and if the motion starts from rest (:math:`I=0`), the scaled
problem :math:`\bar u'=1-\bar u`, :math:`\bar u(0)=0`, has no need for
estimating physical parameters.
This means that there is one universal solution to the problem,
the scaled solution :math:`\bar u(t) = 1 - e^{-\bar t}`, and all
physical cases correspond to stretching the :math:`\bar t` axis and the :math:`\bar u`
axis, i.e.,


.. math::
         u = \frac{\varrho_bgV\left(\frac{\varrho}{\varrho_b} -1\right)}{3\pi d\mu}\bar u(t/(g(\varrho/\varrho_b -1))){\thinspace .}





.. _decay:app:diffusion:Fourier:

Decay ODEs from solving a PDE by Fourier expansions
---------------------------------------------------

.. Maybe move to diffusion part? Makes sense there too, or refer...or

.. repeat, or make one exer with two k's and then generalize in diffusion


Suppose we have a partial differential equation

.. math::
         \frac{\partial u}{\partial t} = \alpha\frac{\partial^2u}{\partial x^2}
        + f(x,t),
        

with boundary conditions :math:`u(0,t)=u(L,t)=0` and initial condition
:math:`u(x,0)=I(x)`. One may express the solution as

.. math::
         u(x,t) = \sum_{k=1}^m A_k(t)e^{ikx\pi/L},

for appropriate unknown functions :math:`A_k`, :math:`k=1,\ldots,m`.
We use the complex exponential :math:`e^{ikx\pi/L}` for easy algebra, but
the physical :math:`u` is taken as the real part of any complex expression.
Note that the expansion in terms of :math:`e^{ikx\pi/L}` is compatible with
the boundary conditions: all functions :math:`e^{ikx\pi/L}` vanish for
:math:`x=0` and :math:`x=L`. Suppose we can express :math:`I(x)` as


.. math::
         I(x) = \sum_{k=1}^m I_ke^{ikx\pi/L}
        \thinspace .
        

Such an expansion can be computed by well-known Fourier expansion techniques,
but the details are not important here.
Also, suppose we can express the given :math:`f(x,t)` as

.. math::
         f(x,t) = \sum_{k=1}^m b_k(t)e^{ikx\pi/L}
        \thinspace .
        

Inserting the expansions for :math:`u`
and :math:`f` in the differential equations demands that all terms corresponding
to a given :math:`k` must be equal. The calculations results in the follow
system of ODEs:


.. math::
        
        A_k'(t) = -\alpha\frac{k^2\pi^2}{L^2} + b_k(t),\quad k=1,\ldots,m
        \thinspace .
        

From the initial condition

.. math::
         u(x,0)=\sum_k A_k(0)e^{ikx\pi/L}=I(x)=\sum_k I_k e^{(ikx\pi/L)},

it follows that :math:`A_k(0)=I_k`, :math:`k=1,\ldots,m`. We then have :math:`m`
equations of the form :math:`A_k'=-a A_k +b`, :math:`A_k(0)=I_k`, for
appropriate definitions of :math:`a` and :math:`b`. These ODE problems
independent each other such that we can solve one problem
at a time. The outline technique is a quite common approach for solving
partial differential equations.

*Remark.* Since :math:`a_k` depends on :math:`k` and the stability of
the Forward Euler scheme demands :math:`a_k\Delta t \leq 1`, we get that
:math:`\Delta t \leq \alpha^{-1}L^2\pi^{-2} k^{-2}`. Usually, quite large
:math:`k` values are needed to accurately represent the given functions
:math:`I` and :math:`f` and then :math:`\Delta t` needs to be very small for these large
values of :math:`k`.
Therefore, the Crank-Nicolson and Backward Euler schemes, which
allow larger :math:`\Delta t` without any growth in the solutions, are
more popular choices when creating time-stepping algorithms for
partial differential equations of the type considered in this
example.


Exercises  (4)
==============




.. --- begin exercise ---


.. _decay:app:exer:cooling:osc:

Exercise 19: Simulate an oscillating cooling process
----------------------------------------------------

The surrounding temperature :math:`T_s` in Newton's law of cooling
:eq:`decay:Newton:cooling` may vary in time. Assume that the
variations are periodic with period :math:`P` and amplitude :math:`a` around
a constant mean temperature :math:`T_m`:

.. math::
        
        T_s(t) = T_m + a\sin\left(\frac{2\pi}{P}t\right)
        \thinspace .
        

Simulate a process with the following data: :math:`k=20 \hbox{ min}^{-1}`,
:math:`T(0)=5` C, :math:`T_m=25` C, :math:`a=2.5` C, and :math:`P=1` h. Also experiment with
:math:`P=10` min and :math:`P=3` h. Plot :math:`T` and :math:`T_s` in the same plot.
Filename: ``osc_cooling.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:radio:C14:

Exercise 20: Radioactive decay of Carbon-14
-------------------------------------------

The `Carbon-14 <http://en.wikipedia.org/wiki/Carbon-14>`_ isotope,
whose radioactive decay is used extensively in dating organic material
that is tens of thousands of years old, has a half-life of :math:`5,730`
years.  Determine the age of an organic material that contains 8.4 percent
of its initial amount of Carbon-14.  Use a time unit of 1 year in the
computations.  The uncertainty in the half time of Carbon-14 is :math:`\pm
40` years.  What is the corresponding uncertainty in the estimate of
the age?

.. --- begin hint in exercise ---


*Hint.* Use simulations with :math:`5,730\pm 40` y as input
and find the corresponding interval for the result.

.. --- end hint in exercise ---

Filename: ``carbon14.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:stoch:nuclear:

Exercise 21: Simulate stochastic radioactive decay
--------------------------------------------------

The purpose of this exercise is to implement the stochastic model
described in the section :ref:`decay:app:nuclear` and show that its
mean behavior approximates the solution of the corresponding
ODE model.

The simulation goes on for a time interval :math:`[0,T]` divided into
:math:`N_t` intervals of length :math:`\Delta t`. We start with :math:`N_0`
atoms. In some time interval, we have :math:`N` atoms that have survived.
Simulate :math:`N` Bernoulli trials with probability :math:`\lambda\Delta t`
in this interval by drawing :math:`N` random numbers, each being 0 (survival)
or 1 (decay), where the probability of getting 1 is :math:`\lambda\Delta t`.
We are interested in the number of decays, :math:`d`, and the number of
survived atoms in the next interval is then :math:`N-d`.
The Bernoulli trials
are simulated by drawing :math:`N` uniformly distributed real numbers on
:math:`[0,1]` and saying that 1 corresponds to a value less than :math:`\lambda\Delta t`:


.. code-block:: python

        # Given lambda_, dt, N
        import numpy as np
        uniform = np.random.uniform(N)
        Bernoulli_trials = np.asarray(uniform < lambda_*dt, dtype=np.int)
        d = Bernoulli_trials.size

Observe that ``uniform < lambda_*dt`` is a boolean array whose true
and false values become 1 and 0, respectively, when converted to an
integer array.

Repeat the simulation over :math:`[0,T]` a large number of times, compute the average
value of :math:`N` in each interval, and compare with the solution of
the corresponding ODE model.
Filename: ``stochastic_decay.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:radio:twosubst:

Exercise 22: Radioactive decay of two substances
------------------------------------------------

Consider two radioactive substances A and B. The nuclei in substance A
decay to form nuclei of type B with a half-life :math:`A_{1/2}`, while
substance B decay to form type A nuclei with a half-life :math:`B_{1/2}`.
Letting :math:`u_A` and :math:`u_B` be the fractions of the initial amount of
material in substance A and B, respectively, the following system of
ODEs governs the evolution of :math:`u_A(t)` and :math:`u_B(t)`:

.. math::
        
        \frac{1}{\ln 2} u_A' = u_B/B_{1/2} - u_A/A_{1/2},
        



.. math::
          
        \frac{1}{\ln 2} u_B' = u_A/A_{1/2} - u_B/B_{1/2},
        

with :math:`u_A(0)=u_B(0)=1`.

Make a simulation program that solves for :math:`u_A(t)` and :math:`u_B(t)`.
Verify the implementation by computing analytically
the limiting values of
:math:`u_A` and :math:`u_B` as :math:`t\rightarrow \infty` (assume :math:`u_A',u_B'\rightarrow 0`)
and comparing these with those obtained numerically.

Run the program for the case of :math:`A_{1/2}=10` minutes and :math:`B_{1/2}=50` minutes.
Use a time unit of 1 minute. Plot :math:`u_A` and :math:`u_B` versus time in the same
plot.
Filename: ``radioactive_decay_2subst.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:atm1:

Exercise 23: Simulate the pressure drop in the atmosphere
---------------------------------------------------------

We consider the models for atmospheric pressure in
the section :ref:`decay:app:atm`.
Make a program with three functions,

 * one computing the pressure :math:`p(z)` using a seven-layer model
   and varying :math:`L`,

 * one computing :math:`p(z)` using a seven-layer model,
   but with constant temperature in each layer, and

 * one computing :math:`p(z)` based on the
   one-layer model.

How can these implementations be verified? Should ease of verification
impact how you code the functions?
Compare the three models in a plot.
Filename: ``atmospheric_pressure.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:drag:prog:

Exercise 24: Make a program for vertical motion in a fluid
----------------------------------------------------------

Implement the Stokes' drag model :eq:`decay:app:fallingbody:model:S`
and the quadratic drag model :eq:`decay:app:fallingbody:model:q` from
the section :ref:`decay:app:drag`, using the Crank-Nicolson
scheme as explained and the assumption of constant fluid density.
At each time level, compute the Reynolds number
Re and choose the Stokes' drag model if :math:`\hbox{Re} < 1` and the
quadratic drag model otherwise.

The computation of the numerical solution should take place either in
a function (as in the section :ref:`decay:py1`) or in classes (as in the section :ref:`decay:prog:se:class`). Create a module (see the section :ref:`decay:prog:se:module`) and equip it with nose tests (see the section :ref:`decay:prog:se:nose`) based on the two suggested verification tests
in the section :ref:`decay:app:drag` and on the method of manufactured
solutions (see the section :ref:`decay:MMS`) combined with computing
convergence rates (see the section :ref:`decay:convergence:rate`).

Apply the software to a case involving a ball rising in water.  The
buoyancy force is here the driving force, but the drag will be
significant and balance the other forces after some time.  A soccer
ball has radius 11 cm and mass 0.43 kg.  Start the motion from rest, set
the density of water to :math:`1000\hbox{ kg/m}^3`, and use a drag
coefficient for a ball: 0.45. Plot the velocity of the rising ball.
Filename: ``vertical_motion.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:parachute:

Project 1: Simulate parachuting
-------------------------------

The aim of this project is to develop a general solver for the
vertical motion of a body with quadratic air drag, verify the solver,
apply the solver to a skydiver in free fall, and finally apply the
solver to a complete parachute jump.

All the pieces of software implemented in this project
should be realized as Python functions and/or classes and collected
in one module.


*a)* Set up the differential equation problem that governs the velocity
of the motion.
The parachute jumper is subject to the gravity force and a quadratic
drag force. Assume constant density.
Add an extra source term be used for program verification.
Identify the input data to the problem.

*b)* Make a Python module for computing the velocity of the motion.
Also equip the module with functionality for plotting the velocity.

.. --- begin hint in exercise ---


*Hint 1.* Use the Crank-Nicolson scheme with a geometric average in time to
linearize the equation of motion with quadratic drag.

.. --- end hint in exercise ---


.. --- begin hint in exercise ---


*Hint 2.* You can either use functions or classes for implementation.
If you choose functions, make a function
``solver`` that takes all the input data in the problem as
arguments and that returns the velocity (as a mesh function) and
the time mesh. In case of a class-based implementation, introduce
a problem class with the physical data
and a solver class with the numerical data and a ``solve`` method
that stores the velocity and the mesh in the class.

.. --- end hint in exercise ---


*c)* Check if a linear solution fulfills the discrete equation and can be
used for verification in the sense that the numerical solution should
produce this solution without errors (to machine precision).

Construct verification tests for computations in simplified
physical cases where you have information about the exact solution.
Also use the method of manufactured solutions to create a verification test.
Convergence rates must be computed in these cases.

Implement all tests as nose tests in the Python module.

*d)* Compute the drag force, the gravity
force, and the buoyancy force as a function of time. Create
a plot with these three forces.

.. --- begin hint in exercise ---


*Hint.* You can either make a function ``forces(v, t, plot=None)``
that returns the forces (as mesh functions) and ``t`` and shows
a plot on the screen and also saves the plot to a file with name ``plot``
if ``plot`` is not ``None``, or you can extend the solver class with
computation of forces and include plotting of forces in the
visualization class.

.. --- end hint in exercise ---


*e)* Compute the velocity of
a skydiver in free fall before the parachute opens.

.. --- begin hint in exercise ---


*Hint.* Meade and Struthers [Ref6]_ provide some data relevant
to `skydiving <http://en.wikipedia.org/wiki/Parachuting>`_.
The mass of the human body and equipment
can be set to :math:`100` kg.
A skydiver in spread-eagle formation has a cross-section of 0.5 :math:`\hbox{m}^2`
in the horizontal plane.
The density of air decreases varies altitude, but can be taken
as constant, 1 :math:`\hbox{kg/m}^3`, for altitudes relevant to
skydiving (0-4000 m).
The drag coefficient for a man in upright position can be set to 1.2.
Start with a zero velocity.
A free fall typically has a terminating velocity of 45 m/s. (This value
can be used to tune other parameters.)
.. --- end hint in exercise ---


*f)* The next task is to simulate
a parachute jumper during free fall and after the parachute opens.
At the time the parachute opens, the drag coefficient and the cross-sectional
area change dramatically.
Generalize the solver function to a new function ``solver_parachute`` where
the drag coefficient and the cross-sectional area have different
values before and after time :math:`t_p` when the parachute is released.

Use the program to simulate a jump from :math:`z=3000` m to the ground :math:`z=0`.

.. --- begin hint in exercise ---


*Hint.* Following Meade and Struthers [Ref6]_, one can set the
cross-section area perpendicular to the motion to 44 :math:`\hbox{m}^2`
when the parachute is open. The drag coefficient for an open
parachute can be taken as 1.8, but tuned using the known value
of the typical terminating velocity reached before landing:
5.3 m/s. The parachute is released after 10 s.

.. --- end hint in exercise ---


Filename: ``skydiving.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:drag:atm1:

Exercise 25: Formulate vertical motion in the atmosphere
--------------------------------------------------------

Vertical motion of a body in the atmosphere needs to take into
account a varying air density if the range of altitudes is
many kilometers. In this case, :math:`\varrho` varies with the altitude :math:`z`.
The equation of motion for the body is given in
the section :ref:`decay:app:drag`. Let us assume quadratic drag force
(otherwise the body has to be very, very small).
A differential equation problem for the air density, based on
the information for the one-layer atmospheric model in
the section :ref:`decay:app:atm`, can be set up as


.. math::
        
        p'(z) = -\frac{Mg}{R^*(T_0+Lz)} p,
        



.. math::
          
        \varrho = p \frac{M}{R^*T}
        \thinspace .
        

To evaluate :math:`p(z)` we need the altitude :math:`z`. From the principle that the
velocity is the derivative of the position we have that


.. math::
        
        z'(t) = v(t),
        

where :math:`v` is the velocity of the body.

Explain in detail how the governing equations can be discretized
by the Forward Euler and the Crank-Nicolson methods.
Filename: ``falling_in_variable_density.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:drag:atm2:

Exercise 26: Simulate vertical motion in the atmosphere
-------------------------------------------------------

Implement the Forward Euler or the Crank-Nicolson scheme
derived in :ref:`decay:app:exer:drag:atm1`.
Demonstrate the effect of air density variation on a falling
human, e.g., the famous fall of `Felix Baumgartner <http://en.wikipedia.org/wiki/Felix_Baumgartner>`_. The drag coefficient can be set to 1.2.

*Remark.* In the Crank-Nicolson scheme one must solve a :math:`3\times 3` system of
equations at each time level, since :math:`p`, :math:`\varrho`, and :math:`v` are
coupled, while each equation can be stepped forward at a time with the
Forward Euler scheme.
Filename: ``falling_in_variable_density.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:signum:

Exercise 27: Compute :math:`y=|x|` by solving an ODE
----------------------------------------------------

Consider the ODE problem

.. math::
        
        y'(x) = \left\lbrace\begin{array}{ll}
        -1, & x < 0,\\ 
        1, & x \geq 0
        \end{array}\right.\quad x\in (-1, 1],
        \quad y(1-)=1,
        

which has the solution :math:`y(x)=|x|`.
Using a mesh :math:`x_0=-1`, :math:`x_1=0`, and :math:`x_2=1`, calculate by hand
:math:`y_1` and :math:`y_2` from the Forward Euler, Backward Euler, Crank-Nicolson,
and Leapfrog methods. Use all of the former three methods for computing
the :math:`y_1` value to be used in the Leapfrog calculation of :math:`y_2`.
Thereafter, visualize how these schemes perform for a uniformly partitioned
mesh with :math:`N=10` and :math:`N=11` points.
Filename: ``signum.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:interest:

Exercise 28: Simulate growth of a fortune with random interest rate
-------------------------------------------------------------------

The goal of this exercise is to compute the value of a fortune subject
to inflation and a random interest rate.
Suppose that the inflation is constant at :math:`i` percent per year and that the
annual interest rate, :math:`p`, changes randomly at each time step,
starting at some value :math:`p_0` at :math:`t=0`.
The random change is from a value :math:`p^n` at :math:`t=t_n` to
:math:`p_n +\Delta p` with probability 0.25 and :math:`p_n -\Delta p` with probability 0.25.
No change occurs with probability 0.5. There is also no change if
:math:`p^{n+1}` exceeds 15 or becomes below 1.
Use a time step of one month, :math:`p_0=i`, initial fortune scaled to 1,
and simulate 1000 scenarios of
length 20 years. Compute the mean evolution of one unit of money and the
corresponding
standard deviation. Plot the mean curve along with the mean plus one
standard deviation and the mean minus one standard deviation. This will
illustrate the uncertainty in the mean curve.

.. --- begin hint in exercise ---


*Hint 1.* The following code snippet computes :math:`p^{n+1}`:

.. code-block:: python

        import random
        
        def new_interest_rate(p_n, dp=0.5):
            r = random.random()  # uniformly distr. random number in [0,1)
            if 0 <= r < 0.25:
                p_np1 = p_n + dp
            elif 0.25 <= r < 0.5:
                p_np1 = p_n - dp
            else:
                p_np1 = p_n
            return (p_np1 if 1 <= p_np1 <= 15 else p_n)

.. --- end hint in exercise ---


.. --- begin hint in exercise ---


*Hint 2.* If :math:`u_i(t)` is the value of the fortune in experiment number :math:`i`,
:math:`i=0,\ldots,N-1`,
the mean evolution of the fortune is

.. math::
         \bar u(t)= \frac{1}{N}\sum_{i=0}^{N-1} u_i(t),
        

and the standard deviation is

.. math::
         s(t) = \sqrt{\frac{1}{N-1}\left(- (\bar u(t))^2 +
                        \sum_{i=0}^{N-1} (u_i(t))^2\right)}
        \thinspace .
        

Suppose :math:`u_i(t)` is stored in an array ``u``.
The mean and the standard deviation of the fortune
is most efficiently computed by
using two accumulation arrays, ``sum_u`` and ``sum_u2``, and
performing ``sum_u += u`` and ``sum_u2 += u**2`` after every experiment.
This technique avoids storing all the :math:`u_i(t)` time series for
computing the statistics.

.. --- end hint in exercise ---

Filename: ``random_interest.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:pop:at:

Exercise 29: Simulate a population in a changing environment
------------------------------------------------------------

We shall study a population modeled by :eq:`decay:app:pop:ueq` where
the environment, represented by :math:`r` and :math:`f`, undergoes changes with time.


*a)* Assume that there is a sudden drop (increase) in the birth (death)
rate at time :math:`t=t_r`,
because of limited nutrition or food supply:

.. math::
         a(t) =\left\lbrace\begin{array}{ll}
        r_0, & t< t_r,\\ 
        r_0 - A, & t\geq t_r,\end{array}\right.
        

This drop in population growth is compensated by a sudden net immigration
at time :math:`t_f>t_r`:

.. math::
         f(t) =\left\lbrace\begin{array}{ll}
        0, & t< t_f,\\ 
        f_0, & t\geq t_a,\end{array}\right.
        

Start with :math:`r_0` and make :math:`A>r_0`. Experiment with
these and other parameters to
illustrate the interplay of growth and decay in such a problem.
Filename: ``population_drop.py``.

*b)* Now we assume that the environmental conditions changes periodically with
time so that we may take

.. math::
         r(t) = r_0 + A\sin\left(\frac{2\pi}{P}t\right)
        \thinspace .
        

That is, the combined birth and death rate oscillates around :math:`r_0` with
a maximum change of :math:`\pm A` repeating over a period of length :math:`P` in time.
Set :math:`f=0` and experiment with the other parameters to illustrate typical
features of the solution.
Filename: ``population_osc.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:pop:logistic1:

Exercise 30: Simulate logistic growth
-------------------------------------

Solve the logistic ODE
:eq:`decay:app:pop:logistic` using a Crank-Nicolson scheme where
:math:`(u^{n+1/2})^2` is approximated by a *geometric mean*:

.. math::
         (u^{n+1/2})^2 \approx u^{n+1}u^n
        \thinspace .
        

This trick makes the discrete equation linear in :math:`u^{n+1}`.
Filename: ``logistic_CN.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _decay:app:exer:interest:derive:

Exercise 31: Rederive the equation for continuous compound interest
-------------------------------------------------------------------

The ODE model :eq:`decay:app:interest:eq2` was derived under the assumption
that :math:`r` was constant. Perform an alternative derivation without
this assumption: 1) start with :eq:`decay:app:interest:eq1`;
2) introduce a time step :math:`\Delta t` instead of :math:`m`: :math:`\Delta t = 1/m` if
:math:`t` is measured in years; 3) divide by :math:`\Delta t` and take the
limit :math:`\Delta t\rightarrow 0`. Simulate a case where the inflation is
at a constant level :math:`I` percent per year and the interest rate oscillates:
:math:`r=-I/2 + r_0\sin(2\pi t)`.
Compare solutions for :math:`r_0=I, 3I/2, 2I`.
Filename: ``interest_modeling.py``.

.. --- end exercise ---



