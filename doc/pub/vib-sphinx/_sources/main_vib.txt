.. Automatically generated reST file from Doconce source
   (https://github.com/hplgit/doconce/)

Finite difference methods for vibration problems
================================================

:Author: Hans Petter Langtangen
:Date: Sep 4, 2013

Note: **PRELIMINARY VERSION** (expect typos)






.. Externaldocuments: ../decay/main_decay





Vibration problems lead to differential equations with solutions that
oscillates in time, typically in a damped or undamped sinusoidal
fashion.  Such solutions put certain demands on the numerical methods
compared to other phenomena whose solutions are monotone.
Both the frequency and amplitude of the oscillations need to be
accurately handled by the numerical schemes. Most of the reasoning and
specific building blocks introduced in the fortcoming text can be
reused to construct sound methods for partial differential equations
of wave nature in multiple spatial dimensions.


.. 2DO:

.. Long time integration by adaptive RK: will that improve the

.. phase error? Do experiments where we measure the wavelength

.. and plot it as function of time. Can we vectorize the

.. max/min pt computation?


.. _vib:model1:

Finite difference discretization
================================

Much of the numerical challenges with computing oscillatory
solutions in ODEs and PDEs can be captured by the very simple
ODE :math:`u'' + u =0` and this is therefore the starting point for
method development, implementation, and analysis.

A basic model for vibrations
----------------------------


.. index:: vibration ODE

.. index:: oscillations

.. index:: mechanical vibrations


A system that vibrates without damping and external forcing
can be described by ODE problem


.. math::
   :label: vib:ode1
        
        u'' + \omega^2u = 0,\quad u(0)=I,\ u'(0)=0,\ t\in (0,T]
        \thinspace .
        
        

Here, :math:`\omega` and :math:`I` are given constants.
The exact solution of :eq:`vib:ode1` is


.. index:: period (of oscillations)


.. index:: frequency (of oscillations)


.. index:: Hz (unit)



.. math::
   :label: vib:ode1:uex
        
        u(t) = I\cos (\omega t)
        \thinspace .
        
        

That is, :math:`u` oscillates with constant amplitude :math:`I` and
angular frequency :math:`\omega`.
The corresponding period of oscillations (i.e., the time between two
neighboring peaks in the cosine function) is :math:`P=2\pi/\omega`.
The number of periods per second
is :math:`f=\omega/(2\pi)` and measured in the unit Hz.
Both :math:`f` and :math:`\omega` are referred to as frequency, but :math:`\omega`
may be more precisely named angular frequency, measured in rad/s.

In vibrating mechanical systems modeled by :eq:`vib:ode1`, :math:`u(t)`
very often represents a position or a displacement of a particular
point in the system. The derivative :math:`u'(t)` then has the
interpretation of the point's velocity, and :math:`u''(t)` is the associated
acceleration.  The model :eq:`vib:ode1` is not only
applicable to vibrating mechanical systems, but also to oscillations
in electrical circuits.

.. _vib:ode1:fdm:

A centered finite difference scheme
-----------------------------------

To formulate a finite difference method for the model
problem  :eq:`vib:ode1` we follow the `four steps <http://tinyurl.com/k3sdbuv/pub/decay-sphinx/main_decay.html#the-forward-euler-scheme>`_ in [Ref1]_.


.. index::
   single: mesh; finite differences

.. index:: mesh function


Step 1: Discretizing the domain
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The domain is discretized by
introducing a uniformly partitioned time mesh in the present problem.
The points in the mesh are hence :math:`t_n=n\Delta t`, :math:`n=0,1,\ldots,N_t`,
where :math:`\Delta t = T/N_t` is the constant length of the time steps.
We introduce a mesh function :math:`u^n` for :math:`n=0,1,\ldots,N_t`, which
approximates the exact solution at the mesh points. The mesh
function will be computed from algebraic equations derived from
the differential equation problem.


Step 2: Fulfilling the equation at discrete time points
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ODE is to be satisfied at each mesh point:


.. math::
   :label: vib:ode1:step2
        
        u''(t_n) + \omega^2u(t_n) = 0,\quad n=1,\ldots,N_t
        \thinspace .
        
        


Step 3: Replacing derivatives by finite differences
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The derivative :math:`u''(t_n)` is to be replaced by a finite
difference approximation. A common second-order accurate approximation
to the second-order derivative is


.. math::
   :label: vib:ode1:step3
        
        u''(t_n) \approx \frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
        \thinspace .
        
        

Inserting :eq:`vib:ode1:step3` in :eq:`vib:ode1:step2`
yields


.. math::
   :label: vib:ode1:step3b
        
        \frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2} = -\omega^2 u^n
        \thinspace .
        
        


We also need to replace the derivative in the initial condition by
a finite difference. Here we choose a centered difference:


.. math::
   :label: vib:ode1:step3c
        
        \frac{u^1-u^{-1}}{2\Delta t} = 0
        
        \thinspace .
        


Step 4: Formulating a recursive algorithm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To formulate the computational algorithm, we assume that we
have already computed :math:`u^{n-1}` and :math:`u^n` such that :math:`u^{n+1}` is the
unknown value, which we can readily solve for:


.. math::
   :label: vib:ode1:step4
        
        u^{n+1} = 2u^n - u^{n-1} - \omega^2 u^n
        \thinspace .
        
        

The computational algorithm is simply to apply :eq:`vib:ode1:step4`
successively for :math:`n=1,2,\ldots,N_t-1`. This numerical scheme sometimes
goes under the name
Stormer's
method or `Verlet integration <http://en.wikipedia.org/wiki/Velocity_Verlet>`_.

Computing the first step
~~~~~~~~~~~~~~~~~~~~~~~~

We observe that :eq:`vib:ode1:step4` cannot be used for :math:`n=0` since
the computation of :math:`u^1` then involves the undefined value :math:`u^{-1}`
at :math:`t=-\Delta t`. The discretization of the initial condition
then come to rescue: :eq:`vib:ode1:step3c` implies :math:`u^{-1} = u^1`
and this relation can be combined with :eq:`vib:ode1:step4`
for :math:`n=1` to yield a value for :math:`u^1`:


.. math::
         u^1 = 2u^0 - u^{1} - \Delta t^2 \omega^2 u^0,

which reduces to


.. math::
   :label: vib:ode1:step4b
        
        u^1 = u^0 - \frac{1}{2} \Delta t^2 \omega^2 u^0
        \thinspace .
        
        

:ref:`vib:exer:step4b:alt` asks you to perform an alternative derivation
and also to generalize the initial condition to :math:`u'(0)=V\neq 0`.

The computational algorithm
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The steps for solving :eq:`vib:ode1` becomes

 1. :math:`u^0=I`

 2. compute :math:`u^1` from :eq:`vib:ode1:step4b`

 3. for :math:`n=1,2,\ldots,N_t-1`:

   1. compute :math:`u^{n+1}` from :eq:`vib:ode1:step4`


The algorithm is more precisely expressed directly in Python:


.. code-block:: python

        t = linspace(0, T, Nt+1)  # mesh points in time
        dt = t[1] - t[0]          # constant time step
        u = zeros(Nt+1)           # solution
        
        u[0] = I
        u[1] = u[0] - 0.5*dt**2*w**2*u[0]
        for n in range(1, Nt):
            u[n+1] = 2*u[n] - u[n-1] - dt**2*w**2*u[n]




.. admonition:: Remark

   In the code, we use ``w`` as the symbol for :math:`\omega`.
   The reason is that this author prefers ``w`` for readability
   and comparison with the mathematical :math:`\omega` instead of
   the full word ``omega`` as variable name.


Operator notation
~~~~~~~~~~~~~~~~~

We may write the scheme using the compact difference notation
(see 
`examples <http://tinyurl.com/k3sdbuv/pub/decay-sphinx/main_decay.html#compact-operator-notation-for-finite-differences>`_ in [Ref1]_). The difference :eq:`vib:ode1:step3` has the operator
notation :math:`[D_tD_t u]^n` such that we can write:


.. math::
   :label: vib:ode1:step4:op
        
        [D_tD_t u  + \omega^2 u = 0]^n
        \thinspace .
        
        

Note that :math:`[D_tD_t u]^n` means applying a central difference with step :math:`\Delta t/2` twice:


.. math::
         [D_t(D_t u)]^n = \frac{[D_t u]^{n+1/2} - [D_t u]^{n-1/2}}{\Delta t}

which is written out as

.. math::
        
        \frac{1}{\Delta t}\left(\frac{u^{n+1}-u^n}{\Delta t} - \frac{u^{n}-u^{n-1}}{\Delta t}\right) = \frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
        \thinspace .
        


The discretization of initial conditions can in the operator notation
be expressed as

.. math::
        
        [u = I]^0,\quad [D_{2t} u = 0]^0,
        

where the operator :math:`[D_{2t} u]^n` is defined as

.. math::
        
        [D_{2t} u]^n = \frac{u^{n+1} - u^{n-1}}{2\Delta t}
        \thinspace .
        


Computing :math:`u'`
~~~~~~~~~~~~~~~~~~~~

In mechanical vibration applications one is often interested in
computing the velocity :math:`u'(t)` after :math:`u(t)` has been computed.
This can be done by a central difference,


.. math::
        
        u'(t_n) \approx \frac{u^{n+1}-u^{n-1}}{2\Delta t} = [D_{2t}u]^n
        \thinspace .
        



.. _vib:impl1:

Implementation  (1)
===================

Making a solver function
------------------------

The algorithm from the previous section is readily translated to
a complete Python function for computing (returning)
:math:`u^0,u^1,\ldots,u^{N_t}` and :math:`t_0,t_1,\ldots,t_{N_t}`, given the
input :math:`I`, :math:`\omega`, :math:`\Delta t`, and :math:`T`:


.. code-block:: python

        from numpy import *
        from matplotlib.pyplot import *
        
        def solver(I, w, dt, T):
            """
            Solve u'' + w**2*u = 0 for t in (0,T], u(0)=I and u'(0)=0,
            by a central finite difference method with time step dt.
            """
            dt = float(dt)
            Nt = int(round(T/dt))
            u = zeros(Nt+1)
            t = linspace(0, Nt*dt, Nt+1)
        
            u[0] = I
            u[1] = u[0] - 0.5*dt**2*w**2*u[0]
            for n in range(1, Nt):
                u[n+1] = 2*u[n] - u[n-1] - dt**2*w**2*u[n]
            return u, t


A function for plotting the numerical and the exact solution is also
convenient to have:


.. code-block:: python

        def exact_solution(t, I, w):
            return I*cos(w*t)
        
        def visualize(u, t, I, w):
            plot(t, u, 'r--o')
            t_fine = linspace(0, t[-1], 1001)  # very fine mesh for u_e
            u_e = exact_solution(t_fine, I, w)
            hold('on')
            plot(t_fine, u_e, 'b-')
            legend(['numerical', 'exact'], loc='upper left')
            xlabel('t')
            ylabel('u')
            dt = t[1] - t[0]
            title('dt=%g' % dt)
            umin = 1.2*u.min();  umax = -umin
            axis([t[0], t[-1], umin, umax])
            savefig('vib1.png')
            savefig('vib1.pdf')
            savefig('vib1.eps')

A corresponding main program calling these functions for a simulation
of a given number of periods (``num_periods``) may take the form


.. code-block:: python

        I = 1
        w = 2*pi
        dt = 0.05
        num_periods = 5
        P = 2*pi/w    #  one period
        T = P*num_periods
        u, t = solver(I, w, dt, T)
        visualize(u, t, I, w, dt)


Adjusting some of the input parameters on the command line can be
handy. Here is a code segment using the ``ArgumentParser`` tool in
the ``argparse`` module to define option value (``--option value``)
pairs on the command line:


.. code-block:: python

        import argparse
        parser = argparse.ArgumentParser()
        parser.add_argument('--I', type=float, default=1.0)
        parser.add_argument('--w', type=float, default=2*pi)
        parser.add_argument('--dt', type=float, default=0.05)
        parser.add_argument('--num_periods', type=int, default=5)
        a = parser.parse_args()
        I, w, dt, num_periods = a.I, a.w, a.dt, a.num_periods


A typical execution goes like


.. code-block:: console

        Terminal> python vib_undamped.py --num_periods 20 --dt 0.1


.. _vib:ode1:verify:

Verification  (1)
-----------------

Manual calculation
~~~~~~~~~~~~~~~~~~

The simplest type of verification, which is also instructive for understanding
the algorithm, is to compute :math:`u^1`, :math:`u^2`, and :math:`u^3`
with the aid of a calculator
and make a function for comparing these results with those from the ``solver``
function. We refer to the ``test_three_steps`` function in
the file `vib_undamped.py <http://tinyurl.com/jvzzcfn/vib/vib_undamped.py>`_
for details.

Testing very simple solutions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Constructing test problems where the exact solution is constant or linear
helps initial debugging and verification as one expects any reasonable
numerical method to reproduce such solutions to machine
precision.
Second-order accurate methods will often also reproduce a quadratic
solution.
Here :math:`[D_tD_tt^2]^n=2`, which is the exact result. A solution
:math:`u=t^2` leads to :math:`u''+\omega^2 u=2 + (\omega t)^2\neq 0`.
We must therefore add a source in the equation:
:math:`u'' + \omega^2 u = f` to allow a solution :math:`u=t^2` for :math:`f=(\omega t)^2`.
By simple insertion we can show that the mesh function :math:`u^n = t_n^2` is
also a solution of the discrete equations.
:ref:`vib:exer:undamped:verify:linear` and
:ref:`vib:exer:undamped:verify:quadratic` ask you to carry out all
details with showing that linear and quadratic solutions are solutions
of the discrete equations. Such results are very useful
for debugging and verification.

Checking convergence rates
~~~~~~~~~~~~~~~~~~~~~~~~~~

Empirical computation of convergence rates, as explained
for a simple `ODE model <http://tinyurl.com/k3sdbuv/pub/decay-sphinx/main_decay.html#computing-convergence-rates>`_, yields a good method for
verification. The function below

 * performs :math:`m` simulations with halved time steps: :math:`2^{-i}\Delta t`, :math:`i=0,\ldots,m-1`,

 * computes the :math:`L^2` norm of the error,
   :math:`E=\sqrt{2^{-i}\Delta t\sum_{n=0}^{N_t-1}(u^n-u_{\small\mbox{e}}(t_n))^2}` in each case,

 * estimates the convergence rates :math:`r_i` based on two consecutive
   experiments :math:`(\Delta t_{i-1}, E_{i-1})` and :math:`(\Delta t_{i}, E_{i})`,
   assuming :math:`E_i=C\Delta t_i^{r_i}` and :math:`E_{i-1}=C\Delta t_{i-1}^{r_i}`.
   From these equations it follows that
   :math:`r_{i-1} = \ln (E_{i-1}/E_i)/\ln (\Delta t_{i-1}/\Delta t_i)`, for
   :math:`i=1,\ldots,m-1`.

All the implementational details appear below.


.. code-block:: python

        def convergence_rates(m, num_periods=8):
            """
            Return m-1 empirical estimates of the convergence rate
            based on m simulations, where the time step is halved
            for each simulation.
            """
            w = 0.35; I = 0.3
            dt = 2*pi/w/30  # 30 time step per period 2*pi/w
            T = 2*pi/w*num_periods
            dt_values = []
            E_values = []
            for i in range(m):
                u, t = solver(I, w, dt, T)
                u_e = exact_solution(t, I, w)
                E = sqrt(dt*sum((u_e-u)**2))
                dt_values.append(dt)
                E_values.append(E)
                dt = dt/2
        
            r = [log(E_values[i-1]/E_values[i])/
                 log(dt_values[i-1]/dt_values[i])
                 for i in range(1, m, 1)]
            return r

The returned ``r`` list has its values equal to 2.00, which is in
excellent agreement with what is
expected from the second-order finite difference approximation :math:`[D_tD_tu]^n`
and other theoretical measures of the error in the numerical method.
The final ``r[-1]`` value is a good candidate for a unit test:


.. code-block:: python

        def test_convergence_rates():
            r = convergence_rates(m=5, num_periods=8)
            # Accept rate to 1 decimal place
            nt.assert_almost_equal(r[-1], 2.0, places=1)

The complete code appears in the file ``vib_undamped.py``.

.. _vib:ode1:longseries:

Long time simulations
=====================

Figure :ref:`vib:ode1:2dt` shows a comparison of the exact and numerical
solution for :math:`\Delta t=0.1, 0.05` and :math:`w=2\pi`.
From the plot we make the following observations:

 * The numerical solution seems to have correct amplitude.

 * There is a phase error which is reduced by reducing the time step.

 * The total phase error grows with time.

By phase error we mean that the peaks of the numerical solution have incorrect
positions compared with the peaks of the exact cosine solution. This
effect can be understood as if also the numerical solution is on
the form :math:`I\cos\tilde\omega t`, but where :math:`\tilde\omega` is not exactly
equal to :math:`\omega`. Later, we shall mathematically
quantify this numerical frequency :math:`\tilde\omega`.


.. _vib:ode1:2dt:

.. figure:: vib_phase_err1.png
   :width: 600

   *Effect of halving the time step*


Using a moving plot window
--------------------------

In vibration problems it is often of interest to investigate the system's
behavior over long time intervals. Errors in the phase may then show
up as crucial. Let us investigate long
time series by introducing a moving plot window that can move along with
the :math:`p` most recently computed periods of the solution. The
`SciTools <http://code.google.com/p/scitools>`_ package contains
a convenient tool for this: ``MovingPlotWindow``. Typing
``pydoc scitools.MovingPlotWindow`` shows a demo and description of usage.
The function below illustrates the usage and is invoked in the
``vib_undamped.py`` code if the number of periods in the simulation exceeds
10:


.. code-block:: python

        def visualize_front(u, t, I, w, savefig=False):
            """
            Visualize u and the exact solution vs t, using a
            moving plot window and continuous drawing of the
            curves as they evolve in time.
            Makes it easy to plot very long time series.
            """
            import scitools.std as st
            from scitools.MovingPlotWindow import MovingPlotWindow
        
            P = 2*pi/w  # one period
            umin = 1.2*u.min();  umax = -umin
            plot_manager = MovingPlotWindow(
                window_width=8*P,
                dt=t[1]-t[0],
                yaxis=[umin, umax],
                mode='continuous drawing')
            for n in range(1,len(u)):
                if plot_manager.plot(n):
                    s = plot_manager.first_index_in_plot
                    st.plot(t[s:n+1], u[s:n+1], 'r-1',
                            t[s:n+1], I*cos(w*t)[s:n+1], 'b-1',
                            title='t=%6.3f' % t[n],
                            axis=plot_manager.axis(),
                            show=not savefig) # drop window if savefig
                    if savefig:
                        filename = 'tmp_vib%04d.png' % n
                        st.savefig(filename)
                        print 'making plot file', filename, 'at t=%g' % t[n]
                plot_manager.update(n)


Running

.. code-block:: console

        Terminal> python vib_undamped.py --dt 0.05 --num_periods 40

makes the simulation last for 40 periods of the cosine function.
With the moving plot window we can follow the numerical and exact
solution as time progresses, and we see from this demo that
the phase error is small in the beginning, but then becomes more
prominent with time. Running ``vib_undamped.py`` with :math:`\Delta t=0.1`
clearly shows that the phase errors become significant even earlier
in the time series and destroys the solution.

Making a movie file
-------------------


.. index:: making movies


The ``visualize_front`` function stores all the plots in
files whose names are numbered:
``tmp_vib0000.png``, ``tmp_vib0001.png``, ``tmp_vib0002.png``,
and so on. From these files we may make a movie. The Flash
format is popular,


.. code-block:: console

        Terminal> avconv -r 12 -i tmp_vib%04d.png -vcodec flv movie.flv

The ``avconv`` program can be replaced by the ``ffmpeg`` program in
the above command if desired.
Other formats can be generated by changing the video codec
and equipping the movie file with the right extension:

===============================  ===============================  
             Format                     Codec and filename        
===============================  ===============================  
Flash                            ``-vcodec flv movie.flv``        
MP4                              ``-vcodec libx64 movie.mp4``     
Webm                             ``-vcodec libvpx movie.webm``    
Ogg                              ``-vcodec libtheora movie.ogg``  
===============================  ===============================  

The movie file can be played by some video player like ``vlc``, ``mplayer``,
``gxine``, or ``totem``, e.g.,


.. code-block:: console

        Terminal> vlc movie.webm

A web page can also be used to play the movie. Today's standard is
to use the HTML5 ``video`` tag:


.. code-block:: html

        <video autoplay loop controls
               width='640' height='365' preload='none'>
        <source src='movie.webm'  type='video/webm; codecs="vp8, vorbis"'>
        </video>




.. admonition:: Caution: number the plot files correctly

   To ensure that the individual plot frames are shown in correct order,
   it is important to number the files with zero-padded numbers
   (0000, 0001, 0002, etc.). The printf format ``%04d`` specifies an
   integer in a field of width 4, padded with zeros from the left.
   A simple Unix wildcard file specification like ``tmp_vib*.png``
   will then list the frames in the right order. If the numbers in the
   filenames were not zero-padded, the frame ``tmp_vib11.png`` would appear
   before ``tmp_vib2.png`` in the movie.


Using a line-by-line ascii plotter
----------------------------------

Plotting functions vertically, line by line, in the terminal window
using ascii characters only is a simple, fast, and convenient
visualization technique for long time series (the time arrow points
downward). The tool
``scitools.avplotter.Plotter`` makes it easy to create such plots:


.. code-block:: python

        def visualize_front_ascii(u, t, I, w, fps=10):
            """
            Plot u and the exact solution vs t line by line in a
            terminal window (only using ascii characters).
            Makes it easy to plot very long time series.
            """
            from scitools.avplotter import Plotter
            import time
            P = 2*pi/w
            umin = 1.2*u.min();  umax = -umin
        
            p = Plotter(ymin=umin, ymax=umax, width=60, symbols='+o')
            for n in range(len(u)):
                print p.plot(t[n], u[n], I*cos(w*t[n])), \ 
                      '%.1f' % (t[n]/P)
                time.sleep(1/float(fps))

The call ``p.plot`` returns a line of text, with the :math:`t` axis marked and
a symbol ``+`` for the first function (``u``) and ``o`` for the second
function (the exact solution). Here we append this text
a time counter reflecting how many periods the current time point
corresponds to. A typical output (:math:`\omega =2\pi`, :math:`\Delta t=0.05`)
looks like this:


.. code-block:: python

                                      |                       o+      14.0
                                      |                      + o      14.0
                                      |                  +    o       14.1
                                      |             +     o           14.1
                                      |     +        o                14.2
                                     +|       o                       14.2
                             +        |                               14.2
                      +       o       |                               14.3
                 +     o              |                               14.4
              +   o                   |                               14.4
             +o                       |                               14.5
             o +                      |                               14.5
              o    +                  |                               14.6
                  o      +            |                               14.6
                       o        +     |                               14.7
                              o       | +                             14.7
                                      |        +                      14.8
                                      |       o       +               14.8
                                      |              o     +          14.9
                                      |                   o   +       14.9
                                      |                       o+      15.0



.. _vib:ode1:empirical:

Empirical analysis of the solution
----------------------------------

For oscillating functions like those in Figure :ref:`vib:ode1:2dt` we may
compute the amplitude and frequency (or period) empirically.
That is, we run through the discrete solution points :math:`(t_n, u_n)` and
find all maxima and minima points. The distance between two consecutive
maxima (or minima) points can be used as estimate of the local period,
while half the difference between the :math:`u` value at a maximum and a nearby
minimum gives an estimate of the local amplitude.

The local maxima are the points where

.. math::
        
        u^{n-1} < u^n > u^{n+1},\quad n=1,\ldots,N_t-1,
        

and the local minima are recognized by

.. math::
        
        u^{n-1} > u^n < u^{n+1},\quad n=1,\ldots,N_t-1
        \thinspace .
        

In computer code this becomes


.. code-block:: python

        def minmax(t, u):
            minima = []; maxima = []
            for n in range(1, len(u)-1, 1):
                if u[n-1] > u[n] < u[n+1]:
                    minima.append((t[n], u[n]))
                if u[n-1] < u[n] > u[n+1]:
                    maxima.append((t[n], u[n]))
            return minima, maxima

Note that the returned objects are list of tuples.

Let :math:`(t_i, e_i)`, :math:`i=0,\ldots,M-1`, be the sequence of all
the :math:`M` maxima points, where :math:`t_i`
is the time value and :math:`e_i` the corresponding :math:`u` value.
The local period can be defined as :math:`p_i=t_{i+1}-t_i`.
With Python syntax this reads


.. code-block:: python

        def periods(maxima):
            p = [extrema[n][0] - maxima[n-1][0]
                 for n in range(1, len(maxima))]
            return np.array(p)

The list ``p`` created by a list comprehension is converted to an array
since we probably want to compute with it, e.g., find the corresponding
frequencies ``2*pi/p``.

Having the minima and the maxima, the local amplitude can be
calculated as the difference between two neighboring minimum and
maximum points:


.. code-block:: python

        def amplitudes(minima, maxima):
            a = [(abs(maxima[n][1] - minima[n][1]))/2.0
                 for n in range(min(len(minima),len(maxima)))]
            return np.array(a)

The code segments are found in the file `vib_empirical_analysis.py <http://tinyurl.com/jvzzcfn/vib/vib_empirical_analysis.py>`_.

Visualization of the periods ``p`` or the amplitudes ``a``
it is most conveniently done with just a counter
on the horizontal axis, since ``a[i]`` and ``p[i]`` correspond to
the :math:`i`-th amplitude estimate and the :math:`i`-th period estimate, respectively.
There is no unique time point associated with either of these estimate
since values at two different time points were used in the
computations.

In the analysis of very long time series, it is advantageous to
compute and plot ``p`` and ``a`` instead of :math:`u` to get an impression of
the development of the oscillations.

.. Use it for very long time integration of CN! And of RK4!


.. _vib:ode1:analysis:

Analysis of the numerical scheme
================================

Deriving an exact numerical solution
------------------------------------

After having seen the phase error grow with time in the previous
section, we shall now quantify this error through mathematical analysis.  The
key tool in the analysis will be to establish an exact solution of the
discrete equations.  The difference equation :eq:`vib:ode1:step4`
has constant coefficients and is homogeneous. The solution is then of
the form :math:`u^n=A^n`, where :math:`A` is some number to be determined
(recall that :math:`n` in :math:`u^n` is a superscript labeling the time level,
while :math:`n` in :math:`A^n` is an exponent).
With oscillating functions as solutions, the algebra will be
considerably simplified if we write


.. math::
         A=Ie^{i\tilde\omega \Delta t},

and solve for the numerical frequency :math:`\tilde\omega` rather than
:math:`A`. Note that :math:`i=\sqrt{-1}` is the imaginary unit. (Using a
complex exponential function gives simpler arithmetics than working
with a sine or cosine function.)
We have


.. math::
        
        A^n = Ie^{i\tilde\omega \Delta t\, n}=Ie^{i\tilde\omega t} =
        I\cos (\tilde\omega t) + iI\sin(\tilde \omega t)
        \thinspace .
        

The physically relevant numerical solution can
be taken as the real part of this complex expression.

The calculations goes as

.. math::
        
        [D_tD_t u]^n &= \frac{u^{n+1} - 2u^n + u^{n-1}}{\Delta t^2}\\ 
        &= I\frac{A^{n+1} - 2A^n + A^{n-1}}{\Delta t^2}\\ 
        &= I\frac{\exp{(i\tilde\omega(t+\Delta t))} - 2\exp{(i\tilde\omega t)} + \exp{(i\tilde\omega(t-\Delta t))}}{\Delta t^2}\\ 
        &= I\exp{(i\tilde\omega t)}\frac{1}{\Delta t^2}\left(\exp{(i\tilde\omega(\Delta t))} + \exp{(i\tilde\omega(-\Delta t))} - 2\right)\\ 
        &= I\exp{(i\tilde\omega t)}\frac{2}{\Delta t^2}\left(\cosh(i\tilde\omega\Delta t) -1 \right)\\ 
        &= I\exp{(i\tilde\omega t)}\frac{2}{\Delta t^2}\left(\cos(\tilde\omega\Delta t) -1 \right)\\ 
        &= -I\exp{(i\tilde\omega t)}\frac{4}{\Delta t^2}\sin^2(\frac{\tilde\omega\Delta t}{2})
        

The last line follows from the relation
:math:`\cos x - 1 = -2\sin^2(x/2)` (try ``cos(x)-1`` in
`wolframalpha.com <http://www.wolframalpha.com>`_ to see the formula).

The scheme :eq:`vib:ode1:step4`
with :math:`u^n=Ie^{i\omega\tilde\Delta t\, n}` inserted now gives


.. math::
        
        -Ie^{i\tilde\omega t}\frac{4}{\Delta t^2}\sin^2(\frac{\tilde\omega\Delta t}{2})
        + \omega^2 Ie^{i\tilde\omega t} = 0,
        

which after dividing by :math:`Ie^{i\tilde\omega t}` results in

.. math::
        
        \frac{4}{\Delta t^2}\sin^2(\frac{\tilde\omega\Delta t}{2}) = \omega^2
        \thinspace .
        

The first step in solving for the unknown :math:`\tilde\omega` is

.. math::
         \sin^2(\frac{\tilde\omega\Delta t}{2}) = \left(\frac{\omega\Delta t}{2}\right)^2
        \thinspace .
        

Then, taking the square root, applying the inverse sine function, and
multiplying by :math:`2/\Delta t`, results in

.. math::
   :label: vib:ode1:tildeomega
        
        \tilde\omega = \pm \frac{2}{\Delta t}\sin^{-1}\left(\frac{\omega\Delta t}{2}\right)
        \thinspace .
        
        


The first observation of :eq:`vib:ode1:tildeomega` tells that
there is a phase error since the numerical frequency :math:`\tilde\omega`
never equals the exact frequency :math:`\omega`. But how good is
the approximation :eq:`vib:ode1:tildeomega`? That is, what
is the error :math:`\omega - \tilde\omega` or :math:`\tilde\omega/\omega`?
Taylor series expansion
for small :math:`\Delta t` may give an expression that is easier to understand
than the complicated function in :eq:`vib:ode1:tildeomega`:


        >>> from sympy import *
        >>> dt, w = symbols('dt w')
        >>> w_tilde = asin(w*dt/2).series(dt, 0, 4)*2/dt
        >>> print w_tilde
        (dt*w + dt**3*w**3/24 + O(dt**4))/dt

This means that

.. math::
   :label: vib:ode1:tildeomega:series
        
        \tilde\omega = \omega\left( 1 + \frac{1}{24}\omega^2\Delta t^2\right) + {\cal O}(\Delta t^3)
        \thinspace .
        
        

The error in the numerical frequency is of second-order in
:math:`\Delta t`, and the error vanishes as :math:`\Delta t\rightarrow 0`.
We see that :math:`\tilde\omega > \omega` since the term :math:`\omega^3\Delta t^2/24 >0`
and this is by far the biggest term in the series expansion for small
:math:`\omega\Delta t`. A numerical frequency that is too large gives an oscillating
curve that oscillates too fast and therefore "lags behind" the exact
oscillations, a feature that can be seen in the plots.

Figure :ref:`vib:ode1:tildeomega:plot` plots the discrete frequency
:eq:`vib:ode1:tildeomega`
and its approximation :eq:`vib:ode1:tildeomega:series` for :math:`\omega =1` (based
on the program `vib_plot_freq.py <http://tinyurl.com/jvzzcfn/vib/vib_plot_freq.py>`_).
Although :math:`\tilde\omega` is a function of :math:`\Delta t` in
:eq:`vib:ode1:tildeomega:series`,
it is misleading to think of :math:`\Delta t` as the important
discretization parameter. It is the product :math:`\omega\Delta t` that is
the key discretization parameter. This quantity reflects the
*number of time steps per period* of the oscillations.
To see this, we set :math:`P=N_P\Delta t`, where :math:`P` is the length of
a period, and :math:`N_P` is the number of time steps during a period.
Since :math:`P` and :math:`\omega` are related by :math:`P=2\pi/\omega`,
we get that :math:`\omega\Delta t = 2\pi/N_P`, which shows that
:math:`\omega\Delta t` is directly related to :math:`N_P`.

The plot shows
that at least :math:`N_P\sim 25-30` points per period are necessary for reasonable
accuracy, but this depends on the length of the simulation (:math:`T`) as
the total phase error due to the frequency error grows linearly with time
(see :ref:`vib:exer:phase:err:growth`).


.. _vib:ode1:tildeomega:plot:

.. figure:: discrete_freq.png
   :width: 400

   *Exact discrete frequency and its second-order series expansion*



Exact discrete solution
-----------------------

Perhaps more important than the :math:`\tilde\omega = \omega + {\cal O}(\Delta t^2)`
result found above is the fact that we have an exact discrete solution of
the problem:

.. math::
   :label: vib:ode1:un:exact
        
        u^n = I\cos\left(\tilde\omega n\Delta t\right),\quad
        \tilde\omega = \frac{2}{\Delta t}\sin^{-1}\left(\frac{\omega\Delta t}{2}\right)
        \thinspace .
        
        

Such an exact discrete solution is ideal for verification purposes
(and you are encouraged to make a test based on :eq:`vib:ode1:un:exact`
in :ref:`vib:exer:discrete:omega`).

Stability
---------

Looking at :eq:`vib:ode1:un:exact`, it appears that the numerical
solution has constant and correct amplitude, but an error in the
frequency (phase error). However, there is another error that
is more serious, namely an unstable growing amplitude that can
occur of :math:`\Delta t` is too large.

We realize that
a constant amplitude demands
:math:`\tilde\omega` to be a real number. A complex :math:`\tilde\omega` is
indeed possible if the argument :math:`x` of :math:`\sin^{-1}(x)` has magnitude
larger than unity: :math:`|x|>1` (type ``asin(x)`` in `wolframalpha.com <http://www.wolframalpha.com>`_ to see basic properties of :math:`\sin^{-1} (x)`).
A complex :math:`\tilde\omega` can be written :math:`\tilde\omega = \tilde\omega_r +
i\tilde\omega_i`. Since :math:`\sin^{-1}(x)` has a *negative* imaginary part for
:math:`x>1`, :math:`\tilde\omega_i < 0`, it means that
:math:`\exp{(i\omega\tilde t)}=\exp{(-\tilde\omega_i t)}\exp{(i\tilde\omega_r t)}`
will lead to exponential growth in time because
:math:`\exp{(-\tilde\omega_i t)}` with :math:`\tilde\omega_i <0` has a positive
exponent.


.. index:: stability criterion


We do not tolerate growth in the amplitude and we therefore
have a *stability criterion* arising from requiring the argument
:math:`\omega\Delta t/2` in the inverse sine function to be less than
one:

.. math::
        
        \frac{\omega\Delta t}{2} \leq 1\quad\Rightarrow\quad
        \Delta t \leq \frac{2}{\omega}
        \thinspace .
        

With :math:`\omega =2\pi`, :math:`\Delta t > \pi^{-1} = 0.3183098861837907` will give
growing solutions. Figure :ref:`vib:ode1:dt:unstable`
displays what happens when :math:`\Delta t =0.3184`,
which is slightly above the critical value: :math:`\Delta t =\pi^{-1} + 9.01\cdot
10^{-5}`.


.. _vib:ode1:dt:unstable:

.. figure:: vib_unstable.png
   :width: 400

   *Growing, unstable solution because of a time step slightly beyond the stability limit*




.. admonition:: Summary

   From the analysis we can draw three important conclusions:
   
   1. The key parameter in the formulas is :math:`p=\omega\Delta t`.
      The period of oscillations is :math:`P=2\pi/\omega`, and the
      number of time steps per period is :math:`N_P=P/\Delta t`.
      Therefore, :math:`p=\omega\Delta t = 2\pi N_P`, showing that the
      critical parameter is the number of time steps per period.
      The smallest possible :math:`N_P` is 2, showing that :math:`p\in (0,\pi]`.
   
   2. Provided :math:`p\leq 2`, the amplitude of the numerical solution is
      constant.
   
   3. The numerical solution exhibits a relative phase error
      :math:`\tilde\omega/\omega \approx 1 + \frac{1}{24}p^2`.
      This error leads to wrongly displaced peaks of the numerical
      solution, and the error in peak location grows linearly with time
      (see :ref:`vib:exer:phase:err:growth`).


.. _vib:model2x2:

Alternative schemes based on 1st-order equations
================================================

A standard technique for solving second-order ODEs is
to rewrite them as a system of first-order ODEs and then apply the
vast collection of methods for first-order ODE systems.
Given the second-order ODE problem

.. math::
         u'' + \omega^2 u = 0,\quad u(0)=I,\ u'(0)=0,

we introduce the auxiliary variable :math:`v=u'` and express the ODE problem
in terms of first-order derivatives of :math:`u` and :math:`v`:


.. math::
   :label: vib:model2x2:ueq
        
        u' = v,
        
        



.. math::
   :label: vib:model2x2:veq
          
        v' = -\omega^2 u
        
        \thinspace .
        

The initial conditions become :math:`u(0)=I` and :math:`v(0)=0`.

.. _vib:undamped:1stODE:

Standard methods for 1st-order ODE systems
------------------------------------------

The Forward Euler scheme
~~~~~~~~~~~~~~~~~~~~~~~~

A Forward Euler approximation to our :math:`2\times 2` system of ODEs
:eq:`vib:model2x2:ueq`-:eq:`vib:model2x2:veq`
becomes


.. math::
        
        \lbrack D_t^+ u = v\rbrack^n,
        \lbrack D_t^+ v = -\omega^2 u\rbrack^n,
        

or written out,


.. math::
   :label: vib:undamped:FE1
        
        u^{n+1} = u^n + \Delta t v^n,
        
        



.. math::
   :label: vib:undamped:FE2
          
        v^{n+1} = v^n -\Delta t \omega^2 u^n
        
        \thinspace .
        


Let us briefly compare this Forward Euler method with the
centered difference scheme for the second-order differential
equation. We have from :eq:`vib:undamped:FE1` and
:eq:`vib:undamped:FE2` applied at levels :math:`n` and :math:`n-1` that


.. math::
         u^{n+1} = u^n + \Delta t v^n = u^n + \Delta t (v^{n-1} -\Delta t \omega^2 u^{n-1}{\thinspace .}

Since from :eq:`vib:undamped:FE1`

.. math::
         v^{n-1} = \frac{1}{\Delta t}(u^{n}-u^{n-1}),

it follows that


.. math::
         u^{n+1} = 2u^n - u^{n-1} -\Delta t^2\omega^2 u^{n-1},

which is very close to the centered difference scheme, but
the last term is evaluated at :math:`t_{n-1}` instead of :math:`t_n`.
This difference is actually crucial for the accuracy of
the Forward Euler method applied to vibration problems.

The Backward Euler scheme
~~~~~~~~~~~~~~~~~~~~~~~~~

A Backward Euler approximation the ODE system is equally easy to
write up in the operator notation:


.. math::
        
        \lbrack D_t^- u = v\rbrack^{n+1},
        



.. math::
          
        \lbrack D_t^- v = -\omega u\rbrack^{n+1} \thinspace .
        

This becomes a coupled system for :math:`u^{n+1}` and :math:`v^{n+1}`:


.. math::
        
        u^{n+1} - \Delta t v^{n+1} = u^{n},
        



.. math::
          
        v^{n+1} + \Delta t \omega^2 u^{n+1} = v^{n}
        \thinspace .
        


The Crank-Nicolson scheme
~~~~~~~~~~~~~~~~~~~~~~~~~

The Crank-Nicolson scheme takes this form in the operator notation:


.. math::
        
        \lbrack D_t u = \overline{v}^t\rbrack^{n+\frac{1}{2}},
        



.. math::
          
        \lbrack D_t v = -\omega \overline{u}^t\rbrack^{n+\frac{1}{2}}
        \thinspace .
        

Writing the equations out shows that is also a coupled system:


.. math::
        
        u^{n+1} - \frac{1}{2}\Delta t v^{n+1} = u^{n} + \frac{1}{2}\Delta t v^{n},
        



.. math::
          
        v^{n+1} + \frac{1}{2}\Delta t \omega^2 u^{n+1} = v^{n}
        - \frac{1}{2}\Delta t \omega^2 u^{n}
        \thinspace .
        


Comparison of schemes
~~~~~~~~~~~~~~~~~~~~~

We can easily compare methods like the ones above (and many more!)
with the aid of the
`Odespy <https://github.com/hplgit/odespy>`_ package. Below is
a possible program for doing that.


.. code-block:: python

        import odespy
        import numpy as np
        
        def f(u, t, w=1):
            # u is array of length 2 holding our [u, v]
            u, v = u
            return [v, -w**2*u]
        
        def run_solvers_and_plot(solvers, timesteps_per_period=20,
                                 num_periods=1, I=1, w=2*np.pi):
            P = 2*np.pi/w  # one period
            dt = P/timesteps_per_period
            Nt = num_periods*timesteps_per_period
            T = Nt*dt
            t_mesh = np.linspace(0, T, Nt+1)
        
            legends = []
            for solver in solvers:
                solver.set(f_kwargs={'w': w})
                solver.set_initial_condition([I, 0])
                u, t = solver.solve(t_mesh)

There is quite some more code dealing with plots also, and we refer
to the source file `vib_odespy.py <http://tinyurl.com/jvzzcfn/vib/vib_odespy.py>`_
for details. Observe that keyword arguments in ``f(u,t,w=1)`` can
be supplied through a solver parameter ``f_kwargs`` (dictionary).

Specification of the Forward Euler, Backward Euler, and
Crank-Nicolson schemes is done like this:


.. code-block:: python

        solvers = [
            odespy.ForwardEuler(f),
            # Implicit methods must use Newton solver to converge
            odespy.BackwardEuler(f, nonlinear_solver='Newton'),
            odespy.CrankNicolson(f, nonlinear_solver='Newton'),
            ]


The `vib_odespy.py <http://tinyurl.com/jvzzcfn/vib/vib_odespy.py>`_
program makes two plots of the computed solutions with the various
methods in the ``solvers`` list: one plot with :math:`u(t)` versus :math:`t`, and
one *phase plane plot* where :math:`v` is plotted against :math:`u`.
That is, the phase plane plot is the curve :math:`(u(t),v(t))` parameterized
by :math:`t`. Analytically, :math:`u=I\cos(\omega t)` and :math:`v=u'=-\omega I\sin(\omega t)`.
The exact curve :math:`(u(t),v(t))` is therefore an ellipse, which often
looks like a circle in a plot if the axes are automatically scaled. The
important feature, however, is that exact curve :math:`(u(t),v(t))` is
closed and repeats itself for every period. Not all numerical schemes
are capable to do that, meaning that the amplitude instead shrinks or
grows with time.

The Forward Euler scheme in Figure
:ref:`vib:ode1:1st:odespy:theta:phaseplane` has a pronounced spiral
curve, pointing to the fact that the amplitude steadily grows, which
is also evident in Figure :ref:`vib:ode1:1st:odespy:theta`.
The Backward Euler scheme has a similar feature, except that the
spriral goes inward and the amplitude is significantly damped.  The
changing amplitude and the sprial form decreases with decreasing time
step.  The Crank-Nicolson scheme looks much more
accurate.  In fact, these plots tell that the Forward and Backward
Euler schemes are not suitable for solving our ODEs with oscillating
solutions.


.. _vib:ode1:1st:odespy:theta:phaseplane:

.. figure:: vib_theta_1_pp.png
   :width: 600

   *Comparison of classical schemes in the phase plane*



.. _vib:ode1:1st:odespy:theta:

.. figure:: vib_theta_1_u.png
   :width: 600

   *Comparison of classical schemes*


We may run two popular standard methods for first-order ODEs, the 2nd-
and 4th-order Runge-Kutta methods, to see how they perform. Figures
:ref:`vib:ode1:1st:odespy:RK:phaseplane` and
:ref:`vib:ode1:1st:odespy:RK` show the solutions with larger :math:`\Delta
t` values than what was used in the previous two plots.


.. _vib:ode1:1st:odespy:RK:phaseplane:

.. figure:: vib_RK_1_pp.png
   :width: 600

   *Comparison of Runge-Kutta schemes in the phase plane*



.. _vib:ode1:1st:odespy:RK:

.. figure:: vib_RK_1_u.png
   :width: 600

   *Comparison of Runge-Kutta schemes*



The visual impression is that the
4th-order Runge-Kutta method is very accurate, under all circumstances
in these tests, and the 2nd-order scheme suffer from amplitude errors
unless the time step is very small.


The corresponding results for the Crank-Nicolson scheme
are shown in Figures :ref:`vib:ode1:1st:odespy:CN:long:phaseplane` and
:ref:`vib:ode1:1st:odespy:CN:long`. It is clear that the Crank-Nicolson
scheme outperforms
the 2nd-order Runge-Kutta method. Both schemes have the same order
of accuracy :math:`{{\cal O}(\Delta t^2)}`, but their differences in the accuracy
that matters in
a real physical application is very clearly pronounced in this example.
:ref:`vib:exer:undamped:odespy` invites you to investigate
how


.. _vib:ode1:1st:odespy:CN:long:phaseplane:

.. figure:: vib_CN_10_pp.png
   :width: 600

   *Long-time behavior of the Crank-Nicolson scheme in the phase plane*



.. _vib:ode1:1st:odespy:CN:long:

.. figure:: vib_CN_10_u.png
   :width: 600

   *Long-time behavior of the Crank-Nicolson scheme*



.. _vib:model2x2:EulerCromer:

The Euler-Cromer method
-----------------------

While the 4th-order Runge-Kutta method and the a centered Crank-Nicolson scheme
work well for the first-order formulation of the vibration model, both
were inferior to the straightforward centered difference
scheme for the second-order
equation :math:`u''+\omega^2u=0`. However, there is a similarly successful
scheme available for the first-order system :math:`u'=v`, :math:`v'=-\omega^2u`,
to be presented next.


.. index:: forward-backward Euler-Cromer scheme


Forward-backward discretization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The idea is to apply a Forward Euler discretization to the first
equation and a Backward Euler discretization to the second. In operator
notation this is stated as


.. math::
        
        \lbrack D_t^+u = v\rbrack^n,
        



.. math::
          
        \lbrack D_t^-v = -\omega u\rbrack^{n+1}
        \thinspace .
        

We can write out the formulas and collect the unknowns on the left-hand side:

.. math::
   :label: vib:model2x2:EulerCromer:ueq1
        
        u^{n+1} = u^n + \Delta t v^n,
        
        



.. math::
   :label: vib:model2x2:EulerCromer:veq1
          
        v^{n+1} = v^n -\Delta t \omega^2u^{n+1}
        
        \thinspace .
        

We realize that :math:`u^{n+1}` can be computed from
:eq:`vib:model2x2:EulerCromer:ueq1` and then :math:`v^{n+1}` from
:eq:`vib:model2x2:EulerCromer:veq1` using the recently computed value
:math:`u^{n+1}` on the right-hand side.

.. Despite using a backward difference, there is no need to solve a coupled

.. system for :math:`u^{n+1}` and :math:`v^{n+1}` because the structure of the ODEs

.. allows :eq:`vib:model2x2:EulerCromer:ueq1`


The scheme
:eq:`vib:model2x2:EulerCromer:ueq1`-:eq:`vib:model2x2:EulerCromer:veq1`
goes under several names: Forward-backward scheme, `Semi-implicit Euler method <http://en.wikipedia.org/wiki/Semi-implicit_Euler_method>`_, symplectic
Euler, semi-explicit Euler,
Newton-Stormer-Verlet,
and Euler-Cromer.
We shall stick to the latter name.
Since both time discretizations are based on first-order difference
approximation, one may think that the scheme is only of first-order,
but this is not true: the use of a forward and then a backward
difference make errors cancel so that the overall error in the scheme
is :math:`{{\cal O}(\Delta t^2)}`. This is explaned below.

Equivalence with the scheme for the second-order ODE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We may eliminate the :math:`v^n` variable from
:eq:`vib:model2x2:EulerCromer:ueq1`-:eq:`vib:model2x2:EulerCromer:veq1`.
From :eq:`vib:model2x2:EulerCromer:veq1` we have
:math:`v^n = v^{n-1} - \Delta t \omega^2u^{n}`, which can be inserted
in :eq:`vib:model2x2:EulerCromer:ueq1` to yield

.. math::
   :label: vib:model2x2:EulerCromer:elim1
        
        u^{n+1} = u^n + \Delta t v^{n-1} - \Delta t^2 \omega^2u^{n} .
        
        

The :math:`v^{n-1}` quantity can be expressed by :math:`u^n` and :math:`u^{n-1}`
using :eq:`vib:model2x2:EulerCromer:ueq1`:

.. math::
         v^{n-1} = \frac{u^n - u^{n-1}}{\Delta t},
        

and when this is inserted in :eq:`vib:model2x2:EulerCromer:elim1` we get

.. math::
        
        u^{n+1} = 2u^n - u^{n-1} - \Delta t^2 \omega^2u^{n},
        

which is nothing but the centered scheme :eq:`vib:ode1:step4`!
The previous analysis of this scheme then also applies to the Euler-Cromer
method. That is, the amplitude is constant, given that the stability
criterion is fulfilled, but there is always a phase error
:eq:`vib:ode1:tildeomega:series`.

The initial condition :math:`u'=0` means :math:`u'=v=0`. Then :math:`v^0=0`, and
:eq:`vib:model2x2:EulerCromer:ueq1` implies :math:`u^1=u^0`, while
:eq:`vib:model2x2:EulerCromer:veq1` says :math:`v^1=-\omega^2 u^0`.
This approximation, :math:`u^1=u^0`,
corresponds to a first-order Forward Euler discretization
of the initial condition :math:`u'(0)=0`: :math:`[D_t^+ u = 0]^0`.
Therefore, the Euler-Cromer scheme will start out differently
and not exactly reproduce the solution of :eq:`vib:ode1:step4`.

.. _vib:model2x2:staggered:

A method utilizing a staggered mesh
-----------------------------------


.. index:: staggered mesh


.. index:: staggered Euler-Cromer scheme


The Forward and Backward Euler schemes used in the Euler-Cromer
method are both unsymmetric, but their combination yields a
symmetric method. This symmetry is much more evident if we
introduce a *staggered mesh* in time where :math:`u` is sought at
integer time points :math:`t_n` and :math:`v` is sought at :math:`t_{n+1/2}`
between two :math:`u` points.
The unknowns are then :math:`u^1, v^{3/2}, u^2, v^{5/2}`, and so on.

We can now easily use centered difference approximations, expressed
in operator notation as

.. math::
        
        \lbrack D_t u = v\rbrack^{n+\frac{1}{2}},
        



.. math::
          
        \lbrack D_t v = -\omega u\rbrack^{n+1}
        \thinspace .
        

Writing out the formulas gives


.. math::
   :label: vib:model2x2:EulerCromer:ueq1s
        
        u^{n+1} = u^{n} + \Delta t v^{n+\frac{1}{2}},
        
        



.. math::
   :label: vib:model2x2:EulerCromer:veq1s
          
        v^{n+\frac{3}{2}} = v^{n+\frac{1}{2}} -\Delta t \omega^2u^{n+1}
        
        \thinspace .
        

Of esthetic reasons one often writes these equations at the
previous time level to replace the :math:`\frac{3}{2}` by :math:`\frac{1}{2}` in the
left-most term in the last equation,


.. math::
   :label: vib:model2x2:EulerCromer:ueq1s2
        
        u^{n} = u^{n-1} + \Delta t v^{n-\frac{1}{2}},
        
        



.. math::
   :label: vib:model2x2:EulerCromer:veq1s2
          
        v^{n+\frac{1}{2}} = v^{n-\frac{1}{2}} -\Delta t \omega^2u^{n}
        
        \thinspace .
        

Such a rewrite is only mathematical cosmetics. The important thing
is that this centered scheme has exactly the same computational
structure as the forward-backward scheme. We shall use the names
*forward-backward Euler-Cromer* and *staggered Euler-Cromer*
to distinguish the two schemes.

We can eliminate the :math:`v`
values and get back the centered scheme based on the second-order
differential equation, so all these three schemes are equivalent.
However, they differ somewhat in the treatment of the initial
conditions.

Suppose we have :math:`u(0)=I` and :math:`u'(0)=v(0)=0` as mathematical
initial conditions. This means :math:`u^0=I` and


.. math::
         v(0)\approx \frac{1}{2}(v^{-\frac{1}{2}} + v^{\frac{1}{2}}) = 0,
        \quad\Rightarrow\quad v^{-\frac{1}{2}} =- v^{\frac{1}{2}}{\thinspace .}

Using the discretized equation :eq:`vib:model2x2:EulerCromer:veq1s2` for
:math:`n=0` yields


.. math::
         v^{\frac{1}{2}} = v^{-\frac{1}{2}} -\Delta t\omega^2 I,

and eliminating :math:`v^{-\frac{1}{2}} =- v^{\frac{1}{2}}`
results in :math:`v^{\frac{1}{2}} = -\frac{1}{2}\Delta t\omega^2I` and


.. math::
         u^1 = u^0 - \frac{1}{2}\Delta t^2\omega^2 I,

which is exactly the same equation for :math:`u^1` as we had in the
centered scheme based on the second-order differential equation
(and hence corresponds to a centered difference approximation of
the initial condition for :math:`u'(0)`).
The conclusion is that a staggered mesh is fully equivalent with
that scheme, while the forward-backward version gives a slight
deviation in the computation of :math:`u^1`.

We realize that :math:`u^{n+1}` can be computed from
:eq:`vib:model2x2:EulerCromer:ueq1` and then :math:`v^{n+1}` from
:eq:`vib:model2x2:EulerCromer:veq1` using the recently computed value
:math:`u^{n+1}` on the right-hand side.

.. implement the staggered scheme


.. make exercises:

.. investigate how important the u^1 wrong formula really is on

.. convergence rate


.. new file: genealizations, systems,

.. new file: apps


.. exercise: damping analysis, see geophysics book first...


.. _vib:model2:

Generalization: damping, nonlinear spring, and external excitation
==================================================================


.. index:: nonlinear restoring force


.. index:: nonlinear spring


.. index:: forced vibrations


We shall now generalize the simple model problem from
the section :ref:`vib:model1` to include a possibly nonlinear damping term :math:`f(u')`,
a possibly nonlinear spring (or restoring) force :math:`s(u)`, and
some external excitation :math:`F(t)`:


.. math::
   :label: vib:ode2
        
        mu'' + f(u') + s(u) = F(t),\quad u(0)=I,\ u'(0)=V,\ t\in (0,T]
        \thinspace .
        
        

We have also included a possibly nonzero initial value of :math:`u'(0)`.
The parameters :math:`m`, :math:`f(u')`, :math:`s(u)`, :math:`F(t)`, :math:`I`, :math:`V`, and :math:`T` are
input data.

There are two main types of damping (friction) forces: linear :math:`f(u')=bu`, or
quadratic :math:`f(u')=bu'|u'|`. Spring systems often feature linear
damping, while air resistance usually gives rise to quadratic damping.
Spring forces are often linear: :math:`s(u)=cu`, but nonlinear versions
are also common, the most famous is the gravity force on a pendulum
that acts as a spring with :math:`s(u)\sim \sin(u)`.


.. _vib:ode2:fdm:flin:

A centered scheme for linear damping
------------------------------------

Sampling :eq:`vib:ode2` at a mesh point :math:`t_n`, replacing
:math:`u''(t_n)` by :math:`[D_tD_tu]^n`, and :math:`u'(t_n)` by :math:`[D_{2t}u]^n` results
in the discretization


.. math::
        
        [mD_tD_t u + f(D_{2t}u) + s(u) = F]^n,
        

which written out means


.. math::
   :label: vib:ode2:step3b
        
        m\frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
        + f(\frac{u^{n+1}-u^{n-1}}{2\Delta t}) + s(u^n) = F^n,
        
        

where :math:`F^n` as usual means :math:`F(t)` evaluated at :math:`t=t_n`.
Solving :eq:`vib:ode2:step3b` with respect to the unknown
:math:`u^{n+1}` gives a problem: the :math:`u^{n+1}` inside the :math:`f` function
makes the equation *nonlinear* unless :math:`f(u')` is a linear function,
:math:`f(u')=bu'`. For now we shall assume that :math:`f` is linear in :math:`u'`.
Then


.. math::
   :label: vib:ode2:step3b2
        
        m\frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
        + b\frac{u^{n+1}-u^{n-1}}{2\Delta t} + s(u^n) = F^n,
        
        

which gives an explicit formula for :math:`u` at each
new time level:


.. math::
   :label: vib:ode2:step4
        
        u^{n+1} = \left(2mu^n + (\frac{b}{2}\Delta t - m)u^{n-1} +
        \Delta t^2(F^n - s(u^n))
        \right)(m + \frac{b}{2}\Delta t)^{-1}
        
        \thinspace .
        


For the first time step we need to discretize :math:`u'(0)=V`
as :math:`[D_{2t}u = V]^0` and combine
with :eq:`vib:ode2:step4` for :math:`n=0`. The discretized initial condition
leads to


.. math::
   :label: vib:ode2:ic:du
        
        u^{-1} = u^{1} - 2\Delta t V,
        
        

which inserted in :eq:`vib:ode2:step4` for :math:`n=0` gives an equation
that can be solved for
:math:`u^1`:


.. math::
   :label: vib:ode2:step4b
        
        u^1 = u^0 + \Delta t\, V
        + \frac{\Delta t^2}{2m}(-bV - s(u^0) + F^0)
        \thinspace .
        
        


.. _vib:ode2:fdm:fquad:

A centered scheme for quadratic damping
---------------------------------------

When :math:`f(u')=bu'|u'|`, we get a quadratic equation for :math:`u^{n+1}`
in :eq:`vib:ode2:step3b`. This equation can straightforwardly
be solved, but we can also avoid the nonlinearity by
performing an approximation that is within
other numerical errors that we have already committed by replacing
derivatives with finite differences.


.. index:: geometric mean


The idea is to reconsider :eq:`vib:ode2` and only replace
:math:`u''` by :math:`D_tD_tu`, giving


.. math::
   :label: vib:ode2:quad:idea1
        
        [mD_tD_t u + bu'|u'| + s(u) = F]^n,
        
        

Here, :math:`u'|u'|` is to be computed at time :math:`t_n`. We can introduce
a *geometric mean*, defined by


.. math::
         w^n \approx w^{n-1/2}w^{n+1/2},

for some quantity :math:`w` depending on time. The error in the geometric mean
approximation is :math:`{{\cal O}(\Delta t^2)}`, the same as in the
approximation :math:`u''\approx D_tD_tu`. With :math:`w=u'` it follows
that


.. math::
         [u'|u'|]^n \approx u'(t_n+\frac{1}{2})|u'(t_n-\frac{1}{2})|{\thinspace .}

The next step is to approximate
:math:`u'` at :math:`t_{n\pm 1/2}`, but here a centered difference can be used:



.. math::
   :label: vib:ode2:quad:idea2
        
        u'(t_{n+1/2})\approx [D_t u]^{n+1/2},\quad u'(t_{n-1/2})\approx [D_t u]^{n-1/2}
        \thinspace .
        
        

We then get


.. math::
        
        [u'|u'|]^n
        \approx [D_tu]^{n+1/2}[|D_tu|]^{n-1/2} = \frac{u^{n+1}-u^n}{\Delta t}
        \frac{|u^n-u^{n-1}|}{\Delta t}
        \thinspace .
        

The counterpart to :eq:`vib:ode2:step3b` is then


.. math::
   :label: vib:ode2:step3b:quad
        
        m\frac{u^{n+1}-2u^n + u^{n-1}}{\Delta t^2}
        + b\frac{u^{n+1}-u^n}{\Delta t}\frac{|u^n-u^{n-1}|}{\Delta t}
        + s(u^n) = F^n,
        
        

which is linear in :math:`u^{n+1}`. Therefore, we can easily solve
with respect to :math:`u^{n+1}` and achieve
the explicit updating formula


.. math::
        
        u^{n+1} =  \left( m + b|u^n-u^{n-1}|\right)^{-1}\times \nonumber
        



.. math::
   :label: vib:ode2:step4:quad
          
         \qquad \left(2m u^n - mu^{n-1} + bu^n|u^n-u^{n-1}| + \Delta t^2 (F^n - s(u^n))
        \right)
        \thinspace .
        
        


.. Make exercise to solve complicated u^1 equation with Bisection/Newton


For :math:`n=0` we run into some trouble: inserting :eq:`vib:ode2:ic:du`
in :eq:`vib:ode2:step4:quad` results in a complicated nonlinear
equation for :math:`u^1`. By thinking differently about the problem we can
get away with the nonlinearity (again). We have for :math:`n=0` that
:math:`b[u'|u'|]^0 = bV|V|`. Using this value in :eq:`vib:ode2:quad:idea1`
gives


.. math::
        
        [mD_tD_t u + bV|V| + s(u) = F]^0
        \thinspace .
        

Writing this equation out and using :eq:`vib:ode2:ic:du` gives


.. math::
   :label: vib:ode2:step4b:quad
        
        u^1 = u^0 + \Delta t V + \frac{\Delta t^2}{2m}\left(-bV|V| - s(u^0) + F^0\right)
        \thinspace .
        
        



.. _vib:ode2:solver:

Implementation  (2)
===================

Algorithm and solver function
-----------------------------

The algorithm is very similar to the undamped case. The difference is
basically a question of different formulas for :math:`u^1` and
:math:`u^{n+1}`. This is actually quite remarkable. The equation
:eq:`vib:ode2` is normally impossible to solve by pen and paper, but
possible for some special choices of :math:`F`, :math:`s`, and :math:`f`. On the
contrary, the nonlinear generalized model :eq:`vib:ode2` versus the
simple undamped model does not make much sense when we solve the
problem numerically!

The computational algorithm is a slight variation of the one
in the section :ref:`vib:ode1:fdm`:

 1. :math:`u^0=I`

 2. compute :math:`u^1` from :eq:`vib:ode2:step4b` if linear
    damping or :eq:`vib:ode2:step4b:quad` if quadratic damping

 3. for :math:`n=1,2,\ldots,N_t-1`:

   1. compute :math:`u^{n+1}` from ({vib:ode2:step4}) if linear
      damping or :eq:`vib:ode2:step4:quad` if quadratic damping


Modifying the ``solver`` function for the undamped case is fairly
easy, the big difference being many more terms and if tests on
the type of damping:


.. code-block:: python

        def solver(I, V, m, b, s, F, dt, T, damping='linear'):
            """
            Solve m*u'' + f(u') + s(u) = F(t) for t in (0,T],
            u(0)=I and u'(0)=V,
            by a central finite difference method with time step dt.
            If damping is 'linear', f(u')=b*u, while if damping is
            'quadratic', f(u')=b*u'*abs(u').
            F(t) and s(u) are Python functions.
            """
            dt = float(dt); b = float(b); m = float(m) # avoid integer div.
            Nt = int(round(T/dt))
            u = zeros(Nt+1)
            t = linspace(0, Nt*dt, Nt+1)
        
            u[0] = I
            if damping == 'linear':
                u[1] = u[0] + dt*V + dt**2/(2*m)*(-b*V - s(u[0]) + F(t[0]))
            elif damping == 'quadratic':
                u[1] = u[0] + dt*V + \ 
                       dt**2/(2*m)*(-b*V*abs(V) - s(u[0]) + F(t[0]))
        
            for n in range(1, Nt):
                if damping == 'linear':
                    u[n+1] = (2*m*u[n] + (b*dt/2 - m)*u[n-1] +
                              dt**2*(F(t[n]) - s(u[n])))/(m + b*dt/2)
                elif damping == 'quadratic':
                    u[n+1] = (2*m*u[n] - m*u[n-1] + b*u[n]*abs(u[n] - u[n-1])
                              + dt**2*(F(t[n]) - s(u[n])))/\ 
                              (m + b*abs(u[n] - u[n-1]))
            return u, t


.. _vib:ode2:verify:

Verification  (2)
-----------------

 * Exact linear solution of the discrete equations with linear :math:`s`

 * MMS
.. More: classes, cases with pendulum approx u vs sin(u),

.. making UI via parampool


.. _vib:ode2:viz:

Visualization
-------------

The functions for visualizations differ significantly from
those in the undamped case in the ``vib_undamped.py`` program because
we in the present general case do not have an exact solution to
include in the plots. Moreover, we have no good estimate of
the periods of the oscillations as there will be one period
determined by the system parameters, essentially the
approximate frequency :math:`\sqrt{s'(0)/m}` for linear :math:`s` and small damping,
and one period dictated by :math:`F(t)` in case the excitation is periodic.
This is, however,
nothing that the program can depend on or make use of.
Therefore, the user has to specify :math:`T` and the window width
in case of a plot that moves with the graph and shows
the most recent parts of it in long time simulations.

The `vib.py <http://tinyurl.com/jvzzcfn/vib/vib.py>`_ code
contains several functions for analyzing the time series signal
and for visualizing the solutions.

.. _vib:ode2:ui:

User interface
--------------


.. index:: ArgumentParser (Python class)


.. index:: argparse (Python module)


The ``main`` function has substantial changes from
the ``vib_undamped.py`` code since we need to
specify the new data :math:`c`, :math:`s(u)`, and :math:`F(t)`.  In addition, we must
set :math:`T` and the plot window width (instead of the number of periods we
want to simulate as in ``vib_undamped.py``). To figure out whether we
can use one plot for the whole time series or if we should follow the
most recent part of :math:`u`, we can use the ``plot_empricial_freq_and_amplitude``
function's estimate of the number of local maxima. This number is now
returned from the function and used in ``main`` to decide on the
visualization technique.


.. code-block:: python

        def main():
            import argparse
            parser = argparse.ArgumentParser()
            parser.add_argument('--I', type=float, default=1.0)
            parser.add_argument('--V', type=float, default=0.0)
            parser.add_argument('--m', type=float, default=1.0)
            parser.add_argument('--c', type=float, default=0.0)
            parser.add_argument('--s', type=str, default='u')
            parser.add_argument('--F', type=str, default='0')
            parser.add_argument('--dt', type=float, default=0.05)
            parser.add_argument('--T', type=float, default=140)
            parser.add_argument('--damping', type=str, default='linear')
            parser.add_argument('--window_width', type=float, default=30)
            parser.add_argument('--savefig', action='store_true')
            a = parser.parse_args()
            from scitools.std import StringFunction
            s = StringFunction(a.s, independent_variable='u')
            F = StringFunction(a.F, independent_variable='t')
            I, V, m, c, dt, T, window_width, savefig, damping = \ 
               a.I, a.V, a.m, a.c, a.dt, a.T, a.window_width, a.savefig, \ 
               a.damping
        
            u, t = solver(I, V, m, c, s, F, dt, T)
            num_periods = empirical_freq_and_amplitude(u, t)
            if num_periods <= 15:
                figure()
                visualize(u, t)
            else:
                visualize_front(u, t, window_width, savefig)
            show()

The program ``vib.py`` contains
the above code snippets and can solve the model problem
:eq:`vib:ode2`. As a demo of ``vib.py``, we consider the case
:math:`I=1`, :math:`V=0`, :math:`m=1`, :math:`c=0.03`, :math:`s(u)=\sin(u)`, :math:`F(t)=3\cos(4t)`,
:math:`\Delta t = 0.05`, and :math:`T=140`. The relevant command to run is


.. code-block:: console

        Terminal> python vib.py --s 'sin(u)' --F '3*cos(4*t)' --c 0.03

This results in a `moving window following the function <http://tinyurl.com/k3sdbuv/pub/mov-vib/vib_generalized_dt0.05/index.html>`_ on the screen.
Figure :ref:`vib:ode2:fig:demo` shows a part of the time series.


.. _vib:ode2:fig:demo:

.. figure:: vib_gen_demo.png
   :width: 600

   *Damped oscillator excited by a sinusoidal function*


.. More: staggered mesh and 1st order eqs for nonlinear problem


Exercises
=========



.. --- begin exercise ---


.. _vib:exer:undamped:verify:linear:

Exercise 1: Use a linear function for verification
--------------------------------------------------

Add a source term to the ODE problem :eq:`vib:ode1`,
:math:`u'+\omega^2u=f(t)`, and a more general initial condition :math:`u'(0)=V`,
where :math:`V` is a given constant.  Discretize this equation according to
:math:`[D_tD_t u + \omega^2 u = f]^n_i` and derive a new equation for the
first time step (:math:`u^1`).  Let :math:`u_{\small\mbox{e}}(x,t)= ct+I` and show that this is
a solution of the ODE if :math:`f(x,t)=\omega^2(ct+I)` and :math:`V=c`.  Show that
:math:`[D_tD_t t]^n_i=0` and therefore that :math:`u_{\small\mbox{e}}` *also* solves the
discrete equations. Implement the modified problem and make a nose
test with the linear :math:`u_{\small\mbox{e}}` to verify the solution.
Filename: ``vib_undamped_verify_linear.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:undamped:verify:quadratic:

Exercise 2: Use a quadratic function for verification
-----------------------------------------------------

This is a variation of :ref:`vib:exer:undamped:verify:linear`
where we test a quadratic function rather than a linear.
Let :math:`u_{\small\mbox{e}}(x,t)= at^2 + ct+I`, find the corresponding :math:`f` term,
and show that :math:`u_{\small\mbox{e}}` fulfills all discrete equations.
You will need to show that :math:`[D_tD_t t^2]^n = 2`.
Filename: ``vib_undamped_verify_quadratic.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:phase:err:growth:

Exercise 3: Show linear growth of the phase with time
-----------------------------------------------------

Consider an exact solution :math:`I\cos (\omega t)` and an
approximation :math:`I\cos(\tilde\omega t)`.
Define the phase error as time lag between the peak :math:`I`
in the exact solution and the corresponding peak in the approximation
after :math:`m` periods of oscillations. Show that this phase error
is linear in :math:`m`.
Filename: ``vib_phase_error_growth.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:w:adjust:

Exercise 4: Improve the accuracy by adjusting the frequency
-----------------------------------------------------------

According to :eq:`vib:ode1:tildeomega:series`, the numerical
frequency deviates from the exact frequency by a (dominating) amount
:math:`\omega^3\Delta t^2/24 >0`. Replace the ``w`` parameter in the algorithm
in the ``solver`` function (in ``vib_undamped.py``) by ``w*(1 -
(1./24)*w**2*dt**2`` and test how this adjustment in the numerical
algorithm improves the accuracy.
Filename: ``vib_adjust_w.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:undamped:adaptive:

Exercise 5: See if adaptive methods improve the phase error
-----------------------------------------------------------

Adaptive methods for solving ODEs aim at adjusting :math:`\Delta t` such
that the error is within a user-prescribed tolerance. Implement the
equation :math:`u''+u=0` in the `Odespy <https://github.com/hplgit/odespy>`_
software. Use the example `on adaptive
schemes <http://tinyurl.com/k3sdbuv/pub/decay-sphinx/._part0007_main_decay.html#example-adaptive-runge-kutta-methods>`_
in [Ref1]_.  Run the scheme with a very low
tolerance (say :math:`10^{-14}`) and for a long time, check the number of
time points in the solver's mesh (``len(solver.t_all)``), and compare
the phase error with that produced by the simple finite difference
method from the section :ref:`vib:ode1:fdm` with the same number of (equally
spaced) mesh points. The question is whether it pays off to use an
adaptive solver or if equally many points with a simple method gives
about the same accuracy.
Filename: ``vib_undamped_adaptive.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:step4b:alt:

Exercise 6: Use a Taylor polynomial to compute :math:`u^1`
----------------------------------------------------------

As an alternative to the derivation of :eq:`vib:ode1:step4b` for
computing :math:`u^1`, one can use a Taylor polynomial with three terms
for :math:`u^1`:


.. math::
         u(t_1) \approx u(0) + u'(0)\Delta t + \frac{1}{2}u''(0)\Delta t^2

With :math:`u''=-\omega^2 u` and :math:`u'(0)=0`, show that this method also leads to
:eq:`vib:ode1:step4b`. Generalize the condition on :math:`u'(0)` to
be :math:`u'(0)=V` and compute :math:`u^1` in this case with both methods.
Filename: ``vib_first_step.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:wdt:limit:

Exercise 7: Find the minimal resolution of an oscillatory function
------------------------------------------------------------------

.. Short: Find the largest relevant value of :math:`\omega\Delta t`



Sketch the function on a given mesh which has the highest possible
frequency. That is, this oscillatory "cos-like" function has its
maxima and minima at every two grid points.  Find an expression for
the frequency of this function, and use the result to find the largest
relevant value of :math:`\omega\Delta t` when :math:`\omega` is the frequency
of an oscillating function and :math:`\Delta t` is the mesh spacing.
Filename: ``vib_largest_wdt.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:fd:exp:plot:

Exercise 8: Visualize the accuracy of finite differences for a cosine function
------------------------------------------------------------------------------

.. Short: Visualize the accuracy of finite differences



We introduce the error fraction

.. math::
         E = \frac{[D_tD_t u]^n}{u''(t_n)} 

to measure the error in the finite difference approximation :math:`D_tD_tu` to
:math:`u''`.
Compute :math:`E`
for the specific choice of a cosine/sine function of the
form :math:`u=\exp{(i\omega t)}` and show that

.. math::
         E = \left(\frac{2}{\omega\Delta t}\right)^2
        \sin^2(\frac{\tilde\omega\Delta t}{2})
        \thinspace .
        

Plot :math:`E` as a function of :math:`p=\omega\Delta t`. The relevant
values of :math:`p` are :math:`[0,\pi]` (see :ref:`vib:exer:wdt:limit`
for why :math:`p>\pi` does not make sense).
The deviation of the curve from unity visualizes the error in the
approximation. Also expand :math:`E` as a Taylor polynomial in :math:`p` up to
fourth degree (use, e.g., ``sympy``).
Filename: ``vib_plot_fd_exp_error.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:verify:linear:

Exercise 9: Use a linear function for verification
--------------------------------------------------

This is a continuation of :ref:`vib:exer:undamped:verify:linear` where
we consider the extended model problem :eq:`vib:ode2`.
Prescribe :math:`u_{\small\mbox{e}} = Vt + I`, which fulfills the initial conditions, and
show that this :math:`u_{\small\mbox{e}}` solves :eq:`vib:ode2` if :math:`F(t)=I+(c+t)V`.
Import the ``solver`` function from ``vib.py`` and add a nose test using
this linear solution.
Filename: ``vib_verify_linear.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:discrete:omega:

Exercise 10: Use an exact discrete solution for verification
------------------------------------------------------------

Write a nose test function that employs the exact discrete solution
:eq:`vib:ode1:un:exact` to verify the implementation of the
``solver`` function in the file ``vib_undamped.py``.
Filename: ``vib_verify_discrete_omega.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:conv:rate:

Exercise 11: Use analytical solution for convergence rate tests
---------------------------------------------------------------

The purpose of this exercise is to perform convergence tests of
the problem :eq:`vib:ode2` when :math:`s(u)=\omega^2u` and :math:`F(t)=A\sin\phi t`.
Find the complete analytical solution to the problem in this case
(most textbooks on mechanics list the various elements you need to
write down the exact solution).
Modify the ``convergence_rate`` function from the ``vib_undamped.py``
program to perform experiments with the extended model.
Verify that the error is of order :math:`\Delta t^2`.
Filename: ``vib_conv_rate.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:undamped:odespy:

Exercise 12: Investigate the amplitude errors of many solvers
-------------------------------------------------------------

Use the program ``vib_odespy.py`` from the section :ref:`vib:undamped:1stODE`
and the amplitude estimation from the ``amplitudes`` function
in the ``vib_undamped.py`` file (see the section :ref:`vib:ode1:empirical`)
to investigate how well famous methods for 1st-order ODEs
can preserve the amplitude of :math:`u` in undamped oscillations.
Test, for example, the 3rd- and 4th-order Runge-Kutta methods
(``RK3``, ``RK4``), the Crank-Nicolson method (``CrankNicolson``),
the 2nd- and 3rd-order Adams-Bashforth methods (``AdamsBashforth2``,
``AdamsBashforth3``), and a 2nd-order Backwards scheme (``Backward2Step``).
The relevant governing equations are listed in
the section :ref:`vib:model2x2:ueq`.
Filename: ``vib_amplitude_errors.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:memsave:

Exercise 13: Minimize memory usage of a vibration solver
--------------------------------------------------------

The program `vib.py <http://tinyurl.com/jvzzcfn/vib/vib.py>`_
store the complete solution :math:`u^0,u^1,\ldots,u^{N_t}` in memory, which is
convenient for later plotting.
Make a memory minimizing version of this program where only the last three
:math:`u^{n+1}`, :math:`u^n`, and :math:`u^{n-1}` values are stored in memory.
Write each computed :math:`(t_{n+1}, u^{n+1})` pair to file.
Visualize the data in the file (a cool solution is to
read one line at a time and
plot the :math:`u` value using the line-by-line plotter in the
``visualize_front_ascii`` function - this technique makes it trivial
to visualize very long time simulations).
Filename: ``vib_memsave.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:gen:class:

Exercise 14: Implement the solver via classes
---------------------------------------------

Reimplement the ``vib.py``
program
using a class ``Problem`` to hold all the physical parameters of the problem,
a class ``Solver`` to hold the numerical parameters and compute the
solution, and a class ``Visualizer`` to display the solution.

.. --- begin hint in exercise ---


*Hint.* Use the ideas and examples
for an `ODE model <http://tinyurl.com/k3sdbuv/pub/decay-sphinx/main_decay.html#implementing-simple-problem-and-solver-classes>`_.
More specifically, make a superclass ``Problem`` for holding the scalar
physical parameters of a problem and let subclasses implement the
:math:`s(u)` and :math:`F(t)` functions as methods.
Try to call up as much existing functionality in ``vib.py`` as possible.

.. --- end hint in exercise ---

Filename: ``vib_class.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _vib:exer:schemes:equiv:

Exercise 15: Show equivalence between schemes
---------------------------------------------

Show that the schemes from the sections :ref:`vib:ode1:fdm`,
:ref:`vib:model2x2:EulerCromer`, and
:ref:`vib:model2x2:staggered` are all equivalent.

.. mech systems: horizontal, vertical/hanging

.. pendulum

.. bumpy road

.. moored ship

.. electrical circuits, see ode2.p.tex

.. 0D blood flow?

.. waves: 1D blood flow

.. general particle laws and velocity verlet, make exercises

.. see `<http://en.wikipedia.org/wiki/Velocity_Verlet>`_


.. in vb_odespy examples: add 20 RK4 1000 to show RK4 in the long run


.. mu'' + bu' + ku = F(t)

.. set up analytical solution for reference

.. compare for F = sin qt, demonstrate resonance by having

.. F = sin q t and q = piecewise constant in time with four

.. levels: 0.1, 0.75 1, 1.25, 2 of the resonance frequency,

.. make each platou act for a while to see the effect


.. mu'' + bu' + s(u) = F(t) as exercise, pendulum

.. mu'' + f(x) + s() = F(t) via odespy RK4


.. odespy: ForwardBackward on a 2n system? Need special formula for first

.. step to ensure dt^2 accuracy there.


.. apps: planet around a star, box horizontal and vertical, bumpy,

.. jumping washing machine, pendulum, moored ship, look to Irgens

Filename: ``vib_scheme_equivalence.pdf``.

.. --- end exercise ---



References
==========

.. [Ref1]
   **H. P. Langtangen**. Introduction to Computing With Finite Difference Methods,
   *Simula Research Laboratory and University of Oslo*,
   2013,
   `http://hplgit.github.com/INF5620/doc/pub/decay-sphinx/main_decay.html <http://hplgit.github.com/INF5620/doc/pub/decay-sphinx/main_decay.html>`_.


