.. !split


.. _decay:basics:

Finite difference methods
=========================



.. admonition:: Goal

   We explain the basic ideas of finite difference methods
   using a simple ordinary differential equation :math:`u'=-au` as
   primary example.
   Emphasis is put on the reasoning when discretizing the problem and
   introduction of key concepts such as mesh, mesh function,
   finite difference approximations, averaging in a mesh,
   deriation of algorithms, and discrete operator notation.







.. _decay:model:

A basic model for exponential decay
-----------------------------------


.. index:: decay ODE

.. index:: exponential decay


Our model problem is perhaps the simplest ordinary differential
equation (ODE):


.. math::
        
        u'(t) = -au(t),
        

Here, :math:`a>0` is a constant and :math:`u'(t)` means differentiation with
respect to time :math:`t`. This type of equation arises in a number of
widely different phenomena where some quantity :math:`u` undergoes
exponential reduction. Examples include radioactive decay, population
decay, investment decay, cooling of an object, pressure decay in the
atmosphere, and retarded motion in fluids (for some of these models,
:math:`a` can be negative as well), see the section :ref:`decay:app` for details
and motivation.  We have chosen this particular ODE not only because
its applications are relevant, but even more because studying
numerical solution methods for this simple ODE gives important insight
that can be reused in much more complicated settings, in particular
when solving diffusion-type partial differential equations.

The analytical solution of the ODE is found by the method of
separation of variables, which results in


.. math::
         u(t) = Ce^{-at},

for any arbitrary constant :math:`C`.
To formulate a mathematical problem for which there
is a unique solution, we need a condition to fix the value of :math:`C`.
This condition is known as the *initial condition* and stated as
:math:`u(0)=I`. That is, we know the
value :math:`I` of :math:`u` when the process starts at :math:`t=0`. The exact solution
is then :math:`u(t)=Ie^{-at}`.

We seek the solution :math:`u(t)` of the ODE for :math:`t\in (0,T]`. The point :math:`t=0` is not
included since we know :math:`u` here and assume that the equation governs
:math:`u` for :math:`t>0`. The complete ODE problem then reads: find :math:`u(t)`
such that


.. _Eq:decay:problem:

.. math::
   :label: decay:problem
        
        u' = -au,\ t\in (0,T], \quad u(0)=I{\thinspace .}   
        

This is known as a *continuous problem* because the parameter :math:`t`
varies continuously from :math:`0` to :math:`T`. For each :math:`t` we have a corresponding
:math:`u(t)`. There are hence infinitely many values of :math:`t` and :math:`u(t)`.
The purpose of a numerical method is to formulate a corresponding
*discrete* problem whose solution is characterized by a finite number of values,
which can be computed in a finite number of steps on a computer.



.. _decay:schemes:FE:

The Forward Euler scheme
------------------------

Solving an ODE like :eq:`decay:problem` by a finite difference method
consists of the following four steps:

1. discretizing the domain,

2. fulfilling the equation at discrete time points,

3. replacing derivatives by finite differences,

4. formulating a recursive algorithm.

.. index:: mesh

.. index:: grid


Step 1: Discretizing the domain
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The time domain :math:`[0,T]` is represented by a finite number of
:math:`N_t+1` points


.. math::
        
        0 = t_0 < t_1 < t_2 < \cdots < t_{N_t-1} < t_{N_t} = T{\thinspace .}
        

The collection of points :math:`t_0,t_1,\ldots,t_{N_t}` constitutes a *mesh*
or *grid*. Often the mesh points will be uniformly spaced in
the domain :math:`[0,T]`, which means that the spacing :math:`t_{n+1}-t_n` is
the same for all :math:`n`. This spacing is often denoted by :math:`\Delta t`,
in this case :math:`t_n=n\Delta t`.


.. index:: mesh function


We seek the solution :math:`u` at the mesh points:
:math:`u(t_n)`, :math:`n=1,2,\ldots,N_t`. Note that :math:`u^0` is already known as :math:`I`.
A notational short-form for :math:`u(t_n)`,
which will be used extensively, is :math:`u^{n}`. More precisely, we let
:math:`u^n` be the *numerical approximation* to the exact solution :math:`u(t_n)`
at :math:`t=t_n`. The numerical approximation is a *mesh function*,
here defined only at the mesh points.
When we need to clearly distinguish between the numerical
and the exact solution, we often place a subscript e on the exact
solution, as in :math:`{u_{\small\mbox{e}}}(t_n)`. Figure :ref:`decay:fdu:e` shows the
:math:`t_n` and :math:`u_n` points for :math:`n=0,1,\ldots,N_t=7` as well as :math:`{u_{\small\mbox{e}}}(t)`
as the dashed line. The goal of a numerical method for ODEs is
to compute the mesh function by solving a finite set of
*algebraic equations* derived from the original ODE problem.


.. _decay:fdu:e:

.. figure:: fig-decay/fdm_u_ue.png
   :width: 600

   *Time mesh with discrete solution values*


Since finite difference methods produce solutions at the mesh
points only, it is an open question what the solution is between
the mesh points. One can use methods for interpolation to
compute the value of :math:`u` between mesh points. The simplest
(and most widely used) interpolation method is to assume that
:math:`u` varies linearly between the mesh points, see
Figure :ref:`decay:fdu:ei`. Given :math:`u^{n}`
and :math:`u^{n+1}`, the value of :math:`u` at some :math:`t\in [t_{n}, t_{n+1}]`
is by linear interpolation


.. math::
        
        u(t) \approx u^n + \frac{u^{n+1}-u^n}{t_{n+1}-t_n}(t - t_n){\thinspace .}
        



.. _decay:fdu:ei:

.. figure:: fig-decay/fdm_u_uei.png
   :width: 600

   *Linear interpolation between the discrete solution values (dashed curve is exact solution)*



Step 2: Fulfilling the equation at discrete time points
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ODE is supposed to hold for all :math:`t\in (0,T]`, i.e., at an infinite
number of points. Now we relax that requirement and require that
the ODE is fulfilled at a finite set of discrete points in time.
The mesh points :math:`t_1,t_2,\ldots,t_{N_t}` are a natural choice of points.
The original ODE is then reduced to  the following :math:`N_t` equations:


.. _Eq:decay:step2:

.. math::
   :label: decay:step2
        
        u'(t_n) = -au(t_n),\quad n=1,\ldots,N_t{\thinspace .}
        
        



.. index:: finite differences


Step 3: Replacing derivatives by finite differences
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The next and most essential step of the method is to replace the
derivative :math:`u'` by a finite difference approximation. Let us first
try a one-sided difference approximation (see Figure :ref:`decay:sketch:FE`),


.. index:: forward difference

.. index::
   single: finite differences; forward



.. _Eq:decay:FEdiff:

.. math::
   :label: decay:FEdiff
        
        u'(t_n) \approx \frac{u^{n+1}-u^{n}}{t_{n+1}-t_n}{\thinspace .}
        
        

Inserting this approximation in :eq:`decay:step2` results in


.. _Eq:decay:step3:

.. math::
   :label: decay:step3
        
        \frac{u^{n+1}-u^{n}}{t_{n+1}-t_n} = -au^{n},\quad n=0,1,\ldots,N_t-1{\thinspace .}
        
        

This equation is the discrete counterpart to the original ODE problem
:eq:`decay:problem`, and often referred to as *finite difference scheme*
or more generally as the *discrete equations* of the problem.
The fundamental feature of these equations is that they are *algebraic*
and can hence be straightforwardly solved to produce the mesh function, i.e.,
the values of :math:`u` at
the mesh points (:math:`u^n`, :math:`n=1,2,\ldots,N_t`).


.. _decay:sketch:FE:

.. figure:: fig-decay/fd_forward.png
   :width: 400

   *Illustration of a forward difference*



.. index:: difference equation


.. index:: discrete equation


.. index:: algebraic equation


.. index:: finite difference scheme


.. index:: Forward Euler scheme


Step 4: Formulating a recursive algorithm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The final step is to identify the computational algorithm to be implemented
in a program. The key observation here is to realize that
:eq:`decay:step3` can be used to compute :math:`u^{n+1}` if :math:`u^n` is known.
Starting with :math:`n=0`, :math:`u^0` is known since :math:`u^0=u(0)=I`, and
:eq:`decay:step3` gives an equation for :math:`u^1`. Knowing :math:`u^1`,
:math:`u^2` can be found from :eq:`decay:step3`. In general, :math:`u^n`
in :eq:`decay:step3` can be assumed known, and then we can easily solve for
the unknown :math:`u^{n+1}`:


.. _Eq:decay:FE:

.. math::
   :label: decay:FE
        
        u^{n+1} = u^n - a(t_{n+1} -t_n)u^n{\thinspace .}
        
        

We shall refer to :eq:`decay:FE` as the Forward Euler (FE) scheme
for our model problem. From a mathematical point of view,
equations of the form :eq:`decay:FE` are known as
*difference equations* since they express how differences in
:math:`u`, like :math:`u^{n+1}-u^n`, evolve with :math:`n`.
The finite difference method can be viewed as a method for turning
a differential equation into a difference equation.

Computation with :eq:`decay:FE` is straightforward:


.. math::
        
        u_0 &= I,\\ 
        u_1 & = u^0 - a(t_{1} -t_0)u^0 = I(1-a(t_1-t_0)),\\ 
        u_2 & = u^1 - a(t_{2} -t_1)u^1 = I(1-a(t_1-t_0))(1 - a(t_2-t_1)),\\ 
        u^3 &= u^2 - a(t_{3} -t_2)u^2 = I(1-a(t_1-t_0))(1 - a(t_2-t_1))(1 - a(t_3-t_2)),
        

and so on until we reach :math:`u^{N_t}`.
Very often, :math:`t_{n+1}-t_n` is constant for all :math:`n`, so we can introduce
the common symbol :math:`\Delta t` for the time step:
:math:`\Delta t = t_{n+1}-t_n`, :math:`n=0,1,\ldots,N_t-1`.
Using a constant time step :math:`\Delta t` in the above calculations gives


.. math::
        
        u_0 &= I,\\ 
        u_1 & = I(1-a\Delta t),\\ 
        u_2 & = I(1-a\Delta t)^2,\\ 
        u^3 &= I(1-a\Delta t)^3,\\ 
        &\vdots\\ 
        u^{N_t} &= I(1-a\Delta t)^{N_t}{\thinspace .}
        

This means that we have found a closed formula for :math:`u^n`, and there is
no need to let a computer generate the sequence :math:`u^1, u^2, u^3, \ldots`.
However, finding such a formula for :math:`u^n` is possible only for a few very
simple problems, so in general finite difference equations must be
solved on a computer.

As the next sections will show, the scheme :eq:`decay:FE` is just one
out of many alternative finite difference (and other) methods for
the model problem :eq:`decay:problem`.

.. _decay:schemes:BE:

The Backward Euler scheme
-------------------------


.. index:: backward difference

.. index::
   single: finite differences; backward


There are several choices of difference approximations in step 3 of
the finite difference method as presented in the previous section.
Another alternative is


.. _Eq:decay:BEdiff:

.. math::
   :label: decay:BEdiff
        
        u'(t_n) \approx \frac{u^{n}-u^{n-1}}{t_{n}-t_{n-1}}{\thinspace .}
        
        

Since this difference is based on going backward in time (:math:`t_{n-1}`)
for information, it is known as the Backward Euler difference.
Figure :ref:`decay:sketch:BE` explains the idea.


.. _decay:sketch:BE:

.. figure:: fig-decay/fd_backward.png
   :width: 400

   *Illustration of a backward difference*



.. index::
   single: backward scheme, 1-step


.. index:: Backward Euler scheme


Inserting :eq:`decay:BEdiff` in :eq:`decay:step2` yields
the Backward Euler (BE) scheme:


.. _Eq:decay:BE0:

.. math::
   :label: decay:BE0
        
        \frac{u^{n}-u^{n-1}}{t_{n}-t_{n-1}} = -a u^n{\thinspace .}
        
        

We assume, as explained under step 4 in the section :ref:`decay:schemes:FE`,
that we have computed :math:`u^0, u^1, \ldots, u^{n-1}` such that
:eq:`decay:BE0` can be used to compute :math:`u^n`.
For direct similarity with the Forward Euler scheme :eq:`decay:FE`
we replace :math:`n` by :math:`n+1` in :eq:`decay:BE0` and solve for the
unknown value :math:`u^{n+1}`:


.. _Eq:decay:BE:

.. math::
   :label: decay:BE
        
        u^{n+1} = \frac{1}{1+ a(t_{n+1}-t_n)} u^n{\thinspace .}
        
        


.. _decay:schemes:CN:

The Crank-Nicolson scheme
-------------------------


.. index:: Crank-Nicolson scheme


.. index:: centered difference

.. index::
   single: finite differences; centered



The finite difference approximations used to derive the schemes
:eq:`decay:FE` and :eq:`decay:BE` are both one-sided differences,
known to be less accurate than central (or midpoint)
differences. We shall now construct
a central difference at :math:`t_{n+1/2}=\frac{1}{2} (t_n + t_{n+1})`, or
:math:`t_{n+1/2}=(n+\frac{1}{2})\Delta t` if the mesh spacing is uniform in time.
The approximation reads


.. _Eq:decay:CNdiff:

.. math::
   :label: decay:CNdiff
        
        u'(t_{n+\frac{1}{2}}) \approx \frac{u^{n+1}-u^n}{t_{n+1}-t_n}{\thinspace .}
        
        

Note that the fraction on the right-hand side is the same as for the
Forward Euler approximation :eq:`decay:FEdiff` and
the Backward Euler approximation :eq:`decay:BEdiff` (with
:math:`n` replaced by :math:`n+1`). The accuracy of this fraction as an approximation
to the derivative of :math:`u` depends on *where* we seek the derivative:
in the center of the interval :math:`[t_{n},t_{n+1}]` or at the end points.

With the formula :eq:`decay:CNdiff`, where :math:`u'` is evaluated at
:math:`t_{n+1/2}`, it is natural to demand the
ODE to be fulfilled at the time points between the mesh points:


.. _Eq:decay:step2m:

.. math::
   :label: decay:step2m
        
        u'(t_{n+\frac{1}{2}}) = -au(t_{n+\frac{1}{2}}),\quad n=0,
        \ldots,N_t-1{\thinspace .}
        
        

Using :eq:`decay:CNdiff` in :eq:`decay:step2m` results in


.. _Eq:decay:CN0:

.. math::
   :label: decay:CN0
        
        \frac{u^{n+1}-u^n}{t_{n+1}-t_n} = -au^{n+\frac{1}{2}},
        
        

where :math:`u^{n+\frac{1}{2}}` is a short form for :math:`u(t_{n+\frac{1}{2}})`.
The problem is that we aim to compute :math:`u^n` for integer :math:`n`, implying that
:math:`u^{n+\frac{1}{2}}` is not a quantity computed by our method. It must
therefore be
expressed by the quantities that we actually produce, i.e.,
the numerical solution at the
mesh points. One possibility is to approximate :math:`u^{n+\frac{1}{2}}`
as an arithmetic mean of the :math:`u` values at the neighboring mesh points:


.. index::
   single: averaging; arithmetic



.. _Eq:decay:uhalfavg:

.. math::
   :label: decay:uhalfavg
        
        u^{n+\frac{1}{2}} \approx \frac{1}{2} (u^n + u^{n+1}){\thinspace .}
        
        

Using :eq:`decay:uhalfavg` in :eq:`decay:CN0` results in


.. _Eq:decay:CN1:

.. math::
   :label: decay:CN1
        
        \frac{u^{n+1}-u^n}{t_{n+1}-t_n} = -a\frac{1}{2} (u^n + u^{n+1}){\thinspace .}
        
        

Figure :ref:`decay:sketch:CN` sketches the geometric interpretation of
such a centered difference.


.. _decay:sketch:CN:

.. figure:: fig-decay/fd_centered.png
   :width: 400

   *Illustration of a centered difference*


We assume that :math:`u^n` is already computed so that :math:`u^{n+1}` is the
unknown, which we can solve for:


.. _Eq:decay:CN:

.. math::
   :label: decay:CN
        
        u^{n+1} = \frac{1-\frac{1}{2} a(t_{n+1}-t_n)}{1 + \frac{1}{2} a(t_{n+1}-t_n)}u^n{\thinspace .}
        
        

The finite difference scheme :eq:`decay:CN` is often called
the Crank-Nicolson (CN) scheme or a midpoint or centered scheme.


.. _decay:schemes:theta:

The unifying :math:`\theta`-rule
--------------------------------


.. index:: weighted average

.. index:: theta-rule

.. index:: theta-rule


The Forward Euler, Backward Euler, and Crank-Nicolson schemes can be
formulated as one scheme with a varying parameter :math:`\theta`:


.. _Eq:decay:th0:

.. math::
   :label: decay:th0
        
        \frac{u^{n+1}-u^{n}}{t_{n+1}-t_n} = -a (\theta u^{n+1} + (1-\theta) u^{n})
        
        {\thinspace .}
        


Observe:

 * :math:`\theta =0` gives the Forward Euler scheme

 * :math:`\theta =1` gives the Backward Euler scheme, and

 * :math:`\theta =\frac{1}{2}` gives the Crank-Nicolson scheme.

 * We may alternatively choose any other value of :math:`\theta` in :math:`[0,1]`.

As before, :math:`u^n` is considered known and :math:`u^{n+1}` unknown, so
we solve for the latter:


.. _Eq:decay:th:

.. math::
   :label: decay:th
        
        u^{n+1} = \frac{1 - (1-\theta) a(t_{n+1}-t_n)}{1 + \theta a(t_{n+1}-t_n)}{\thinspace .}
        
        

This scheme is known as the :math:`\theta`-rule, or alternatively written as
the "theta-rule".


.. admonition:: Derivation

   We start with replacing :math:`u'` by the fraction
   
   
   .. math::
            \frac{u^{n+1}-u^{n}}{t_{n+1}-t_n},
   
   in the Forward Euler, Backward Euler,
   and Crank-Nicolson schemes. Then we observe that
   the difference between the methods concerns which point this
   fraction approximates the derivative. Or in other words, at which point we
   sample the ODE. So far this has been the
   end points or the midpoint of :math:`[t_n,t_{n+1}]`. However, we may choose any point
   :math:`\tilde t \in [t_n,t_{n+1}]`.
   The difficulty
   is that evaluating the right-hand side :math:`-au` at an arbitrary point
   faces the same problem as in
   the section :ref:`decay:schemes:CN`: the point value must be expressed
   by the discrete :math:`u` quantities that we compute by the scheme, i.e.,
   :math:`u^n` and :math:`u^{n+1}`. Following the averaging idea from
   the section :ref:`decay:schemes:CN`,
   the value of :math:`u` at an arbitrary point :math:`\tilde t` can be
   calculated as a *weighted average*, which generalizes the arithmetic mean
   :math:`\frac{1}{2} u^n + {\frac{1}{2}}u^{n+1}`.
   If we express :math:`\tilde t` as a weighted average
   
   .. math::
            t_{n+\theta} = \theta t_{n+1} + (1-\theta) t_{n},
   
   where :math:`\theta\in [0,1]` is the weighting factor, we can write
   
   
   .. _Eq:decay:thetaavg:

.. math::
   :label: decay:thetaavg
           
           u(\tilde t) = u(\theta t_{n+1} + (1-\theta) t_{n}) \approx
           \theta u^{n+1} + (1-\theta) u^{n}{\thinspace .}
           
           
   
   
   
   .. index:: theta-rule
   
   
   We can now let the ODE hold at the point
   :math:`\tilde t\in [t_n,t_{n+1}]`, approximate :math:`u'` by the fraction
   :math:`(u^{n+1}-u^{n})/(t_{n+1}-t_n)`, and approximate the right-hand
   side :math:`-au` by the weighted average :eq:`decay:thetaavg`.
   The result is :eq:`decay:th0`.




Constant time step
------------------

All schemes up to now have been formulated for a general non-uniform
mesh in time: :math:`t_0,t_1,\ldots,t_{N_t}`. Non-uniform meshes are highly relevant
since one can use many points in regions where :math:`u` varies rapidly, and
save points in regions where :math:`u` is slowly varying. This is the key idea
of *adaptive* methods where the spacing of the mesh points
are determined as the computations proceed.

However, a uniformly distributed set of mesh points is very common and
sufficient for many applications. It therefore makes sense to
present the finite difference schemes for a uniform point distribution
:math:`t_n=n\Delta t`, where :math:`\Delta t` is the constant spacing between
the mesh points, also referred to as the *time step*.
The resulting formulas look simpler and are perhaps more
well known.



.. admonition:: Summary of schemes for constant time step

   
   .. _Eq:decay:FE:u:

.. math::
   :label: decay:FE:u
           
           u^{n+1} = (1 - a\Delta t )u^n  \quad (\hbox{FE})
           
           
   
   
   
   .. _Eq:decay:BE:u:

.. math::
   :label: decay:BE:u
             
           u^{n+1} = \frac{1}{1+ a\Delta t} u^n  \quad (\hbox{BE})
           
           
   
   
   
   .. _Eq:decay:CN:u:

.. math::
   :label: decay:CN:u
             
           u^{n+1} = \frac{1-\frac{1}{2} a\Delta t}{1 + \frac{1}{2} a\Delta t} u^n \quad (\hbox{CN})
           
           
   
   
   
   .. _Eq:decay:th:u:

.. math::
   :label: decay:th:u
             
           u^{n+1} = \frac{1 - (1-\theta) a\Delta t}{1 + \theta a\Delta t}u^n \quad (\theta-\hbox{rule})






Not surprisingly, we present these three alternative schemes
because they have different pros and cons, both for the simple ODE
in question (which can easily be solved as accurately as desired), and for
more advanced differential equation problems.



.. admonition:: Test the understanding

   At this point it can be good training to apply the explained
   finite difference discretization techniques to a slightly
   different equation. :ref:`decay:app:exer:cooling:schemes`
   is therefore highly recommended to check that the key concepts
   are understood.







.. _decay:fd:op:

Compact operator notation for finite differences
------------------------------------------------


.. index:: finite difference operator notation

.. index::
   single: operator notation, finite differences


Finite difference formulas can be tedious to write and read,
especially for differential equations with many terms and many
derivatives. To save space and help the reader of the scheme to quickly
see the nature of the difference approximations, we introduce a
compact notation. A forward difference approximation is denoted
by the :math:`D_t^+` operator:


.. _Eq:fd:D:f:

.. math::
   :label: fd:D:f
        
        [D_t^+u]^n = \frac{u^{n+1} - u^{n}}{\Delta t}
        \approx \frac{d}{dt} u(t_n) 
        {\thinspace .}
        

The notation consists of an operator that approximates
differentiation with respect to an independent variable, here :math:`t`.
The operator is built of the symbol :math:`D`, with the variable as subscript
and a superscript denoting the type of difference. The superscript :math:`\,{}^+`
indicates a forward difference.
We place square brackets around the operator and the function it operates
on and specify the mesh point, where the operator is acting, by
a superscript.

The corresponding operator notation for a centered difference and
a backward difference reads


.. _Eq:fd:D:c:

.. math::
   :label: fd:D:c
        
        [D_tu]^n = \frac{u^{n+\frac{1}{2}} - u^{n-\frac{1}{2}}}{\Delta t}
        \approx \frac{d}{dt} u(t_n), 
        

and

.. _Eq:fd:D:b:

.. math::
   :label: fd:D:b
        
        [D_t^-u]^n = \frac{u^{n} - u^{n-1}}{\Delta t}
        \approx \frac{d}{dt} u(t_n) 
        {\thinspace .}
        

Note that the superscript :math:`\,{}^-` denotes the backward
difference, while no superscript implies a central difference.

An averaging operator is also convenient to have:


.. _Eq:fd:mean:a:

.. math::
   :label: fd:mean:a
        
        [\overline{u}^{t}]^n = \frac{1}{2} (u^{n-\frac{1}{2}} + u^{n+\frac{1}{2}} )
        \approx u(t_n) 
        

The superscript :math:`t` indicates that the average is taken along the time
coordinate. The common average :math:`(u^n + u^{n+1})/2` can now be
expressed as :math:`[\overline{u}^{t}]^{n+\frac{1}{2}}`. (When also spatial coordinates
enter the problem, we need the explicit specification of the coordinate
after the bar.)


The Backward Euler finite difference approximation to :math:`u'=-au` can be written
as follows utilizing the compact notation:


.. math::
        
        [D_t^-u]^n = -au^n {\thinspace .}
        

In difference equations we often place the square brackets around
the whole equation, to indicate at which mesh point the equation applies,
since each term is supposed to be approximated at the same point:


.. math::
        
        [D_t^- u  = -au]^n {\thinspace .}
        

The Forward Euler scheme takes the form


.. math::
        
        [D_t^+ u  = -au]^n,
        

while the Crank-Nicolson scheme is written as


.. _Eq:fd:compact:ex:CN:

.. math::
   :label: fd:compact:ex:CN
        
        [D_t u = -a\overline{u}^t]^{n+\frac{1}{2}}{\thinspace .}
        
        




.. admonition:: Question

   Apply :eq:`fd:D:c` and :eq:`fd:mean:a` and write out the
   expressions to see that :eq:`fd:compact:ex:CN` is indeed the
   Crank-Nicolson scheme.







The :math:`\theta`-rule can be specified by


.. _Eq:decay:fd1:op:theta:

.. math::
   :label: decay:fd1:op:theta
        
        [\bar D_t u = -a\overline{u}^{t,\theta}]^{n+\theta},
        
        

if we define a new time difference and a *weighted averaging operator*:


.. math::
        
        \lbrack\bar D_t u\rbrack^{n+\theta} = \frac{u^{n+1}-u^n}{t^{n+1}-t^n},
        
        
        
        \lbrack\overline{u}^{t,\theta}\rbrack^{n+\theta} = (1-\theta)u^{n} + \theta u^{n+1}
        \approx u(t_{n+\theta}),
        
        

where :math:`\theta\in [0,1]`. Note that for :math:`\theta =\frac{1}{2}` we recover
the standard centered difference and the standard arithmetic mean.
The idea in :eq:`decay:fd1:op:theta` is to sample the equation at
:math:`t_{n+\theta}`, use a skew difference at that
point :math:`[\bar D_t u]^{n+\theta}`, and a skew mean value.
An alternative notation is

.. math::
         [D_t u]^{n+\frac{1}{2}} = \theta [-au]^{n+1} + (1-\theta)[-au]^{n}{\thinspace .} 


Looking at the various examples above and comparing them with the
underlying differential equations, we see immediately which difference
approximations that have been used and at which point they
apply. Therefore, the compact notation effectively communicates the
reasoning behind turning a differential equation into a difference
equation.


