.. !split

.. _wave:2D3D:

Finite difference methods for 2D and 3D wave equations
======================================================

A natural next step is to consider extensions of the methods for
various
variants of the one-dimensional wave equation to two-dimensional (2D) and
three-dimensional (3D) versions of the wave equation.

.. _wave:2D3D:models:

Multi-dimensional wave equations
--------------------------------

The general wave equation in :math:`d` space dimensions, with constant
wave velocity :math:`c`,
can be written in the compact form


.. _Eq:wave:2D3D:model1:

.. math::
   :label: wave:2D3D:model1
        
        \frac{\partial^2 u}{\partial t^2} = c^2\nabla^2 u\hbox{ for }\boldsymbol{x}\in\Omega\subset\mathbb{R}^d,\ t\in (0,T] \thinspace .
        
        

In a 2D problem (:math:`d=2`),


.. math::
         \nabla^2 u = \frac{\partial^2 u}{\partial x^2} +
        \frac{\partial^2 u}{\partial y^2} ,

while in three space dimensions (:math:`d=3`),


.. math::
         \nabla^2 u = \frac{\partial^2 u}{\partial x^2} +
        \frac{\partial^2 u}{\partial y^2} + \frac{\partial^2 u}{\partial z^2}
        \thinspace . 


Many applications involve variable coefficients, and the general
wave equation in :math:`d` dimensions is in this case written as


.. _Eq:wave:2D3D:model2:

.. math::
   :label: wave:2D3D:model2
        
        \varrho\frac{\partial^2 u}{\partial t^2} = \nabla\cdot (q\nabla u) + f\hbox{ for }\boldsymbol{x}\in\Omega\subset\mathbb{R}^d,\ t\in (0,T],
        
        

which in 2D becomes


.. math::
        
        \varrho(x,y)
        \frac{\partial^2 u}{\partial t^2} =
        \frac{\partial}{\partial x}\left( q(x,y)
        \frac{\partial u}{\partial x}\right)
        +
        \frac{\partial}{\partial y}\left( q(x,y)
        \frac{\partial u}{\partial y}\right)
        + f(x,y,t)
        \thinspace .
        

To save some writing and space we may use the index notation, where
subscript :math:`t`, :math:`x`, :math:`y`, or :math:`z` means differentiation with respect
to that coordinate. For example,


.. math::
        
        \frac{\partial^2 u}{\partial t^2} &= u_{tt},\\ 
        \frac{\partial}{\partial y}\left( q(x,y)
        \frac{\partial u}{\partial y}\right) &= (q u_y)_y
        \thinspace .
        

The 3D versions of the
two model PDEs, with and without variable coefficients,
can with now with the aid of the index notation for differentiation
be stated as


.. _Eq:wave:2D3D:model1:v2:

.. math::
   :label: wave:2D3D:model1:v2
        
        u_{tt} = c^2(u_{xx} + u_{yy} + u_{zz}) + f,
        
        



.. _Eq:wave:2D3D:model2:v2:

.. math::
   :label: wave:2D3D:model2:v2
          
        \varrho u_{tt} = (q u_x)_x + (q u_z)_z + (q u_z)_z + f
        
        \thinspace .
        


At *each point* of the boundary :math:`\partial\Omega` of :math:`\Omega` we need
*one* boundary condition involving the unknown :math:`u`.
The boundary conditions are of three principal types:

 1. :math:`u` is prescribed (:math:`u=0` or a known time variation for
    an incoming wave),

 2. :math:`\partial u/\partial n = \boldsymbol{n}\cdot\nabla u` prescribed
    (zero for reflecting boundaries),

 3. an open boundary condition (also called radiation condition)
    is specified to let waves travel undisturbed out of the domain,
    see :ref:`wave:app:exer:tsunami1D:radiation` for details.

All the listed wave equations with *second-order* derivatives in
time need *two* initial conditions:

 1. :math:`u=I`,

 2. :math:`u_t = V`.

.. _wave:2D3D:mesh:

Mesh
----

We introduce a mesh in time and in space. The mesh in time consists
of time points


.. math::
         t_0=0 < t_1 <\cdots < t_{N_t},


often with a constant
spacing :math:`\Delta t= t_{n+1}-t_{n}`, :math:`n\in{{\mathcal{I^-}_t}}`.

Finite difference methods are easy to implement on simple
rectangle- or box-shaped
domains. More complicated shapes of the domain
require substantially more advanced techniques and
implementational efforts. On a rectangle- or box-shaped domain
mesh points are introduced separately in the various space directions:


.. math::
        
        &x_0 < x_1 <\cdots < x_{N_x}  \hbox{ in }x \hbox{ direction},\\ 
        &y_0 < y_1 <\cdots < y_{N_y}  \hbox{ in }y \hbox{ direction},\\ 
        &z_0 < z_1 <\cdots < z_{N_z}  \hbox{ in }z \hbox{ direction}{\thinspace .}
        

We can write a general mesh point as :math:`(x_i,y_j,z_k,t_n)`, with
:math:`i\in{\mathcal{I}_x}`, :math:`j\in{\mathcal{I}_y}`, :math:`k\in{\mathcal{I}_z}`, and :math:`n\in{\mathcal{I}_t}`.

It is a very common choice to use constant mesh spacings:
:math:`\Delta x = x_{i+1}-x_{i}`, :math:`i\in{{\mathcal{I^-}_x}}`,
:math:`\Delta y = y_{j+1}-y_{j}`, :math:`j\in{{\mathcal{I^-}_y}}`, and
:math:`\Delta z = z_{k+1}-z_{k}`, :math:`k\in{{\mathcal{I^-}_z}}`.
With equal mesh spacings one often introduces
:math:`h = \Delta x = \Delta y =\Delta z`.

The unknown :math:`u` at mesh point :math:`(x_i,y_j,z_k,t_n)` is denoted by
:math:`u^{n}_{i,j,k}`. In 2D problems we just skip the :math:`z` coordinate
(by assuming no variation in that direction: :math:`\partial/\partial z=0`)
and write :math:`u^n_{i,j}`.


.. _wave:2D3D:models:

Discretization
--------------

Two- and three-dimensional wave equations are easily discretized by
assembling building blocks for discretization of
1D wave equations, because the multi-dimensional versions just contain
terms of the same type that occurs in 1D.

Discretizing the PDEs
~~~~~~~~~~~~~~~~~~~~~

Equation :eq:`wave:2D3D:model1:v2` can be discretized as


.. math::
        
        [D_tD_t u = c^2(D_xD_x u + D_yD_yu + D_zD_z u) + f]^n_{i,j,k}
        \thinspace .
        

A 2D version might be instructive to write out in detail:


.. math::
        
        [D_tD_t u = c^2(D_xD_x u + D_yD_yu) + f]^n_{i,j,k},
        

which becomes


.. math::
        
        \frac{u^{n+1}_{i,j} - 2u^{n}_{i,j} + u^{n-1}_{i,j}}{\Delta t^2}
        = c^2
        \frac{u^{n}_{i+1,j} - 2u^{n}_{i,j} + u^{n}_{i-1,j}}{\Delta x^2}
        + c^2
        \frac{u^{n}_{i,j+1} - 2u^{n}_{i,j} + u^{n}_{i,j-1}}{\Delta y^2}
        + f^n_{i,j},
        

Assuming as usual that all values at the time levels :math:`n` and :math:`n-1`
are known, we can solve for the only unknown :math:`u^{n+1}_{i,j}`. The
result can be compactly written as


.. _Eq:wave:2D3D:models:unp1:

.. math::
   :label: wave:2D3D:models:unp1
        
        u^{n+1}_{i,j} = 2u^n_{i,j} + u^{n-1}_{i,j} + c^2\Delta t^2[D_xD_x u + D_yD_y u]^n_{i,j}{\thinspace .}
        
        


As in the 1D case, we need to develop a special formula for :math:`u^1_{i,j}`
where we combine the general scheme for :math:`u^{n+1}_{i,j}`, when :math:`n=0`,
with the discretization of the initial condition:


.. math::
         [D_{2t}u = V]^0_{i,j}\quad\Rightarrow\quad u^{-1}_{i,j} = u^1_{i,j} - 2\Delta t V_{i,j}
        \thinspace .
        

The result becomes, in compact form,


.. _Eq:wave:2D3D:models:u1:

.. math::
   :label: wave:2D3D:models:u1
        
        u^{n+1}_{i,j} = u^n_{i,j} -2\Delta V_{i,j} + \frac{1}{2}
        c^2\Delta t^2[D_xD_x u + D_yD_y u]^n_{i,j}{\thinspace .}
        
        


The PDE :eq:`wave:2D3D:model2:v2`
with variable coefficients is discretized term by term using
the corresponding elements from the 1D case:


.. math::
        
        [\varrho D_tD_t u = (D_x\overline{q}^x D_x u +
        D_y\overline{q}^y D_yu + D_z\overline{q}^z D_z u) + f]^n_{i,j,k}
        \thinspace .
        

When written out and solved for the unknown :math:`u^{n+1}_{i,j,k}`, one gets the
scheme


.. math::
        
        u^{n+1}_{i,j,k} &= - u^{n-1}_{i,j,k}  + 2u^{n}_{i,j,k} + \\ 
        &= \frac{1}{\varrho_{i,j,k}}\frac{1}{\Delta x^2} ( \frac{1}{2}(q_{i,j,k} + q_{i+1,j,k})(u^{n}_{i+1,j,k} - u^{n}_{i,j,k}) - \\ 
        &\qquad\quad \frac{1}{2}(q_{i-1,j,k} + q_{i,j,k})(u^{n}_{i,j,k} - u^{n}_{i-1,j,k})) + \\ 
        &= \frac{1}{\varrho_{i,j,k}}\frac{1}{\Delta x^2} ( \frac{1}{2}(q_{i,j,k} + q_{i,j+1,k})(u^{n}_{i,j+1,k} - u^{n}_{i,j,k}) - \\ 
        &\qquad\quad\frac{1}{2}(q_{i,j-1,k} + q_{i,j,k})(u^{n}_{i,j,k} - u^{n}_{i,j-1,k})) + \\ 
        &= \frac{1}{\varrho_{i,j,k}}\frac{1}{\Delta x^2} ( \frac{1}{2}(q_{i,j,k} + q_{i,j,k+1})(u^{n}_{i,j,k+1} - u^{n}_{i,j,k}) -\\ 
        &\qquad\quad \frac{1}{2}(q_{i,j,k-1} + q_{i,j,k})(u^{n}_{i,j,k} - u^{n}_{i,j,k-1})) + \\ 
        + &\qquad \Delta t^2 f^n_{i,j,k}
        \thinspace .
        


Also here we need to develop a special formula for :math:`u^1_{i,j,k}`
by combining the scheme for :math:`n=0` with the discrete initial condition,
which is just a matter of inserting
:math:`u^{-1}_{i,j,k}=u^1_{i,j,k} - 2\Delta tV_{i,j,k}` in the scheme
and solving for :math:`u^1_{i,j,k}`.

Handling boundary conditions where is :math:`u` known
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The schemes listed above are valid for the internal points in the mesh.
After updating these, we need to visit all the mesh points at the
boundaries and set the prescribed :math:`u` value.

Discretizing the Neumann condition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The condition :math:`\partial u/\partial n = 0` was implemented in 1D by
discretizing it with a :math:`D_{2x}u` centered difference, and thereafter
eliminating the fictitious :math:`u` point outside the mesh by using the
general scheme at the boundary point. Alternatively, one can introduce
ghost cells and update a ghost value to for use in the Neumann
condition. Exactly the same ideas are reused in multi dimensions.

Consider  :math:`\partial u/\partial n = 0`
at a boundary :math:`y=0`. The normal direction is then in :math:`-y` direction,
so

.. math::
         \frac{\partial u}{\partial n} = -\frac{\partial u}{\partial y},

and we set


.. math::
         [-D_{2y} u = 0]^n_{i,0}\quad\Rightarrow\quad \frac{u^n_{i,1}-u^n_{i,-1}}{2\Delta y} = 0
        \thinspace .
        

From this it follows that :math:`u^n_{i,-1}=u^n_{i,1}`.
The discretized PDE at the boundary point :math:`(i,0)` reads


.. math::
        
        \frac{u^{n+1}_{i,0} - 2u^{n}_{i,0} + u^{n-1}_{i,0}}{\Delta t^2}
        = c^2
        \frac{u^{n}_{i+1,0} - 2u^{n}_{i,0} + u^{n}_{i-1,0}}{\Delta x^2}
        + c^2
        \frac{u^{n}_{i,1} - 2u^{n}_{i,0} + u^{n}_{i,-1}}{\Delta y^2}
        + f^n_{i,j},
        

We can then just insert :math:`u^1_{i,1}` for :math:`u^n_{i,-1}` in this equation
and then solve for the boundary value :math:`u^{n+1}_{i,0}` as done in 1D.

From these calculations, we see a pattern:
the general scheme applies at the boundary :math:`j=0` too if we just
replace :math:`j-1` by :math:`j+1`. Such a pattern is particularly useful for
implementations. The details follow from the explained 1D case
in the section :ref:`wave:pde2:Neumann:impl`.

The alternative approach to eliminating fictitious values outside the
mesh is to have :math:`u^n_{i,-1}` available as a ghost value.  The mesh is
extended with one extra line (2D) or plane (3D) of ghost cells at a
Neumann boundary. In the present example it means that we need a line
ghost cells below the :math:`y` axis.  The ghost values must be updated
according to :math:`u^{n+1}_{i,-1}=u^{n+1}_{i,1}`.




