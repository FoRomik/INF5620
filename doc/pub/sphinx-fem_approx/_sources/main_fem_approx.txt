.. Automatically generated reST file from Doconce source
   (https://github.com/hplgit/doconce/)

Approximation of functions with finite elements
===============================================

:Author: Hans Petter Langtangen
:Date: Oct 20, 2013

**PRELIMINARY VERSION**










The finite element method is a powerful tool for solving differential
equations. The method can easily deal with complex geometries and
higher-order approximations of the solution.
Figure :ref:`fem:motivation:fig:dolfin` shows
a two-dimensional domain with a non-trivial geometry. The idea is to
divide the domain into triangles (elements) and seek a polynomial approximations
to the unknown functions on each triangle. The method glues these
piecewise approximations together to find a global solution.
Linear and quadratic polynomials over the triangles are particularly
popular.


.. _fem:motivation:fig:dolfin:

.. figure:: dolfin_mesh.png
   :width: 400

   *Domain for flow around a dolphin*




.. ========= Principles and machinery for approximating functions =========



Many successful numerical methods for differential equations,
including the finite element method,
aim at approximating the unknown function by a sum


.. math::
   :label: fem:u
        
         u(x) = \sum_{i=0}^N c_i{\psi}_i(x),
        
        

where :math:`{\psi}_i(x)` are prescribed functions and :math:`c_0,\ldots,c_N`
are unknown coefficients to be determined.
Solution methods for differential equations
utilizing :eq:`fem:u` must
have a *principle* for constructing :math:`N+1` equations to
determine :math:`c_0,\ldots,c_N`. Then there is a *machinery* regarding
the actual constructions of the equations for :math:`c_0,\ldots,c_N`, in a
particular problem. Finally, there is a *solve* phase for computing
the solution :math:`c_0,\ldots,c_N` of the :math:`N+1` equations.

Especially in the finite element method, the machinery for constructing
the discrete equations to be implemented on a computer is quite
comprehensive, with many mathematical and implementational
details entering the scene at the
same time. From an ease-of-learning perspective it can therefore be
wise to introduce the computational machinery for a trivial equation:
:math:`u=f`. Solving this equation with :math:`f` given and :math:`u` on the form
:eq:`fem:u` means that we seek an approximation
:math:`u` to :math:`f`.
This approximation problem has the advantage of introducing most of the
finite element toolbox, but with postponing demanding topics related to
differential equations (e.g., integration by parts, boundary conditions,
and coordinate mappings).
This is the reason why we shall first become familiar
with finite element *approximation* before addressing
finite element methods for differential equations.

First, we refresh some linear algebra concepts about approximating
vectors in vector spaces. Second, we extend these concepts to
approximating functions in function spaces, using the same
principles and the same notation.
We present examples on approximating functions by  global basis functions with
support throughout the entire domain.
Third, we introduce the finite element type of local basis functions
and explain the computational algorithms for working with such functions.
Three types of approximation principles are covered: 1) the least squares
method, 2) the :math:`L_2` projection or Galerkin method,
and 3) interpolation or collocation.

.. _fem:approx:vec:

Approximation of vectors
========================

We shall start with introducing two fundamental methods for
determining the coefficients :math:`c_i` in :eq:`fem:u` and illustrate
the methods on approximation of vectors, because vectors in vector
spaces give a more intuitive understanding than starting directly
with approximation of functions in function spaces.
The extension from vectors to functions will be trivial as soon as
the fundamental ideas are understood.


The first method of approximation is called the *least squares method*
and consists in finding :math:`c_i` such that the difference :math:`u-f`, measured
in some norm, is minimized. That is, we aim at finding the best
approximation :math:`u` to :math:`f` (in some norm). The second method is not
as intuitive: we find :math:`u` such that the error :math:`u-f` is orthogonal to
the space where we seek :math:`u`. This is known as *projection*, or
we may also call it a *Galerkin method*.
When approximating vectors and functions, the two methods are
equivalent, but this is no longer the case when applying the
principles to differential equations.


.. _fem:approx:vec:plane:

Approximation of planar vectors
-------------------------------

.. index::
   single: approximation; of vectors in the plane



Suppose we have given a vector :math:`\boldsymbol{f} = (3,5)` in the :math:`xy` plane
and that we want to approximate this vector by a vector aligned
in the direction of the vector :math:`(a,b)`. Figure :ref:`fem:approx:vec:plane:fig`
depicts the situation.


.. _fem:approx:vec:plane:fig:

.. figure:: vecapprox_plane.png
   :width: 400

   *Approximation of a two-dimensional vector by a one-dimensional vector*


We introduce the vector space :math:`V`
spanned by the vector :math:`\boldsymbol{\psi}_0=(a,b)`:


.. math::
        
        V = \mbox{span}\,\{ \boldsymbol{\psi}_0\}{\thinspace .}  

We say that :math:`\boldsymbol{\psi}_0` is a basis vector in the space :math:`V`.
Our aim is to find the vector :math:`\boldsymbol{u} = c_0\boldsymbol{\psi}_0\in V` which best approximates
the given vector :math:`\boldsymbol{f} = (3,5)`. A reasonable criterion for a best
approximation could be to minimize the length of the difference between
the approximate :math:`\boldsymbol{u}` and the given :math:`\boldsymbol{f}`. The difference, or error
:math:`\boldsymbol{e} = \boldsymbol{f} -\boldsymbol{u}`, has its length given by the *norm*


.. math::
         ||\boldsymbol{e}|| = (\boldsymbol{e},\boldsymbol{e})^{\frac{1}{2}},

where :math:`(\boldsymbol{e},\boldsymbol{e})` is the *inner product* of :math:`\boldsymbol{e}` and itself. The inner
product, also called *scalar product* or *dot product*, of two vectors
:math:`\boldsymbol{u}=(u_0,u_1)` and :math:`\boldsymbol{v} =(v_0,v_1)` is defined as


.. math::
        
        (\boldsymbol{u}, \boldsymbol{v}) = u_0v_0 + u_1v_1{\thinspace .}  


*Remark 1.* We should point out that we use the notation
:math:`(\cdot,\cdot)` for two different things: :math:`(a,b)` for scalar
quantities :math:`a` and :math:`b` means the vector starting in the origin and
ending in the point :math:`(a,b)`, while :math:`(\boldsymbol{u},\boldsymbol{v})` with vectors :math:`\boldsymbol{u}` and
:math:`\boldsymbol{v}` means the inner product of these vectors.  Since vectors are here
written in boldface font there should be no confusion.  We may add
that the norm associated with this inner product is the usual
Eucledian length of a vector.

*Remark 2.* It might be wise to refresh some basic linear algebra by consulting a
textbook.  :ref:`fem:approx:exer:linalg1` and
:ref:`fem:approx:exer:linalg2` suggest specific tasks to regain
familiarity with fundamental operations on inner product vector
spaces.


.. index::
   single: least squreas method; vectors


The least squares method  (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We now want to find :math:`c_0` such that it minimizes :math:`||\boldsymbol{e}||`. The algebra
is simplified if we minimize the square of the norm, :math:`||\boldsymbol{e}||^2 = (\boldsymbol{e}, \boldsymbol{e})`,
instead of the norm itself.
Define the function


.. math::
        
        E(c_0) = (\boldsymbol{e},\boldsymbol{e}) = (\boldsymbol{f} - c_0\boldsymbol{\psi}_0, \boldsymbol{f} - c_0\boldsymbol{\psi}_0)
        {\thinspace .}
        

We can rewrite the expressions of the right-hand side in a more
convenient form for further work:


.. math::
   :label: fem:vec:E
        
        E(c_0) = (\boldsymbol{f},\boldsymbol{f}) - 2c_0(\boldsymbol{f},\boldsymbol{\psi}_0) + c_0^2(\boldsymbol{\psi}_0,\boldsymbol{\psi}_0){\thinspace .}
        
        

The rewrite results from using the following fundamental rules for inner
product spaces:


.. math::
   :label: fem:vec:rule:scalarmult
        
        (\alpha\boldsymbol{u},\boldsymbol{v})=\alpha(\boldsymbol{u},\boldsymbol{v}),\quad \alpha\in\mathbb{R},
        
        



.. math::
   :label: fem:vec:rule:sum
        
        (\boldsymbol{u} +\boldsymbol{v},\boldsymbol{w}) = (\boldsymbol{u},\boldsymbol{w}) + (\boldsymbol{v}, \boldsymbol{w}),
        
        



.. math::
   :label: fem:vec:rule:symmetry
        
        (\boldsymbol{u}, \boldsymbol{v}) = (\boldsymbol{v}, \boldsymbol{u}){\thinspace .}  
        


Minimizing :math:`E(c_0)` implies finding :math:`c_0` such that


.. math::
         \frac{\partial E}{\partial c_0} = 0{\thinspace .}  

Differentiating :eq:`fem:vec:E` with respect to :math:`c_0` gives


.. math::
   :label: fem:vec:dEdc0:v1
        
        \frac{\partial E}{\partial c_0} = -2(\boldsymbol{f},\boldsymbol{\psi}_0) + 2c_0 (\boldsymbol{\psi}_0,\boldsymbol{\psi}_0)
        {\thinspace .}
        
        

Setting the above expression equal to zero and solving for :math:`c_0` gives


.. math::
   :label: fem:vec:c0
        
        c_0 = \frac{(\boldsymbol{f},\boldsymbol{\psi}_0)}{(\boldsymbol{\psi}_0,\boldsymbol{\psi}_0)},
        
        

which in the present case with :math:`\boldsymbol{\psi}_0=(a,b)` results in


.. math::
        
        c_0 = \frac{3a + 5b}{a^2 + b^2}{\thinspace .}  


For later, it is worth mentioning that setting
the key equation :eq:`fem:vec:dEdc0:v1` to zero can be rewritten
as


.. math::
        
        (\boldsymbol{f}-c0\boldsymbol{\psi}_0,\boldsymbol{\psi}_0) = 0,
        

or


.. math::
   :label: fem:vec:dEdc0:Galerkin
        
        (\boldsymbol{e}, \boldsymbol{\psi}_0) = 0
        {\thinspace .}
        
        






.. index::
   single: Galerkin method; vectors

.. index::
   single: projection; vectors


The projection method
~~~~~~~~~~~~~~~~~~~~~

We shall now show that minimizing :math:`||\boldsymbol{e}||^2` implies that :math:`\boldsymbol{e}` is
orthogonal to *any* vector :math:`\boldsymbol{v}` in the space :math:`V`. This result is
visually quite clear from Figure :ref:`fem:approx:vec:plane:fig` (think of
other vectors along the line :math:`(a,b)`: all of them will lead to
a larger distance between the approximation and :math:`\boldsymbol{f}`).
To see this result mathematically, we
express any :math:`\boldsymbol{v}\in V` as :math:`\boldsymbol{v}=s\boldsymbol{\psi}_0` for any scalar parameter :math:`s`,
recall that two vectors are orthogonal when their inner product vanishes,
and calculate the inner product

.. math::
        
        (\boldsymbol{e}, s\boldsymbol{\psi}_0) &= (\boldsymbol{f} - c_0\boldsymbol{\psi}_0, s\boldsymbol{\psi}_0)\\ 
        &= (\boldsymbol{f},s\boldsymbol{\psi}_0) - (c_0\boldsymbol{\psi}_0, s\boldsymbol{\psi}_0)\\ 
        &= s(\boldsymbol{f},\boldsymbol{\psi}_0) - sc_0(\boldsymbol{\psi}_0, \boldsymbol{\psi}_0)\\ 
        &= s(\boldsymbol{f},\boldsymbol{\psi}_0) - s\frac{(\boldsymbol{f},\boldsymbol{\psi}_0)}{(\boldsymbol{\psi}_0,\boldsymbol{\psi}_0)}(\boldsymbol{\psi}_0,\boldsymbol{\psi}_0)\\ 
        &= s\left( (\boldsymbol{f},\boldsymbol{\psi}_0) - (\boldsymbol{f},\boldsymbol{\psi}_0)\right)\\ 
        &=0{\thinspace .}
        

Therefore, instead of minimizing the square of the norm, we could
demand that :math:`\boldsymbol{e}` is orthogonal to any vector in :math:`V`.
This method is known as *projection*, because it is the same as
projecting the vector onto the subspace.
(The approach can also be referred to as a Galerkin method as
explained at the end of the section :ref:`approximation!of general vectors`.)

Mathematically the projection method is stated
by the equation


.. math::
   :label: fem:vec:Galerkin1
        
        (\boldsymbol{e}, \boldsymbol{v}) = 0,\quad\forall\boldsymbol{v}\in V{\thinspace .}
        
        

An arbitrary :math:`\boldsymbol{v}\in V` can be expressed as
:math:`s\boldsymbol{\psi}_0`, :math:`s\in\mathbb{R}`, and therefore
:eq:`fem:vec:Galerkin1` implies


.. math::
         (\boldsymbol{e},s\boldsymbol{\psi}_0) = s(\boldsymbol{e}, \boldsymbol{\psi}_0) = 0,

which means that the error must be orthogonal to the basis vector in
the space :math:`V`:


.. math::
        
        (\boldsymbol{e}, \boldsymbol{\psi}_0)=0\quad\hbox{or}\quad
        (\boldsymbol{f} - c_0\boldsymbol{\psi}_0, \boldsymbol{\psi}_0)=0
        {\thinspace .}
        

The latter equation gives :eq:`fem:vec:c0` and it
also arose from least squares computations in
:eq:`fem:vec:dEdc0:Galerkin`.




.. _fem:approx:vec:Np1dim:

Approximation of general vectors
--------------------------------

.. index::
   single: approximation; of general vectors



Let us generalize the vector approximation from the previous section
to vectors in spaces with arbitrary dimension. Given some vector :math:`\boldsymbol{f}`,
we want to find the best approximation to this vector in
the space


.. math::
        
        V = \hbox{span}\,\{\boldsymbol{\psi}_0,\ldots,\boldsymbol{\psi}_N\}
        {\thinspace .}
        

We assume that the *basis vectors* :math:`\boldsymbol{\psi}_0,\ldots,\boldsymbol{\psi}_N` are
linearly independent so that none of them are redundant and
the space has dimension :math:`N+1`.
Any vector :math:`\boldsymbol{u}\in V` can be written as a linear combination
of the basis vectors,


.. math::
         \boldsymbol{u} = \sum_{j=0}^N c_j\boldsymbol{\psi}_j,

where :math:`c_j\in\mathbb{R}` are scalar coefficients to be determined.

The least squares method  (2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we want to find :math:`c_0,\ldots,c_N`, such that :math:`\boldsymbol{u}` is the best
approximation to :math:`\boldsymbol{f}` in the sense that the distance (error)
:math:`\boldsymbol{e} = \boldsymbol{f} - \boldsymbol{u}` is minimized. Again, we define
the squared distance as a function of the free parameters
:math:`c_0,\ldots,c_N`,


.. math::
        
        E(c_0,\ldots,c_N) = (\boldsymbol{e},\boldsymbol{e}) = (\boldsymbol{f} -\sum_jc_j\boldsymbol{\psi}_j,\boldsymbol{f} -\sum_jc_j\boldsymbol{\psi}_j)
        \nonumber
        



.. math::
   :label: fem:vec:genE
          
        = (\boldsymbol{f},\boldsymbol{f}) - 2\sum_{j=0}^N c_j(\boldsymbol{f},\boldsymbol{\psi}_j) +
        \sum_{p=0}^N\sum_{q=0}^N c_pc_q(\boldsymbol{\psi}_p,\boldsymbol{\psi}_q){\thinspace .}
        
        

Minimizing this :math:`E` with respect to the independent variables
:math:`c_0,\ldots,c_N` is obtained by requiring


.. math::
        
        \frac{\partial E}{\partial c_i} = 0,\quad i=0,\ldots,N
        {\thinspace .}
        

The second term in :eq:`fem:vec:genE` is differentiated as follows:


.. math::
        
        \frac{\partial}{\partial c_i}
        \sum_{j=0}^N c_j(\boldsymbol{f},\boldsymbol{\psi}_j) = (\boldsymbol{f},\boldsymbol{\psi}_i),
        

since the expression to be differentiated is a sum and only one term,
:math:`c_i(\boldsymbol{f},\boldsymbol{\psi}_i)`,
contains :math:`c_i` and this term is linear in :math:`c_i`.
To understand this differentiation in detail, write out the sum specifically for,
e.g, :math:`N=3` and :math:`i=1`.

The last term in :eq:`fem:vec:genE`
is more tedious to differentiate. We start with


.. math::
        
        \frac{\partial}{\partial c_i}
        c_pc_q =
        \left\lbrace\begin{array}{ll}
        0,  \hbox{ if } p\neq i\hbox{ and } q\neq i,
        



.. math::
          
        c_q,  \hbox{ if } p=i\hbox{ and } q\neq i,
        



.. math::
          
        c_p,  \hbox{ if } p\neq i\hbox{ and } q=i,
        



.. math::
          
        2c_i,  \hbox{ if } p=q= i,
        



.. math::
          
        \end{array}\right.
        

Then


.. math::
         \frac{\partial}{\partial c_i}
        \sum_{p=0}^N\sum_{q=0}^N c_pc_q(\boldsymbol{\psi}_p,\boldsymbol{\psi}_q)
        = \sum_{p=0, p\neq i}^N c_p(\boldsymbol{\psi}_p,\boldsymbol{\psi}_i)
        + \sum_{q=0, q\neq i}^N c_q(\boldsymbol{\psi}_q,\boldsymbol{\psi}_i)
        +2c_i(\boldsymbol{\psi}_i,\boldsymbol{\psi}_i){\thinspace .}  

The last term can be included in the other two sums, resulting in


.. math::
        
        \frac{\partial}{\partial c_i}
        \sum_{p=0}^N\sum_{q=0}^N c_pc_q(\boldsymbol{\psi}_p,\boldsymbol{\psi}_q)
        = 2\sum_{j=0}^N c_i(\boldsymbol{\psi}_j,\boldsymbol{\psi}_i){\thinspace .}  

It then follows that setting


.. math::
        
        \frac{\partial E}{\partial c_i} = 0,\quad i=0,\ldots,N,

leads to a linear system
for :math:`c_0,\ldots,c_N`:


.. math::
   :label: fem:approx:vec:Np1dim:eqsys
        
        \sum_{j=0}^N A_{i,j} c_j = b_i, \quad i=0,\ldots,N,
        
        

where


.. math::
        
        A_{i,j} = (\boldsymbol{\psi}_i,\boldsymbol{\psi}_j),
        



.. math::
          
        b_i = (\boldsymbol{\psi}_i, \boldsymbol{f}){\thinspace .}  

We have changed the order of the two vectors in the inner
product according to :eq:`fem:vec:rule:symmetry`:


.. math::
         A_{i,j} = (\boldsymbol{\psi}_j,\boldsymbol{\psi}_i) = (\boldsymbol{\psi}_i,\boldsymbol{\psi}_j),

simply because the sequence :math:`i`-$j$ looks more aesthetic.

The Galerkin or projection method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In analogy with the "one-dimensional" example in
the section :ref:`fem:approx:vec:plane`, it holds also here in the general
case that minimizing the distance
(error) :math:`\boldsymbol{e}` is equivalent to demanding that :math:`\boldsymbol{e}` is orthogonal to
all :math:`\boldsymbol{v}\in V`:

.. index::
   single: Galerkin method; vectors

.. index::
   single: projection; vectors



.. math::
   :label: fem:approx:vec:Np1dim:Galerkin
        
        (\boldsymbol{e},\boldsymbol{v})=0,\quad \forall\boldsymbol{v}\in V{\thinspace .}
        
        

Since any :math:`\boldsymbol{v}\in V` can be written as :math:`\boldsymbol{v} =\sum_{i=0}^N c_i\boldsymbol{\psi}_i`,
the statement :eq:`fem:approx:vec:Np1dim:Galerkin` is equivalent to
saying that


.. math::
         (\boldsymbol{e}, \sum_{i=0}^N c_i\boldsymbol{\psi}_i) = 0,

for any choice of coefficients :math:`c_0,\ldots,c_N`.
The latter equation can be rewritten as


.. math::
         \sum_{i=0}^N c_i (\boldsymbol{e},\boldsymbol{\psi}_i) =0{\thinspace .}  

If this is to hold for arbitrary values of :math:`c_0,\ldots,c_N`
we must require that each term in the sum vanishes,


.. math::
   :label: fem:approx:vec:Np1dim:Galerkin0
        
        (\boldsymbol{e},\boldsymbol{\psi}_i)=0,\quad i=0,\ldots,N{\thinspace .}
        
        

These :math:`N+1` equations result in the same linear system as
:eq:`fem:approx:vec:Np1dim:eqsys`:


.. math::
         (\boldsymbol{f} - \sum_{j=0}^N c_j\boldsymbol{\psi}_j, \boldsymbol{\psi}_i) = (\boldsymbol{f}, \boldsymbol{\psi}_i) - \sum_{j\in{I}}
        (\boldsymbol{\psi}_i,\boldsymbol{\psi}_j)c_j = 0,

and hence


.. math::
         \sum_{j=0}^N (\boldsymbol{\psi}_i,\boldsymbol{\psi}_j)c_j = (\boldsymbol{f}, \boldsymbol{\psi}_i),\quad i=0,\ldots, N
        {\thinspace .}
        

So, instead of differentiating the
:math:`E(c_0,\ldots,c_N)` function, we could simply use
:eq:`fem:approx:vec:Np1dim:Galerkin` as the principle for
determining :math:`c_0,\ldots,c_N`, resulting in the :math:`N+1`
equations :eq:`fem:approx:vec:Np1dim:Galerkin0`.

The names *least squares method* or *least squares approximation*
are natural since the calculations consists of
minimizing :math:`||\boldsymbol{e}||^2`, and :math:`||\boldsymbol{e}||^2` is a sum of squares
of differences between the components in :math:`\boldsymbol{f}` and :math:`\boldsymbol{u}`.
We find :math:`\boldsymbol{u}` such that this sum of squares is minimized.

The principle :eq:`fem:approx:vec:Np1dim:Galerkin`,
or the equivalent form :eq:`fem:approx:vec:Np1dim:Galerkin0`,
is known as *projection*. Almost the same mathematical idea
was used by the Russian mathematician `Boris Galerkin <http://en.wikipedia.org/wiki/Boris_Galerkin>`_ to solve
differential equations, resulting in what is widely known as
*Galerkin's method*.


.. _fem:approx:global:

Approximation of functions
==========================

.. index::
   single: approximation; of functions


Let :math:`V` be a function space spanned by a set of *basis functions*
:math:`{\psi}_0,\ldots,{\psi}_N`,


.. math::
         V = \hbox{span}\,\{{\psi}_0,\ldots,{\psi}_N\},

such that any function :math:`u\in V` can be written as a linear
combination of the basis functions:


.. math::
   :label: fem:approx:ufem
        
        u = \sum_{j\in{I}} c_j{\psi}_j{\thinspace .}
        
        

The index set :math:`{I}` is defined as :math:`{I} =\{0,\ldots,N\}` and is used
both for compact notation and for flexibility in the numbering of
elements in sequences.

For now, in this introduction, we shall look at functions of a
single variable :math:`x`:
:math:`u=u(x)`, :math:`{\psi}_i={\psi}_i(x)`, :math:`i\in{I}`. Later, we will almost
trivially extend the mathematical details
to functions of two- or three-dimensional physical spaces.
The approximation :eq:`fem:approx:ufem` is typically used
to discretize a problem in space. Other methods, most notably
finite differences, are common for time discretization, although the
form :eq:`fem:approx:ufem` can be used in time as well.

.. _fem:approx:LS:

The least squares method  (3)
-----------------------------

Given a function :math:`f(x)`, how can we determine its best approximation
:math:`u(x)\in V`? A natural starting point is to apply the same reasoning
as we did for vectors in the section :ref:`fem:approx:vec:Np1dim`. That is,
we minimize the distance between :math:`u` and :math:`f`. However, this requires
a norm for measuring distances, and a norm is most conveniently
defined through an
inner product. Viewing a function as a vector of infinitely
many point values, one for each value of :math:`x`, the inner product could
intuitively be defined as the usual summation of
pairwise components, with summation replaced by integration:


.. math::
        
        (f,g) = \int f(x)g(x)\, {\, \mathrm{d}x}
        {\thinspace .}
        

To fix the integration domain, we let :math:`f(x)` and :math:`{\psi}_i(x)`
be defined for a domain :math:`\Omega\subset\mathbb{R}`.
The inner product of two functions :math:`f(x)` and :math:`g(x)` is then


.. math::
   :label: fem:approx:LS:innerprod
        
        (f,g) = \int_\Omega f(x)g(x)\, {\, \mathrm{d}x}
        
        {\thinspace .}
        


The distance between :math:`f` and any function :math:`u\in V` is simply
:math:`f-u`, and the squared norm of this distance is


.. math::
   :label: fem:approx:LS:E
        
        E = (f(x)-\sum_{j\in{I}} c_j{\psi}_j(x), f(x)-\sum_{j\in{I}} c_j{\psi}_j(x)){\thinspace .}
        
        

Note the analogy with :eq:`fem:vec:genE`: the given function
:math:`f` plays the role of the given vector :math:`\boldsymbol{f}`, and the basis function
:math:`{\psi}_i` plays the role of the basis vector :math:`\boldsymbol{\psi}_i`.
We can rewrite :eq:`fem:approx:LS:E`,
through similar steps as used for the result
:eq:`fem:vec:genE`, leading to


.. math::
        
        E(c_i, \ldots, c_N) = (f,f) -2\sum_{j\in{I}} c_j(f,{\psi}_i)
        + \sum_{p\in{I}}\sum_{q\in{I}} c_pc_q({\psi}_p,{\psi}_q){\thinspace .}  

Minimizing this function of :math:`N+1` scalar variables
:math:`\left\{ {c}_i \right\}_{i\in{I}}`, requires differentiation
with respect to :math:`c_i`, for all :math:`i\in{I}`. The resulting
equations are very similar to those we had in the vector case,
and we hence end up with a
linear system of the form :eq:`fem:approx:vec:Np1dim:eqsys`, with
basically the same expressions:


.. math::
   :label: fem:approx:Aij
        
        A_{i,j} = ({\psi}_i,{\psi}_j),
        
        



.. math::
   :label: fem:approx:bi
          
        b_i = (f,{\psi}_i){\thinspace .}
        
        


The projection (or Galerkin) method
-----------------------------------


.. index::
   single: Galerkin method; functions

.. index::
   single: projection; functions


As in the section :ref:`fem:approx:vec:Np1dim`, the minimization of :math:`(e,e)`
is equivalent to


.. math::
   :label: fem:approx:Galerkin
        
        (e,v)=0,\quad\forall v\in V{\thinspace .}
        
        

This is known as a projection of a function :math:`f` onto the subspace :math:`V`.
We may also call it a Galerkin method for approximating functions.
Using the same reasoning as
in
:eq:`fem:approx:vec:Np1dim:Galerkin`-:eq:`fem:approx:vec:Np1dim:Galerkin0`,
it follows that :eq:`fem:approx:Galerkin` is equivalent to


.. math::
   :label: fem:approx:Galerkin0
        
        (e,{\psi}_i)=0,\quad i\in{I}{\thinspace .}
        
        

Inserting :math:`e=f-u` in this equation and ordering terms, as in the
multi-dimensional vector case, we end up with a linear
system with a coefficient matrix :eq:`fem:approx:Aij` and
right-hand side vector :eq:`fem:approx:bi`.

Whether we work with vectors in the plane, general vectors, or
functions in function spaces, the least squares principle and
the projection or Galerkin method are equivalent.

.. _fem:approx:global:linear:

Example: linear approximation
-----------------------------

Let us apply the theory in the previous section to a simple problem:
given a parabola :math:`f(x)=10(x-1)^2-1` for :math:`x\in\Omega=[1,2]`, find
the best approximation :math:`u(x)` in the space of all linear functions:


.. math::
         V = \hbox{span}\,\{1, x\}{\thinspace .}  

With our notation, :math:`{\psi}_0(x)=1`, :math:`{\psi}_1(x)=x`, and :math:`N=1`.
We seek


.. math::
         u=c_0{\psi}_0(x) + c_1{\psi}_1(x) = c_0 + c_1x,

where
:math:`c_0` and :math:`c_1` are found by solving a :math:`2\times 2` the linear system.
The coefficient matrix has elements


.. math::
        
        A_{0,0} = ({\psi}_0,{\psi}_0) = \int_1^21\cdot 1\, {\, \mathrm{d}x} = 1,
        



.. math::
          
        A_{0,1} = ({\psi}_0,{\psi}_1) = \int_1^2 1\cdot x\, {\, \mathrm{d}x} = 3/2,
        



.. math::
          
        A_{1,0} = A_{0,1} = 3/2,
        



.. math::
          
        A_{1,1} = ({\psi}_1,{\psi}_1) = \int_1^2 x\cdot x\,{\, \mathrm{d}x} = 7/3{\thinspace .}  

The corresponding right-hand side is


.. math::
        
        b_1 = (f,{\psi}_0) = \int_1^2 (10(x-1)^2 - 1)\cdot 1 \, {\, \mathrm{d}x} = 7/3,
        



.. math::
          
        b_2 = (f,{\psi}_1) = \int_1^2 (10(x-1)^2 - 1)\cdot x\, {\, \mathrm{d}x} = 13/3{\thinspace .}  

Solving the linear system results in


.. math::
        
        c_0 = -38/3,\quad c_1 = 10,
        

and consequently


.. math::
        
        u(x) = 10x - \frac{38}{3}{\thinspace .}  

Figure :ref:`fem:approx:global:fig:parabola:linear` displays the
parabola and its best approximation in the space of all linear functions.


.. _fem:approx:global:fig:parabola:linear:

.. figure:: parabola_ls_linear.png
   :width: 400

   *Best approximation of a parabola by a straight line*


.. _fem:approx:global:LS:code:

Implementation of the least squares method
------------------------------------------

The linear system can be computed either symbolically or
numerically (a numerical integration rule is needed in the latter case).
Here is a function for symbolic computation of the linear system,
where :math:`f(x)` is given as a ``sympy`` expression ``f`` involving
the symbol ``x``, ``psi`` is a list of expressions for :math:`\left\{ {{\psi}}_i \right\}_{i\in{I}}`,
and ``Omega`` is a 2-tuple/list holding the limits of the domain :math:`\Omega`:


.. code-block:: python

        import sympy as sm
        
        def least_squares(f, psi, Omega):
            N = len(psi) - 1
            A = sm.zeros((N+1, N+1))
            b = sm.zeros((N+1, 1))
            x = sm.Symbol('x')
            for i in range(N+1):
                for j in range(i, N+1):
                    A[i,j] = sm.integrate(psi[i]*psi[j],
                                          (x, Omega[0], Omega[1]))
                    A[j,i] = A[i,j]
                b[i,0] = sm.integrate(psi[i]*f, (x, Omega[0], Omega[1]))
            c = A.LUsolve(b)
            u = 0
            for i in range(len(psi)):
                u += c[i,0]*psi[i]
            return u

Observe that we exploit the symmetry of the coefficient matrix:
only the upper triangular part is computed. Symbolic integration in
``sympy`` is often time consuming, and (roughly) halving the
work has noticeable effect on the waiting time for the function to
finish execution.

Comparing the given :math:`f(x)` and the approximate :math:`u(x)` visually is
done by the following function, which with the aid of
``sympy``'s ``lambdify`` tool converts a ``sympy``
expression to a Python function for numerical
computations:


.. code-block:: python

        def comparison_plot(f, u, Omega, filename='tmp.pdf'):
            x = sm.Symbol('x')
            f = sm.lambdify([x], f, modules="numpy")
            u = sm.lambdify([x], u, modules="numpy")
            resolution = 401  # no of points in plot
            xcoor  = linspace(Omega[0], Omega[1], resolution)
            exact  = f(xcoor)
            approx = u(xcoor)
            plot(xcoor, approx)
            hold('on')
            plot(xcoor, exact)
            legend(['approximation', 'exact'])
            savefig(filename)

The ``modules='numpy'`` argument to ``lambdify`` is important
if there are mathematical functions, such as ``sin`` or ``exp``
in the symbolic expressions in ``f`` or ``u``, and these
mathematical functions are to be used with vector arguments, like
``xcoor`` above.

Both the ``least_squares`` and
``comparison_plot``
are found and coded in the file
`approx1D.py <http://tinyurl.com/jvzzcfn/fem/approx1D.py>`_.
The forthcoming examples on their use appear in
``ex_approx1D.py``.


.. _fem:approx:global:exact:

Perfect approximation
---------------------

Let us use the code above to recompute the problem from
the section :ref:`fem:approx:global:linear` where we want to approximate
a parabola. What happens if we add an element :math:`x^2` to the basis and test what
the best approximation is if :math:`V` is the space of all parabolic functions?
The answer is quickly found by running


.. code-block:: python

        >>> from approx1D import *
        >>> x = sm.Symbol('x')
        >>> f = 10*(x-1)**2-1
        >>> u = least_squares(f=f, psi=[1, x, x**2], Omega=[1, 2])
        >>> print u
        10*x**2 - 20*x + 9
        >>> print sm.expand(f)
        10*x**2 - 20*x + 9


Now, what if we use :math:`{\psi}_i(x)=x^i` for :math:`i=0,1,\ldots,N=40`?
The output from ``least_squares`` gives :math:`c_i=0` for :math:`i>2`, which
means that the method finds the perfect approximation.

In fact, we have a general result that
if :math:`f\in V`, the least squares and projection/Galerkin methods compute
the exact solution :math:`u=f`.
The proof is straightforward: if :math:`f\in V`, :math:`f` can be expanded in
terms of the basis functions, :math:`f=\sum_{j\in{I}} d_j{\psi}_j`, for
some coefficients :math:`\left\{ {d}_i \right\}_{i\in{I}}`,
and the right-hand side then has entries


.. math::
         b_i = (f,{\psi}_i) = \sum_{j\in{I}} d_j({\psi}_j, {\psi}_i) = \sum_{j\in{I}} d_jA_{i,j}
        {\thinspace .}  

The linear system :math:`\sum_jA_{i,j}c_j = b_i`, :math:`i\in{I}`, is then


.. math::
         \sum_{j\in{I}} c_jA_{i,j} = \sum_{j\in{I}}d_jA_{i,j},
        \quad i\in{I},

which implies that :math:`c_i=d_i` for :math:`i\in{I}`.

.. _fem:approx:global:illconditioning:

Ill-conditioning
----------------

The computational example in the section :ref:`fem:approx:global:exact`
applies the ``least_squares`` function which invokes symbolic
methods to calculate and solve the linear system. The correct
solution :math:`c_0=9, c_1=-20, c_2=10, c_i=0` for :math:`i\geq 3` is perfectly
recovered.

Suppose we
convert the matrix and right-hand side to floating-point arrays
and then solve the system using finite-precision arithmetics, which
is what one will (almost) always do in real life. This time we
get astonishing results! Up to about :math:`N=7` we get a solution that
is reasonably close to the exact one. Increasing :math:`N` shows that
seriously wrong coefficients are computed.
Below is a table showing the solution of the linear system arising from
approximating a parabola
by functions on the form :math:`u(x)=c_0 + c_1x + c_2x^2 + \cdots + c_{10}x^{10}`.
Analytically, we know that :math:`c_j=0` for :math:`j>2`, but numerically we may get
:math:`c_j\neq 0` for :math:`j>2`.

===========  ===========  ===========  ===========  
   exact      ``sympy``   ``numpy32``  ``numpy64``  
===========  ===========  ===========  ===========  
          9         9.62         5.57         8.98  
        -20       -23.39        -7.65       -19.93  
         10        17.74        -4.50         9.96  
          0        -9.19         4.13        -0.26  
          0         5.25         2.99         0.72  
          0         0.18        -1.21        -0.93  
          0        -2.48        -0.41         0.73  
          0         1.81       -0.013        -0.36  
          0        -0.66         0.08         0.11  
          0         0.12         0.04        -0.02  
          0       -0.001        -0.02        0.002  
===========  ===========  ===========  ===========  

The exact value of :math:`c_j`, :math:`j=0,1,\ldots,10`, appears in the first
column while the other columns correspond to results obtained
by three different methods:

  * Column 2: The matrix and vector are converted to
    the data structure  ``sympy.mpmath.fp.matrix`` and the
    ``sympy.mpmath.fp.lu_solve`` function is used to solve the system.

  * Column 3: The matrix and vector are converted to
    ``numpy`` arrays with data type ``numpy.float32``
    (single precision floating-point number) and solved by
    the ``numpy.linalg.solve`` function.

  * Column 4: As column 3, but the data type is
    ``numpy.float64`` (double
    precision floating-point number).

We see from the numbers in the table that
double precision performs much better than single precision.
Nevertheless, when plotting all these solutions the curves cannot be
visually distinguished (!). This means that the approximations look
perfect, despite the partially very wrong values of the coefficients.

Increasing :math:`N` to 12 makes the numerical solver in ``numpy``
abort with the message: "matrix is numerically singular".
A matrix has to be non-singular to be invertible, which is a requirement
when solving a linear system. Already when the matrix is close to
singular, it is *ill-conditioned*, which here implies that
the numerical solution algorithms are sensitive to round-off
errors and may produce (very) inaccurate results.

The reason why the coefficient matrix is nearly singular and
ill-conditioned is that our basis functions :math:`{\psi}_i(x)=x^i` are
nearly linearly dependent for large :math:`i`.  That is, :math:`x^i` and :math:`x^{i+1}`
are very close for :math:`i` not very small. This phenomenon is
illustrated in Figure :ref:`fem:approx:global:fig:illconditioning`.
There are 15 lines in this figure, but only half of them are
visually distinguishable.
Almost linearly dependent basis functions give rise to an
ill-conditioned and almost singular matrix.  This fact can be
illustrated by computing the determinant, which is indeed very close
to zero (recall that a zero determinant implies a singular and
non-invertible matrix): :math:`10^{-65}` for :math:`N=10` and :math:`10^{-92}` for
:math:`N=12`. Already for :math:`N=28` the numerical determinant computation
returns a plain zero.


.. _fem:approx:global:fig:illconditioning:

.. figure:: ill_conditioning.png
   :width: 600

   The 15 first basis functions :math:`x^i`, :math:`i=0,\ldots,14`


On the other hand, the double precision ``numpy`` solver do run for
:math:`N=100`, resulting in answers that are not significantly worse than
those in the table above, and large powers are
associated with small coefficients (e.g., :math:`c_j<10^{-2}` for :math:`10\leq
j\leq 20` and :math:`c<10^{-5}` for :math:`j>20`). Even for :math:`N=100` the
approximation still lies on top of the exact curve in a plot (!).

The conclusion is that visual inspection of the quality of the approximation
may not uncover fundamental numerical problems with the computations.
However, numerical analysts have studied approximations and ill-conditioning
for decades, and it is well known that the basis :math:`\{1,x,x^2,x^3,\ldots,\}`
is a bad basis. The best basis from a matrix conditioning point of view
is to have orthogonal functions such that :math:`(\psi_i,\psi_j)=0` for
:math:`i\neq j`. There are many known sets of orthogonal polynomials and
other functions.
The functions used in the finite element methods are almost orthogonal,
and this property helps to avoid problems with solving matrix systems.
Almost orthogonal is helpful, but not enough when it comes to
partial differential equations, and ill-conditioning
of the coefficient matrix is a theme when solving large-scale matrix
systems arising from finite element discretizations.

.. _fem:approx:global:Fourier:

Fourier series
--------------

.. index::
   single: approximation; by sines


A set of sine functions is widely used for approximating functions
(the sines are also orthogonal as explained more in the section :ref:`fem:approx:global:illconditioning`).  Let us take


.. math::
        
        V = \hbox{span}\,\{ \sin \pi x, \sin 2\pi x,\ldots,\sin (N+1)\pi x\}
        {\thinspace .}  

That is,


.. math::
         {\psi}_i(x) = \sin ((i+1)\pi x),\quad i\in{I}{\thinspace .} 

An approximation to the :math:`f(x)` function from
the section :ref:`fem:approx:global:linear` can then be computed by the
``least_squares`` function from the section :ref:`fem:approx:global:LS:code`:


.. code-block:: python

        N = 3
        from sympy import sin, pi
        x = sm.Symbol('x')
        psi = [sin(pi*(i+1)*x) for i in range(N+1)]
        f = 10*(x-1)**2 - 1
        Omega = [0, 1]
        u = least_squares(f, psi, Omega)
        comparison_plot(f, u, Omega)

Figure :ref:`fem:approx:global:fig:parabola:sine1` (left) shows the oscillatory approximation
of :math:`\sum_{j=0}^Nc_j\sin ((j+1)\pi x)` when :math:`N=3`.
Changing :math:`N` to 11 improves the approximation considerably, see
Figure :ref:`fem:approx:global:fig:parabola:sine1` (right).


.. _fem:approx:global:fig:parabola:sine1:

.. figure:: parabola_ls_sines4_12.png
   :width: 800

   *Best approximation of a parabola by a sum of 3 (left) and 11 (right) sine functions*


There is an error :math:`f(0)-u(0)=9` at :math:`x=0` in Figure :ref:`fem:approx:global:fig:parabola:sine1` regardless of how large :math:`N` is, because all :math:`{\psi}_i(0)=0` and hence
:math:`u(0)=0`. We may help the approximation to be correct at :math:`x=0` by
seeking


.. math::
        
        u(x) = f(0) + \sum_{j\in{I}} c_j{\psi}_j(x)
        {\thinspace .}
        

However, this adjustment introduces a new problem at :math:`x=1` since
we now get an error :math:`f(1)-u(1)=f(1)-0=-1` at this point. A more
clever adjustment is to replace the :math:`f(0)` term by a term that
is :math:`f(0)` at :math:`x=0` and :math:`f(1)` at :math:`x=1`. A simple linear combination
:math:`f(0)(1-x) + xf(1)` does the job:

.. math::
        
        u(x) = f(0)(1-x) + xf(1) + \sum_{j\in{I}} c_j{\psi}_j(x)
        {\thinspace .}
        

This adjustment of :math:`u` alters the linear system slightly as we get an extra
term :math:`-(f(0)(1-x) + xf(1),{\psi}_i)` on the right-hand side.
Figure :ref:`fem:approx:global:fig:parabola:sine2` shows the result
of this technique for
ensuring right boundary values: even 3 sines can now adjust the
:math:`f(0)(1-x) + xf(1)` term such that :math:`u` approximates the parabola really
well, at least visually.


.. _fem:approx:global:fig:parabola:sine2:

.. figure:: parabola_ls_sines4_12_wfterm.png
   :width: 800

   *Best approximation of a parabola by a sum of 3 (left) and 11 (right) sine functions with a boundary term*



.. _fem:approx:global:orth:

Orthogonal basis functions
--------------------------

The choice of sine functions :math:`{\psi}_i(x)=\sin ((i+1)\pi x)` has a great
computational advantage: on :math:`\Omega=[0,1]` these basis functions are
*orthogonal*, implying that :math:`A_{i,j}=0` if :math:`i\neq j`. This
result is realized by trying


.. code-block:: python

        integrate(sin(j*pi*x)*sin(k*pi*x), x, 0, 1)

in `WolframAlpha <http://wolframalpha.com>`_
(avoid ``i`` in the integrand as this symbol means
the imaginary unit :math:`\sqrt{-1}`).
Also by asking WolframAlpha
about :math:`\int_0^1\sin^2 (j\pi x) {\, \mathrm{d}x}`, we find it
to equal 1/2.
With a diagonal matrix we can easily solve for the coefficients
by hand:


.. math::
        
        c_i = 2\int_0^1 f(x)\sin ((i+1)\pi x) {\, \mathrm{d}x},\quad i\in{I},
        

which is nothing but the classical formula for the coefficients of
the Fourier sine series of :math:`f(x)` on :math:`[0,1]`. In fact, when
:math:`V` contains the basic functions used in a Fourier series expansion,
the approximation method derived in the section :ref:`fem:approx:global`
results in the classical Fourier series for :math:`f(x)` (see :ref:`fem:approx:exer:Fourier`
for details).

With orthogonal basis functions we can make the
``least_squares`` function (much) more efficient since we know that
the matrix is diagonal and only the diagonal elements need to be computed:


.. code-block:: python

        def least_squares_orth(f, psi, Omega):
            N = len(psi) - 1
            A = [0]*(N+1)
            b = [0]*(N+1)
            x = sm.Symbol('x')
            for i in range(N+1):
                A[i] = sm.integrate(psi[i]**2, (x, Omega[0], Omega[1]))
                b[i] = sm.integrate(psi[i]*f,  (x, Omega[0], Omega[1]))
            c = [b[i]/A[i] for i in range(len(b))]
            u = 0
            for i in range(len(psi)):
                u += c[i]*psi[i]
            return u

This function is found in the file ``approx1D.py``.

.. _fem:approx:global:interp:

The interpolation (or collocation) method
-----------------------------------------


.. index:: collocation method (approximation)


.. index::
   single: approximation; collocation


The principle of minimizing the distance between :math:`u` and :math:`f` is
an intuitive way of computing a best approximation :math:`u\in V` to :math:`f`.
However, there are other approaches as well.
One is to demand that :math:`u(x_{i}) = f(x_{i})` at some selected points
:math:`x_{i}`, :math:`i\in{I}`:


.. math::
        
        u(x_{i}) = \sum_{j\in{I}} c_j {\psi}_j(x_{i}) = f(x_{i}),
        \quad i\in{I}{\thinspace .} 

This criterion also gives a linear system
with :math:`N+1` unknown coefficients :math:`\left\{ {c}_i \right\}_{i\in{I}}`:


.. math::
        
        \sum_{j\in{I}} A_{i,j}c_j = b_i,\quad i\in{I},
        

with


.. math::
        
        A_{i,j} = {\psi}_j(x_{i}),
        



.. math::
          
        b_i = f(x_{i}){\thinspace .}  

This time the coefficient matrix is not symmetric because
:math:`{\psi}_j(x_{i})\neq {\psi}_i(x_{j})` in general.
The method is often referred to as an *interpolation method*
since some point values of :math:`f` are given (:math:`f(x_{i})`) and we
fit a continuous function :math:`u` that goes through the :math:`f(x_{i})` points.
In this case the :math:`x_{i}` points are called *interpolation points*.
When the same approach is used to approximate differential equations,
one usually applies the name *collocation method* and
:math:`x_{i}` are known as *collocation points*.


.. index:: interpolation


.. index::
   single: approximation; interpolation


Given :math:`f`  as a ``sympy`` symbolic expression ``f``, :math:`\left\{ {{\psi}}_i \right\}_{i\in{I}}`
as a list ``psi``, and a set of points :math:`\left\{ {x}_i \right\}_{i\in{I}}`  as a list or array
``points``, the following Python function sets up and solves the matrix system
for the coefficients :math:`\left\{ {c}_i \right\}_{i\in{I}}`:


.. code-block:: python

        def interpolation(f, psi, points):
            N = len(psi) - 1
            A = sm.zeros((N+1, N+1))
            b = sm.zeros((N+1, 1))
            x = sm.Symbol('x')
            # Turn psi and f into Python functions
            psi = [sm.lambdify([x], psi[i]) for i in range(N+1)]
            f = sm.lambdify([x], f)
            for i in range(N+1):
                for j in range(N+1):
                    A[i,j] = psi[j](points[i])
                b[i,0] = f(points[i])
            c = A.LUsolve(b)
            u = 0
            for i in range(len(psi)):
                u += c[i,0]*psi[i](x)
            return u

The ``interpolation`` function is a part of the ``approx1D``
module.

We found it convenient in the above function to turn the expressions ``f`` and
``psi`` into ordinary Python functions of ``x``, which can be called with
``float`` values in the list ``points`` when building the matrix and
the right-hand side. The alternative is to use the ``subs`` method
to substitute the ``x`` variable in an expression by an element from
the ``points`` list. The following session illustrates both approaches
in a simple setting:


        >>> from sympy import *
        >>> x = Symbol('x')
        >>> e = x**2              # symbolic expression involving x
        >>> p = 0.5               # a value of x
        >>> v = e.subs(x, p)      # evaluate e for x=p
        >>> v
        0.250000000000000
        >>> type(v)
        sympy.core.numbers.Float
        >>> e = lambdify([x], e)  # make Python function of e
        >>> type(e)
        >>> function
        >>> v = e(p)              # evaluate e(x) for x=p
        >>> v
        0.25
        >>> type(v)
        float





A nice feature of the interpolation or collocation method is that it
avoids computing integrals. However, one has to decide on the location
of the :math:`x_{i}` points.  A simple, yet common choice, is to
distribute them uniformly throughout :math:`\Omega`.

Example  (1)
~~~~~~~~~~~~

Let us illustrate the interpolation or collocation method by approximating
our parabola :math:`f(x)=10(x-1)^2-1` by a linear function on :math:`\Omega=[1,2]`,
using two collocation points :math:`x_0=1+1/3` and :math:`x_1=1+2/3`:


.. code-block:: python

        f = 10*(x-1)**2 - 1
        psi = [1, x]
        Omega = [1, 2]
        points = [1 + sm.Rational(1,3), 1 + sm.Rational(2,3)]
        u = interpolation(f, psi, points)
        comparison_plot(f, u, Omega)

The resulting linear system becomes


.. math::
        
        \left(\begin{array}{ll}
        1 & 4/3\\ 
        1 & 5/3\\ 
        \end{array}\right)
        \left(\begin{array}{l}
        c_0\\ 
        c_1\\ 
        \end{array}\right)
        =
        \left(\begin{array}{l}
        1/9\\ 
        31/9\\ 
        \end{array}\right)
        

with solution :math:`c_0=-119/9` and :math:`c_1=10`.
Figure :ref:`fem:approx:global:linear:interp:fig1` (left) shows the resulting
approximation :math:`u=-119/9 + 10x`.
We can easily test other interpolation points, say :math:`x_0=1` and :math:`x_1=2`.
This changes the line quite significantly, see
Figure :ref:`fem:approx:global:linear:interp:fig1` (right).


.. _fem:approx:global:linear:interp:fig1:

.. figure:: parabola_inter.png
   :width: 800

   *Approximation of a parabola by linear functions computed by two interpolation points: 4/3 and 5/3 (left) versus 1 and 2 (right)*


.. _fem:approx:global:Lagrange:

Lagrange polynomials
--------------------

.. index:: Lagrange (interpolating) polynomial


In the section :ref:`fem:approx:global:Fourier` we explain the advantage with having
a diagonal matrix: formulas for the coefficients :math:`\left\{ {c}_i \right\}_{i\in{I}}` can
then be derived by hand. For an interpolation/collocation method a
diagonal matrix implies that
:math:`{\psi}_j(x_{i}) = 0` if :math:`i\neq j`. One set of basis functions :math:`{\psi}_i(x)`
with this property is the *Lagrange interpolating polynomials*,
or just *Lagrange polynomials*. (Although the functions are named
after Lagrange, they were first discovered by Waring in 1779,
rediscovered by Euler in 1783, and published by Lagrange in 1795.)
The Lagrange polynomials have the form


.. math::
   :label: fem:approx:global:Lagrange:poly
        
        {\psi}_i(x) =
        \prod_{j=0,j\neq i}^N
        \frac{x-x_{j}}{x_{i}-x_{j}}
        = \frac{x-x_0}{x_{i}-x_0}\cdots\frac{x-x_{i-1}}{x_{i}-x_{i-1}}\frac{x-x_{i+1}}{x_{i}-x_{i+1}}
        \cdots\frac{x-x_N}{x_{i}-x_N},
        
        

for :math:`i\in{I}`.
We see from :eq:`fem:approx:global:Lagrange:poly` that all the :math:`{\psi}_i`
functions are polynomials of degree :math:`N` which have the property


.. index:: Kronecker delta



.. math::
   :label: fem:inter:prop
        
        {\psi}_i(x_s) = \delta_{is},\quad \delta_{is} =
        \left\lbrace\begin{array}{ll}
        1, & i=s,\\ 
        0, & i\neq s,
        \end{array}\right.
        
        

when :math:`x_s` is an interpolation/collocation point.
Here we have used the *Kronecker delta* symbol :math:`\delta_{is}`.
This property implies that :math:`A_{i,j}=0` for :math:`i\neq j` and
:math:`A_{i,j}=1` when :math:`i=j`. The solution of the linear system is
them simply


.. math::
        
        c_i = f(x_{i}),\quad i\in{I},
        

and


.. math::
        
        u(x) = \sum_{j\in{I}} f(x_{i}){\psi}_i(x){\thinspace .}  


The following function computes the Lagrange interpolating polynomial
:math:`{\psi}_i(x)`, given the interpolation points :math:`x_{0},\ldots,x_{N}` in
the list or array ``points``:


.. code-block:: python

        def Lagrange_polynomial(x, i, points):
            p = 1
            for k in range(len(points)):
                if k != i:
                    p *= (x - points[k])/(points[i] - points[k])
            return p

The next function computes a complete basis using equidistant points throughout
:math:`\Omega`:


.. code-block:: python

        def Lagrange_polynomials_01(x, N):
            if isinstance(x, sm.Symbol):
                h = sm.Rational(1, N-1)
            else:
                h = 1.0/(N-1)
            points = [i*h for i in range(N)]
            psi = [Lagrange_polynomial(x, i, points) for i in range(N)]
            return psi, points

When ``x`` is an ``sm.Symbol`` object, we let the
spacing between
the interpolation points, ``h``, be a ``sympy`` rational number
for nice end results in the formulas for :math:`{\psi}_i`.
The other case, when ``x`` is a plain Python ``float``,
signifies numerical computing, and then we let ``h`` be a floating-point
number.
Observe that the ``Lagrange_polynomial`` function works equally well
in the symbolic and numerical case - just think of ``x`` being an
``sm.Symbol`` object or a Python ``float``.
A little interactive session illustrates the difference between symbolic
and numerical computing of the basis functions and points:


        >>> import sympy as sm
        >>> x = sm.Symbol('x')
        >>> psi, points = Lagrange_polynomials_01(x, N=3)
        >>> points
        [0, 1/2, 1]
        >>> psi
        [(1 - x)*(1 - 2*x), 2*x*(2 - 2*x), -x*(1 - 2*x)]
        
        >>> x = 0.5  # numerical computing
        >>> psi, points = Lagrange_polynomials_01(x, N=3)
        >>> points
        [0.0, 0.5, 1.0]
        >>> psi
        [-0.0, 1.0, 0.0]

The Lagrange polynomials are very much used in finite element methods
because of their property :eq:`fem:inter:prop`.

Approximation of a polynomial
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Galerkin or least squares method lead to an exact approximation
if :math:`f` lies in the space spanned by the basis functions. It could be
interest to see how the interpolation method with Lagrange
polynomials as basis is able to approximate a polynomial, e.g.,
a parabola. Running


.. code-block:: python

        for N in 2, 4, 5, 6, 8, 10, 12:
            f = x**2
            psi, points = Lagrange_polynomials_01(x, N)
            u = interpolation(f, psi, points)

shows the result that up to ``N=4`` we achieve an exact approximation,
and then round-off errors start to grow, such that
``N=15`` leads to a 15-degree polynomial for :math:`u` where
the coefficients in front of :math:`x^r` for :math:`r>2` are
of size :math:`10^{-5}` and smaller.

Successful example
~~~~~~~~~~~~~~~~~~

Trying out the Lagrange polynomial basis for approximating
:math:`f(x)=\sin 2\pi x` on :math:`\Omega =[0,1]` with the least squares
and the interpolation techniques can be done by


.. code-block:: python

        x = sm.Symbol('x')
        f = sm.sin(2*sm.pi*x)
        psi, points = Lagrange_polynomials_01(x, N)
        Omega=[0, 1]
        u = least_squares(f, psi, Omega)
        comparison_plot(f, u, Omega)
        u = interpolation(f, psi, points)
        comparison_plot(f, u, Omega)

Figure :ref:`fem:approx:global:Lagrange:fig:sine:ls:colloc` shows the results.
There is little difference between the least squares and the interpolation
technique. Increasing :math:`N` gives visually better approximations.


.. _fem:approx:global:Lagrange:fig:sine:ls:colloc:

.. figure:: Lagrange_ls_interp_sin_4.png
   :width: 800

   *Approximation via least squares (left) and interpolation (right) of a sine function by Lagrange interpolating polynomials of degree 3*



.. index:: Runge's phenomenon


Less successful example
~~~~~~~~~~~~~~~~~~~~~~~

The next example concerns interpolating :math:`f(x)=|1-2x|` on
:math:`\Omega =[0,1]` using Lagrange polynomials. Figure :ref:`fem:approx:global:Lagrange:fig:abs:Lag:unif:7:14` shows a peculiar effect: the approximation starts to oscillate
more and more as :math:`N` grows. This numerical artifact is not surprising
when looking at the individual Lagrange polynomials. Figure :ref:`fem:approx:global:Lagrange:fig:abs:Lag:unif:osc` shows two such polynomials, :math:`\psi_2(x)` and
:math:`\psi_7(x)`, both of degree 11 and computed from uniformly spaced
points :math:`x_{x_i}=i/11`, :math:`i=0,\ldots,11`, marked with circles.
We clearly see the property of Lagrange polynomials:
:math:`\psi_2(x_{i})=0` and :math:`\psi_7(x_{i})=0` for all :math:`i`,
except :math:`\psi_2(x_{2})=1` and :math:`\psi_7(x_{7})=1`.
The most striking feature, however, is the significant oscillation
near the boundary. The reason is easy to understand:
since we force the functions to zero at so many points,
a polynomial of high degree is forced to oscillate between
the points.
The phenomenon is named *Runge's phenomenon* and you can read
a more detailed explanation on `Wikipedia <http://en.wikipedia.org/wiki/Runge%27s_phenomenon>`_.


.. index:: Chebyshev nodes


Remedy for strong oscillations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The oscillations can be reduced by a more clever choice of
interpolation points, called the *Chebyshev nodes*:


.. math::
        
        x_{i} = \frac{1}{2} (a+b) + \frac{1}{2}(b-a)\cos\left( \frac{2i+1}{2(N+1)}pi\right),\quad i=0\ldots,N,
        

on the interval :math:`\Omega = [a,b]`.
Here is a flexible version of the ``Lagrange_polynomials_01`` function above,
valid for any interval :math:`\Omega =[a,b]` and with the possibility to generate
both uniformly distributed points and Chebyshev nodes:


.. code-block:: python

        def Lagrange_polynomials(x, N, Omega, point_distribution='uniform'):
            if point_distribution == 'uniform':
                if isinstance(x, sm.Symbol):
                    h = sm.Rational(Omega[1] - Omega[0], N)
                else:
                    h = (Omega[1] - Omega[0])/float(N)
                points = [Omega[0] + i*h for i in range(N+1)]
            elif point_distribution == 'Chebyshev':
                points = Chebyshev_nodes(Omega[0], Omega[1], N)
            psi = [Lagrange_polynomial(x, i, points) for i in range(N+1)]
            return psi, points
        
        def Chebyshev_nodes(a, b, N):
            from math import cos, pi
            return [0.5*(a+b) + 0.5*(b-a)*cos(float(2*i+1)/(2*N+1))*pi) \ 
                    for i in range(N+1)]

All the functions computing Lagrange polynomials listed
above are found in the module file ``Lagrange.py``.
Figure :ref:`fem:approx:global:Lagrange:fig:abs:Lag:Cheb:7:14` shows the improvement of
using Chebyshev nodes (compared with Figure :ref:`fem:approx:global:Lagrange:fig:abs:Lag:unif:7:14`). The reason is that the corresponding Lagrange
polynomials have much smaller oscillations as seen in
Figure :ref:`fem:approx:global:Lagrange:fig:abs:Lag:Cheb:osc`
(compare with Figure :ref:`fem:approx:global:Lagrange:fig:abs:Lag:unif:osc`).

Another cure for undesired oscillation of higher-degree interpolating
polynomials is to use lower-degree Lagrange
polynomials on many small patches of the domain, which is the idea
pursued in the finite element method. For instance, linear Lagrange
polynomials on :math:`[0,1/2]` and :math:`[1/2,1]` would yield a perfect
approximation to :math:`f(x)=|1-2x|` on :math:`\Omega = [0,1]`
since :math:`f` is piecewise linear.


.. _fem:approx:global:Lagrange:fig:abs:Lag:unif:7:14:

.. figure:: Lagrange_interp_abs_8_15.png
   :width: 800

   *Interpolation of an absolute value function by Lagrange polynomials and uniformly distributed interpolation points: degree 7 (left) and 14 (right)*



.. _fem:approx:global:Lagrange:fig:abs:Lag:unif:osc:

.. figure:: Lagrange_basis_12.png
   :width: 400

   *Illustration of the oscillatory behavior of two Lagrange polynomials based on 12 uniformly spaced points (marked by circles)*



.. _fem:approx:global:Lagrange:fig:abs:Lag:Cheb:7:14:

.. figure:: Lagrange_interp_abs_Cheb_8_15.png
   :width: 800

   *Interpolation of an absolute value function by Lagrange polynomials and Chebyshev nodes as interpolation points: degree 7 (left) and 14 (right)*



.. _fem:approx:global:Lagrange:fig:abs:Lag:Cheb:osc:

.. figure:: Lagrange_basis_12.png
   :width: 400

   *Illustration of the less oscillatory behavior of two Lagrange polynomials based on 12 Chebyshev points (marked by circles)*


How does the least squares or projection methods work with Lagrange
polynomials?
Unfortunately, ``sympy`` has problems integrating the :math:`f(x)=|1-2x|`
function times a polynomial. Other choices of :math:`f(x)` can also
make the symbolic integration fail. Therefore, we should extend
the ``least_squares`` function such that it falls back on
numerical integration if the symbolic integration is unsuccessful.
In the latter case, the returned value from ``sympy``'s
``integrate`` function is an object of type ``Integral``.
We can test on this type and utilize the ``mpmath`` module in
``sympy`` to perform numerical integration of high precision.
Here is the code:


.. code-block:: python

        def least_squares(f, psi, Omega):
            N = len(psi) - 1
            A = sm.zeros((N+1, N+1))
            b = sm.zeros((N+1, 1))
            x = sm.Symbol('x')
            for i in range(N+1):
                for j in range(i, N+1):
                    integrand = psi[i]*psi[j]
                    I = sm.integrate(integrand, (x, Omega[0], Omega[1]))
                    if isinstance(I, sm.Integral):
                        # Could not integrate symbolically, fallback
                        # on numerical integration with mpmath.quad
                        integrand = sm.lambdify([x], integrand)
                        I = sm.mpmath.quad(integrand, [Omega[0], Omega[1]])
                    A[i,j] = A[j,i] = I
                integrand = psi[i]*f
                I = sm.integrate(integrand, (x, Omega[0], Omega[1]))
                if isinstance(I, sm.Integral):
                    integrand = sm.lambdify([x], integrand)
                    I = sm.mpmath.quad(integrand, [Omega[0], Omega[1]])
                b[i,0] = I
            c = A.LUsolve(b)
            u = 0
            for i in range(len(psi)):
                u += c[i,0]*psi[i]
            return u



.. Convergence of Lagrange polynomials.





.. _fem:approx:fe:

Finite element basis functions
==============================

The specific basis functions exemplified in the section :ref:`fem:approx:global` are in general nonzero on the entire domain
:math:`\Omega`, see Figure :ref:`fem:approx:fe:fig:u:sin` for an example
where we plot :math:`\psi_0(x)=\sin\frac{1}{2}\pi x` and
:math:`\psi_1(x)=\sin 2\pi x` together with a possible sum
:math:`u(x)=4\psi_0(x) - \frac{1}{2}\psi_1(x)`. We shall
now turn the attention to basis functions that have *compact support*,
meaning that they are nonzero on only a small portion of
:math:`\Omega`. Moreover, we shall restrict the functions to be *piecewise
polynomials*. This means that the domain is split into subdomains and
the function is a polynomial on one or more subdomains, see Figure
:ref:`fem:approx:fe:fig:u:fe` for a sketch involving locally defined
hat functions that make :math:`u=\sum_jc_j{\psi}_j` piecewise linear. At
the boundaries between subdomains one normally forces continuity of
the function only so that when connecting two polynomials from two
subdomains, the derivative becomes discontinuous. These type
of basis functions are fundamental in the finite element method.


.. _fem:approx:fe:fig:u:sin:

.. figure:: u_example_sin.png
   :width: 600

   *A function resulting from adding two sine basis functions*



.. _fem:approx:fe:fig:u:fe:

.. figure:: u_example_P1.png
   :width: 600

   *A function resulting from adding three local piecewise linear (hat) functions*


We first introduce the concepts of elements and nodes in a simplistic fashion
as often met in the literature. Later, we shall generalize the concept
of an element, which is a necessary step to treat a wider class of
approximations within the family of finite element methods.
The generalization is also compatible with
the concepts used in the `FEniCS <http://fenicsproject.org>`_ finite
element software.

.. _fem:approx:fe:def:elements:nodes:

Elements and nodes
------------------

Let us divide the interval :math:`\Omega` on which :math:`f` and :math:`u` are defined
into non-overlapping subintervals :math:`\Omega^{(e)}`, :math:`e=0,\ldots,N_e`:


.. math::
        
        \Omega = \Omega^{(0)}\cup \cdots \cup \Omega^{(N_e)}{\thinspace .}  

We shall for now
refer to :math:`\Omega^{(e)}` as an *element*, having number :math:`e`.
On each element we introduce a set of points called *nodes*.
For now we assume that the nodes are uniformly spaced throughout the
element and that the boundary points of the elements are also nodes.
The nodes are given numbers both within an element and in the global
domain. These are
referred to as *local* and *global* node numbers, respectively.
Figure :ref:`fem:approx:fe:def:elements:nodes:fig:P1` shows
element boundaries with small vertical lines, nodes as small disks,
element numbers in circles, and global node numbers under the nodes.


.. _fem:approx:fe:def:elements:nodes:fig:P1:

.. figure:: fe_mesh1D.png
   :width: 500

   *Finite element mesh with 5 elements and 6 nodes*



.. index:: finite element mesh

.. index::
   single: mesh; finite elements


Nodes and elements uniquely define a *finite element mesh*, which is our
discrete representation of the domain in the computations.
A common special case is that of a *uniformly partitioned mesh* where
each element has the same length and the distance between nodes is constant.

Example  (2)
~~~~~~~~~~~~

On :math:`\Omega =[0,1]` we may introduce two elements,
:math:`\Omega^{(0)}=[0,0.4]` and :math:`\Omega^{(1)}=[0.4,1]`. Furthermore,
let us introduce three nodes
per element, equally spaced within each element.
Figure :ref:`fem:approx:fe:def:elements:nodes:fig:P2` shows the
mesh.
The three nodes in element number 0 are :math:`x_0=0`, :math:`x_1=0.2`, and :math:`x_2=0.4`.
The local and global node numbers are here equal.
In element number 1, we have the local nodes :math:`x_0=0.4`, :math:`x_1=0.7`, and :math:`x_2=1`
and the corresponding
global nodes :math:`x_2=0.4`, :math:`x_3=0.7`, and :math:`x_4=1`. Note that
the global node :math:`x_2=0.4` is shared by the two elements.


.. _fem:approx:fe:def:elements:nodes:fig:P2:

.. figure:: fe_mesh1D_P2.png
   :width: 500

   *Finite element mesh with 2 elements and 5 nodes*


For the purpose of implementation, we introduce two lists or arrays:
``nodes`` for storing the coordinates of the nodes, with the
global node numbers as indices, and ``elements`` for holding
the global node numbers in each element, with the local node numbers
as indices. The ``nodes`` and ``elements`` lists for the sample mesh
above take the form


.. code-block:: python

        nodes = [0, 0.2, 0.4, 0.7, 1]
        elements = [[0, 1, 2], [2, 3, 4]]

Looking up the coordinate of local node number 2 in element 1
is here done by ``nodes[elements[1][2]]`` (recall that nodes and
elements start their numbering at 0).

The numbering of elements and nodes does not need to be regular.
Figure :ref:`fem:approx:fe:def:elements:nodes:fig:P1:irregular` shows
and example corresponding to


.. code-block:: python

        nodes = [1.5, 5.5, 4.2, 0.3, 2.2, 3.1]
        elements = [[2, 1], [4, 5], [0, 4], [3, 0], [5, 2]]



.. _fem:approx:fe:def:elements:nodes:fig:P1:irregular:

.. figure:: fe_mesh1D_random_numbering.png
   :width: 500

   *Example on irregular numbering of elements and nodes*


The basis functions
-------------------

Construction principles
~~~~~~~~~~~~~~~~~~~~~~~

Finite element basis functions are in this text recognized by
the notation :math:`{\varphi}_i(x)`, where the index now in the beginning corresponds to
a global node number. In the current approximation problem we shall
simply take :math:`{\psi}_i = {\varphi}_i`.

Let :math:`i` be the global node number corresponding to local node :math:`r` in
element number :math:`e`.  The finite element basis functions :math:`{\varphi}_i`
are now defined as follows.

  * If local node number :math:`r` is not on the boundary of the element,
    take :math:`{\varphi}_i(x)` to be the Lagrange
    polynomial that is 1 at the local node number :math:`r` and zero
    at all other nodes in the element. On all other elements, :math:`{\varphi}_i=0`.

  * If local node number :math:`r` is on the boundary of the element,
    let :math:`{\varphi}_i` be made up of the Lagrange polynomial that is 1 at this node
    in element number :math:`e` and its neighboring element.
    On all other elements, :math:`{\varphi}_i=0`.

A visual impression of three such basis functions are given in
Figure :ref:`fem:approx:fe:fig:P2`.

.. Sometimes we refer to a Lagrange polynomial on an element :math:`e`, which

.. means the basis function :math:`{\varphi}_i(x)` when :math:`x\in\Omega^{(e)}`, and

.. :math:`{\varphi}_i(x)=0` when :math:`x\notin\Omega^{(e)}`.




.. _fem:approx:fe:fig:P2:

.. figure:: mpl_fe_basis_p2_4e_lab.png
   :width: 600

   *Illustration of the piecewise quadratic basis functions associated with nodes in element 1*


Properties of :math:`{\varphi}_i`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The construction of basis functions according to the principles above
lead to two important properties of :math:`{\varphi}_i(x)`. First,


.. index:: Kronecker delta



.. math::
   :label: fem:approx:fe:phi:prop1
        
        {\varphi}_i(x_{j}) =\delta_{ij},\quad \delta_{ij} =
        \left\lbrace\begin{array}{ll}
        1, & i=j,\\ 
        0, & i\neq j,
        \end{array}\right.
        
        

when :math:`x_{j}` is a node in the mesh with global node number :math:`j`.
The
result :math:`{\varphi}_i(x_{j}) =\delta_{ij}` arises
because the Lagrange polynomials are constructed to have
exactly this property.
The property also implies a convenient interpretation of :math:`c_i`
as the value of :math:`u` at node :math:`i`. To show this, we expand :math:`u`
in the usual way as :math:`\sum_jc_j{\psi}_j` and choose :math:`{\psi}_i = {\varphi}_i`:


.. math::
        
        u(x_{i}) = \sum_{j\in{I}} c_j {\psi}_j (x_{i}) =
        \sum_{j\in{I}} c_j {\varphi}_j (x_{i}) = c_i {\varphi}_i (x_{i}) = c_i
        {\thinspace .}
        

Because of this interpretation,
the coefficient :math:`c_i` is by many named :math:`u_i` or :math:`U_i`.

.. 2DO: switch to U_j?


Second,
:math:`{\varphi}_i(x)` is mostly zero throughout the domain:

 * :math:`{\varphi}_i(x) \neq 0` only on those elements that contain global node :math:`i`,

 * :math:`{\varphi}_i(x){\varphi}_j(x) \neq 0` if and only if :math:`i` and :math:`j` are global node
   numbers in the same element.

Since :math:`A_{i,j}` is the integral of
:math:`{\varphi}_i{\varphi}_j` it means that
*most of the elements in the coefficient matrix will be zero*.
We will come back to these properties and use
them actively in computations to save memory and CPU time.

We let each element have :math:`d+1` nodes, resulting in local Lagrange
polynomials of degree :math:`d`. It is not a requirement to have the same
:math:`d` value in each element, but for now we will assume so.

Example on piecewise quadratic finite element functions
-------------------------------------------------------

Figure :ref:`fem:approx:fe:fig:P2` illustrates how piecewise
quadratic basis functions can look like (:math:`d=2`). We work with the
domain :math:`\Omega = [0,1]` divided into four equal-sized elements, each having
three nodes.
The ``nodes`` and ``elements`` lists in this particular example become


.. code-block:: python

        nodes = [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0]
        elements = [[0, 1, 2], [2, 3, 4], [4, 5, 6], [6, 7, 8]]

Figure :ref:`fem:approx:fe:fig:P2:mesh` sketches the mesh and the
numbering.
Nodes are marked with circles on the :math:`x` axis and
element boundaries are marked with vertical dashed lines
in Figure :ref:`fem:approx:fe:fig:P2`.


.. _fem:approx:fe:fig:P2:

.. figure:: mpl_fe_basis_p2_4e_lab.png
   :width: 600

   *Illustration of the piecewise quadratic basis functions associated with nodes in element 1*



.. _fem:approx:fe:fig:P2:mesh:

.. figure:: fe_mesh1D_P2_ne4.png
   :width: 500

   *Sketch of mesh with 4 elements and 3 nodes per element*



Let us explain in detail how the basis functions are constructed
according to the principles.
Consider element number 1 in Figure :ref:`fem:approx:fe:fig:P2`,
:math:`\Omega^{(1)}=[0.25, 0.5]`, with local nodes
0, 1, and 2 corresponding to global nodes 2, 3, and 4.
The coordinates of these nodes are
:math:`0.25`, :math:`0.375`, and :math:`0.5`, respectively.
We define three Lagrange
polynomials on this element:

1. The polynomial that is 1 at local node 1
   (:math:`x=0.375`, global node 3) makes up the basis function
   :math:`{\varphi}_3(x)` over this element,
   with :math:`{\varphi}_3(x)=0` outside the element.

2. The Lagrange polynomial that is 1 at local node 0 is the "right
   part" of the global basis function
   :math:`{\varphi}_2(x)`. The "left part" of :math:`{\varphi}_2(x)` consists of
   a Lagrange polynomial associated with local node 2 in
   the neighboring element :math:`\Omega^{(0)}=[0, 0.25]`.

3. Finally, the polynomial that is 1 at local node 2 (global node 4)
   is the "left part" of the global basis function :math:`{\varphi}_4(x)`.
   The "right part" comes from the Lagrange polynomial that is 1 at
   local node 0 in the neighboring element :math:`\Omega^{(2)}=[0.5, 0.75]`.

As mentioned earlier,
any global basis function :math:`{\varphi}_i(x)` is zero on elements that
do not contain the node with global node number :math:`i`.

The other global functions associated with internal
nodes, :math:`{\varphi}_1`, :math:`{\varphi}_5`, and :math:`{\varphi}_7`, are all of the
same shape as the drawn :math:`{\varphi}_3`, while the global basis functions
associated with shared nodes also have the same shape, provided the
elements are of the same length.

.. This was difficult to follow:

.. The basis function :math:`{\varphi}_2(x)`, corresponding to a node on the

.. boundary of element 0 and 1, is made up of two pieces: (i) the Lagrange

.. polynomial on element 1 that is 1 at local node 0 (global node 2)

.. and zero at all other nodes in element 1, and (ii)

.. the Lagrange

.. polynomial on element 1 that is 1 at local node 2 (global node 2)

.. and zero at all other nodes in element 0. Outside the elements that

.. share global node 2, :math:`{\varphi}_2(x)=0`. The same reasoning is applied to

.. the construction of :math:`{\varphi}_4(x)` and :math:`{\varphi}_6(x)`.



.. _fem:approx:fe:fig:P1:

.. figure:: mpl_fe_basis_p1_4e_lab.png
   :width: 600

   *Illustration of the piecewise linear basis functions associated with nodes in element 1*


Example on piecewise linear finite element functions
----------------------------------------------------

Figure :ref:`fem:approx:fe:fig:P1` shows
piecewise linear basis functions (:math:`d=1`). Also here we have four elements on
:math:`\Omega = [0,1]`. Consider the element :math:`\Omega^{(1)}=[0.25,0.5]`.
Now there are no internal nodes in the elements so that all basis
functions are associated with nodes at the element boundaries and hence
made up of two Lagrange polynomials from neighboring elements.
For example, :math:`{\varphi}_1(x)` results from the Lagrange polynomial in
element 0 that is 1 at local node 1 and 0 at local node 0, combined with
the Lagrange polynomial in
element 1 that is 1 at local node 0 and 0 at local node 1.
The other basis functions are constructed similarly.

Explicit mathematical formulas are needed for :math:`{\varphi}_i(x)` in computations.
In the
piecewise linear case, one can show that


.. math::
   :label: fem:approx:fe:phi:1:formula1
        
        {\varphi}_i(x) = \left\lbrace\begin{array}{ll}
        0, & x < x_{i-1},\\ 
        (x - x_{i-1})/(x_{i} - x_{i-1}),
        & x_{i-1} \leq x < x_{i},\\ 
        1 -
        (x - x_{i})/(x_{i+1} - x_{i}),
        & x_{i} \leq x < x_{i+1},\\ 
        0, & x\geq x_{i+1}{\thinspace .}  \end{array}
        \right.
        
        

Here, :math:`x_{j}`, :math:`j=i-1,i,i+1`, denotes the coordinate of node :math:`j`.
For elements of equal length :math:`h` the formulas can be simplified to


.. math::
   :label: fem:approx:fe:phi:1:formula2
        
        {\varphi}_i(x) = \left\lbrace\begin{array}{ll}
        0, & x < x_{i-1},\\ 
        (x - x_{i-1})/h,
        & x_{i-1} \leq x < x_{i},\\ 
        1 -
        (x - x_{i})/h,
        & x_{i} \leq x < x_{i+1},\\ 
        0, & x\geq x_{i+1}
        \end{array}
        \right.
        
        



Example on piecewise cubic finite element basis functions
---------------------------------------------------------

Piecewise cubic basis functions can be defined by introducing four
nodes per element. Figure :ref:`fem:approx:fe:fig:P3` shows
examples on :math:`{\varphi}_i(x)`, :math:`i=3,4,5,6`, associated with element number 1.
Note that :math:`{\varphi}_4` and :math:`{\varphi}_5` are nonzero on element number 1,
while
:math:`{\varphi}_3` and :math:`{\varphi}_6` are made up of Lagrange polynomials on two
neighboring elements.


.. _fem:approx:fe:fig:P3:

.. figure:: mpl_fe_basis_p3_4e.png
   :width: 600

   *Illustration of the piecewise cubic basis functions associated with nodes in element 1*



.. index:: chapeau function

.. index:: hat function

.. index:: finite element basis function


We see that all the piecewise linear basis functions have the same
"hat" shape. They are naturally referred to as *hat functions*,
also called *chapeau functions*.
The piecewise quadratic functions in Figure :ref:`fem:approx:fe:fig:P2`
are seen to be of two types. "Rounded hats" associated with internal
nodes in the elements and some more "sombrero" shaped hats associated
with element boundary nodes. Higher-order basis functions also have
hat-like shapes, but the functions have pronounced oscillations in addition,
as illustrated in Figure :ref:`fem:approx:fe:fig:P3`.


.. index:: linear elements

.. index:: quadratic elements

.. index:: P1 element

.. index:: P2 element


A common terminology is to speak about *linear elements* as
elements with two local nodes associated with
piecewise linear basis functions. Similarly, *quadratic elements* and
*cubic elements* refer to piecewise quadratic or cubic functions
over elements with three or four local nodes, respectively.
Alternative names, frequently used later, are P1 elements for linear
elements, P2 for quadratic elements, and so forth: Pd signifies
degree :math:`d` of the polynomial basis functions.


.. _fem:approx:global:linearsystem:

Calculating the linear system
-----------------------------

The elements in the coefficient matrix and right-hand side are given
by the formulas :eq:`fem:approx:Aij` and :eq:`fem:approx:bi`, but
now the choice of :math:`{\psi}_i` is :math:`{\varphi}_i`.
Consider P1 elements where :math:`{\varphi}_i(x)` piecewise linear. Nodes and elements
numbered consecutively from left to right in a uniformly partitioned
mesh imply the nodes


.. math::
         x_i=i h,\quad i=0,\ldots,N,

and the elements


.. math::
        
        \Omega^{(i)} = [x_{i},x_{i+1}] = [i h, (i+1)h],\quad
        i=0,\ldots,N_e=N-1
        {\thinspace .}
        

We have in this case :math:`N` elements and :math:`N+1` nodes,
and :math:`\Omega=[x_{0},x_{N}]`.
The formula for :math:`{\varphi}_i(x)` is given by
:eq:`fem:approx:fe:phi:1:formula2` and a graphical illustration is
provided in Figures :ref:`fem:approx:fe:fig:P1` and
:ref:`fem:approx:fe:fig:phi:i:im1`. First we clearly see
from the figures the very important property
:math:`{\varphi}_i(x){\varphi}_j(x)\neq 0` if and only if :math:`j=i-1`, :math:`j=i`, or
:math:`j=i+1`, or alternatively expressed, if and only if :math:`i` and :math:`j` are
nodes in the same element. Otherwise, :math:`{\varphi}_i` and :math:`{\varphi}_j` are
too distant to have an overlap and consequently their product vanishes.


.. _fem:approx:fe:fig:phi:2:3:

.. figure:: fe_mesh1D_phi_2_3.png
   :width: 500

   *Illustration of the piecewise linear basis functions corresponding to global node 2 and 3*


Calculating a specific matrix entry
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let us calculate the specific matrix entry :math:`A_{2,3} = \int_\Omega
{\varphi}_2{\varphi}_3{\, \mathrm{d}x}`. Figure :ref:`fem:approx:fe:fig:phi:2:3`
shows how :math:`{\varphi}_2` and :math:`{\varphi}_3` look like. We realize
from this figure that the product :math:`{\varphi}_2{\varphi}_3\neq 0`
only over element 2, which contains node 2 and 3.
The particular formulas for :math:`{\varphi}_{2}(x)` and :math:`{\varphi}_3(x)` on
:math:`[x_{2},x_{3}]` are found from :eq:`fem:approx:fe:phi:1:formula2`.
The function
:math:`{\varphi}_3` has positive slope over :math:`[x_{2},x_{3}]` and corresponds
to the interval :math:`[x_{i-1},x_{i}]` in
:eq:`fem:approx:fe:phi:1:formula2`. With :math:`i=3` we get


.. math::
         {\varphi}_3(x) = (x-x_2)/h,

while :math:`{\varphi}_2(x)` has negative slope over :math:`[x_{2},x_{3}]`
and corresponds to setting :math:`i=2` in :eq:`fem:approx:fe:phi:1:formula2`,


.. math::
         {\varphi}_2(x) = 1- (x-x_2)/h{\thinspace .}

We can now easily integrate,


.. math::
        
        A_{2,3} = \int_\Omega {\varphi}_2{\varphi}_{3}{\, \mathrm{d}x} =
        \int_{x_{2}}^{x_{3}}
        \left(1 - \frac{x - x_{2}}{h}\right) \frac{x - x_{2}}{h}
         {\, \mathrm{d}x} = \frac{h}{6}{\thinspace .}
        


The diagonal entry in the coefficient matrix becomes


.. math::
         A_{2,2} =
        \int_{x_{1}}^{x_{2}}
        \left(\frac{x - x_{1}}{h}\right)^2{\, \mathrm{d}x} +
        \int_{x_{2}}^{x_{3}}
        \left(1 - \frac{x - x_{2}}{h}\right)^2{\, \mathrm{d}x}
        = \frac{h}{3}{\thinspace .}
        

The entry :math:`A_{2,1}` has an
the integral that is geometrically similar to the situation in
Figure :ref:`fem:approx:fe:fig:phi:2:3`, so we get
:math:`A_{2,1}=h/6`.


Calculating a general row in the matrix
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can now generalize the calculation of matrix entries to
a general row number :math:`i`. The entry
:math:`A_{i,i-1}=\int_\Omega{\varphi}_i{\varphi}_{i-1}{\, \mathrm{d}x}` involves
hat functions as depicted in
Figure :ref:`fem:approx:fe:fig:phi:i:im1`. Since the integral
is geometrically identical to the situation with specific nodes
2 and 3, we realize that :math:`A_{i,i-1}=A_{i,i+1}=h/6` and
:math:`A_{i,i}=h/3`. However, we can compute the integral directly
too:


.. math::
        
        A_{i,i-1} &= \int_\Omega {\varphi}_i{\varphi}_{i-1}{\, \mathrm{d}x}\\ 
        &=
        \underbrace{\int_{x_{i-2}}^{x_{i-1}} {\varphi}_i{\varphi}_{i-1}{\, \mathrm{d}x}}_{{\varphi}_i=0} +
        \int_{x_{i-1}}^{x_{i}} {\varphi}_i{\varphi}_{i-1}{\, \mathrm{d}x} +
        \underbrace{\int_{x_{i}}^{x_{i+1}} {\varphi}_i{\varphi}_{i-1}{\, \mathrm{d}x}}_{{\varphi}_{i-1}=0}\\ 
        &= \int_{x_{i-1}}^{x_{i}}
        \underbrace{\left(\frac{x - x_{i}}{h}\right)}_{{\varphi}_i(x)}
        \underbrace{\left(1 - \frac{x - x_{i-1}}{h}\right)}_{{\varphi}_{i-1}(x)} {\, \mathrm{d}x} =
        \frac{h}{6}
        {\thinspace .}
        

The particular formulas for :math:`{\varphi}_{i-1}(x)` and :math:`{\varphi}_i(x)` on
:math:`[x_{i-1},x_{i}]` are found from :eq:`fem:approx:fe:phi:1:formula2`:
:math:`{\varphi}_i` is the linear function with positive slope, corresponding
to the interval :math:`[x_{i-1},x_{i}]` in
:eq:`fem:approx:fe:phi:1:formula2`, while :math:`\phi_{i-1}` has a
negative slope so the definition in interval
:math:`[x_{i},x_{i+1}]` in :eq:`fem:approx:fe:phi:1:formula2` must be
used. (The appearance of :math:`i` in :eq:`fem:approx:fe:phi:1:formula2`
and the integral might be confusing, as we speak about two different
:math:`i` indices.)


.. _fem:approx:fe:fig:phi:i:im1:

.. figure:: fe_mesh1D_phi_i_im1.png
   :width: 500

   *Illustration of two neighboring linear (hat) functions with general node numbers*



The first and last row of the coefficient matrix lead to slightly
different integrals:


.. math::
         A_{0,0} = \int_\Omega {\varphi}_0^2{\, \mathrm{d}x} = \int_{x_{0}}^{x_{1}}
        \left(1 - \frac{x-x_0}{h}\right)^2{\, \mathrm{d}x} = \frac{h}{3}{\thinspace .}
        

Similarly, :math:`A_{N,N}` involves an integral over only one element
and equals hence :math:`h/3`.


.. _fem:approx:fe:fig:phi:i:f:

.. figure:: fe_mesh1D_phi_i_f.png
   :width: 500

   *Right-hand side integral with the product of a basis function and the given function to approximate*



The general formula for :math:`b_i`,
see Figure :ref:`fem:approx:fe:fig:phi:i:f`, is now easy to set up


.. math::
   :label: fem:approx:fe:bi:formula1
        
        b_i = \int_\Omega{\varphi}_i(x)f(x){\, \mathrm{d}x}
        = \int_{x_{i-1}}^{x_{i}} \frac{x - x_{i-1}}{h} f(x){\, \mathrm{d}x}
        + \int_{x_{i}}^{x_{i+1}} \left(1 - \frac{x - x_{i}}{h}\right) f(x)
        {\, \mathrm{d}x}{\thinspace .}
        
        

We need a specific :math:`f(x)` function to compute these integrals.
With two equal-sized elements in :math:`\Omega=[0,1]` and :math:`f(x)=x(1-x)`, one gets


.. math::
        
        A = \frac{h}{6}\left(\begin{array}{ccc}
        2 & 1 & 0\\ 
        1 & 4 & 1\\ 
        0 & 1 & 2
        \end{array}\right),\quad
        b = \frac{h^2}{12}\left(\begin{array}{c}
        2 - 3h\\ 
        12 - 14h\\ 
        10 -17h
        \end{array}\right){\thinspace .}
        

The solution becomes


.. math::
         c_0 = \frac{h^2}{6},\quad c_1 = h - \frac{5}{6}h^2,\quad
        c_2 = 2h - \frac{23}{6}h^2{\thinspace .}  

The resulting function


.. math::
         u(x)=c_0{\varphi}_0(x) + c_1{\varphi}_1(x) + c_2{\varphi}_2(x)

is displayed in Figure :ref:`fem:approx:fe:fig:ls:P1:2:4` (left).
Doubling the number of elements to four leads to the improved
approximation in the right part of Figure :ref:`fem:approx:fe:fig:ls:P1:2:4`.


.. _fem:approx:fe:fig:ls:P1:2:4:

.. figure:: fe_p1_x2_2e_4e.png
   :width: 800

   *Least squares approximation of a parabola using 2 (left) and 4 (right) P1 elements*




.. _fem:approx:fe:elementwise:

Assembly of elementwise computations
------------------------------------

The integrals above are naturally split into integrals over individual elements
since the formulas change with the elements. This idea of splitting the
integral is fundamental in all practical implementations of the finite
element method.

Let us split the integral over :math:`\Omega` into a sum of contributions from
each element:


.. math::
   :label: fem:approx:fe:elementwise:Asplit
        
        A_{i,j} = \int_\Omega{\varphi}_i{\varphi}_j {\, \mathrm{d}x} = \sum_{e} A^{(e)}_{i,j},\quad
        A^{(e)}_{i,j}=\int_{\Omega^{(e)}} {\varphi}_i{\varphi}_j {\, \mathrm{d}x}
        {\thinspace .}
        
        

Now, :math:`A^{(e)}_{i,j}\neq 0` if and only if :math:`i` and :math:`j` are nodes in element
:math:`e`. Introduce :math:`i=q(e,r)` as the mapping of local node number :math:`r` in element
:math:`e` to the global node number :math:`i`. This is just a short mathematical notation
for the expression ``i=elements[e][r]`` in a program.
Let :math:`r` and :math:`s` be the local node numbers corresponding to the global
node numbers :math:`i=q(e,r)` and
:math:`j=q(e,s)`. With :math:`d` nodes per element, all the nonzero elements
in :math:`A^{(e)}_{i,j}` arise from the integrals involving basis functions with
indices corresponding to the global node numbers in element number :math:`e`:


.. index:: element matrix



.. math::
        
        \int_{\Omega^{(e)}}{\varphi}_{q(e,r)}{\varphi}_{q(e,s)} {\, \mathrm{d}x},
        \quad r,s=0,\ldots, d{\thinspace .}
        

These contributions can be collected in a :math:`(d+1)\times (d+1)` matrix known as
the *element matrix*. Let :math:`{I_d}=\{0,\ldots,d\}` be the valid indices
of :math:`r` and :math:`s`.
We introduce the notation


.. math::
        
        \tilde A^{(e)} = \{ \tilde A^{(e)}_{r,s}\},\quad
        r,s\in{I_d},
        

for the element matrix. For the case :math:`d=2` we have

.. math::
        
        \tilde A^{(e)} = \left\lbrack\begin{array}{lllll}
        \tilde A^{(e)}_{0,0} & \tilde A^{(e)}_{0,1} & \tilde A^{(e)}_{0,2}\\ 
        \tilde A^{(e)}_{1,0} & \tilde A^{(e)}_{1,1} & \tilde A^{(e)}_{1,2}\\ 
        \tilde A^{(e)}_{2,0} & \tilde A^{(e)}_{2,1} & \tilde A^{(e)}_{2,2}
        \end{array}\right\rbrack
        {\thinspace .}
        

Given the numbers :math:`\tilde A^{(e)}_{r,s}`,
we should according to :eq:`fem:approx:fe:elementwise:Asplit`
add the contributions to the global coefficient matrix by


.. index:: assembly



.. math::
        
         A_{q(e,r),q(e,s)} := A_{q(e,r),q(e,s)} + \tilde A^{(e)}_{r,s},\quad
        r,s\in{I_d}{\thinspace .}
        

This process of adding in elementwise contributions to the global matrix
is called *finite element assembly* or simply *assembly*.
Figure :ref:`fem:approx:fe:fig:assembly:2x2` illustrates how element matrices
for elements with two nodes are added into the global matrix.
More specifically, the figure shows how the element matrix associated with
elements 1 and 2 assembled, assuming that global nodes are numbered
from left to right in the domain. With regularly numbered P3 elements, where
the element matrices have size :math:`4\times 4`, the assembly of elements 1 and 2
are sketched in Figure :ref:`fem:approx:fe:fig:assembly:4x4`.


.. _fem:approx:fe:fig:assembly:2x2:

.. figure:: fe_assembly_regular_2x2.png
   :width: 700

   *Illustration of matrix assembly: regularly numbered P1 elements*



.. _fem:approx:fe:fig:assembly:4x4:

.. figure:: fe_assembly_regular_4x4.png
   :width: 700

   *Illustration of matrix assembly: regularly numbered P3 elements*


After assembly of element matrices corresponding to regularly numbered elements
and nodes are understood, it is wise to study the assembly process for
irregularly numbered elements and nodes. Figure :ref:`fem:approx:fe:def:elements:nodes:fig:P1:irregular` shows a mesh where the ``elements`` array, or :math:`q(e,r)`
mapping in mathematical notation, is given as


.. code-block:: python

        elements = [[2, 1], [4, 5], [0, 4], [3, 0], [5, 2]]

The associated assembly of element matrices 1 and 2 is sketched in
Figure :ref:`fem:approx:fe:fig:assembly:irr2x2`.

These three assembly processes can also be `animated <http://tinyurl.com/k3sdbuv/pub/mov-fem/fe_assembly.html>`_.

.. `P1 assembly movie <http://tinyurl.com/k3sdbuv/pub/mov-fem/fe_assembly_regular_2x2/index.html>`_.

.. `P3 assembly movie <http://tinyurl.com/k3sdbuv/pub/mov-fem/fe_assembly_regular_4x4/index.html>`_.

.. `P1 irregular numbering <http://tinyurl.com/k3sdbuv/pub/mov-fem/fe_assembly_irregular/index.html>`_.




.. _fem:approx:fe:fig:assembly:irr2x2:

.. figure:: fe_assembly_irregular.png
   :width: 700

   *Illustration of matrix assembly: irregularly numbered P1 elements*


.. old:

.. FIGURE: [fig-fem/matrix-assembly, width=600]  Illustration of matrix assembly.


The right-hand side of the linear system is also computed elementwise:


.. math::
        
        b_i = \int_\Omega f(x){\varphi}_i(x) {\, \mathrm{d}x} = \sum_{e} b^{(e)}_{i},\quad
        b^{(e)}_{i}=\int_{\Omega^{(e)}} f(x){\varphi}_i(x){\, \mathrm{d}x}
        {\thinspace .}  

We observe that
:math:`b_i^{(e)}\neq 0` if and only if global node :math:`i` is a node in element :math:`e`.
With :math:`d` nodes per element we can collect the :math:`d+1` nonzero contributions
:math:`b_i^{(e)}`, for :math:`i=q(e,r)`, :math:`r\in{I_d}`, in an *element vector*


.. math::
        
        \tilde b_r^{(e)}=\{ \tilde b_r^{(e)}\},\quad r\in{I_d}{\thinspace .}
        

These contributions are added to the
global right-hand side by an assembly process similar to that for the
element matrices:


.. math::
        
        b_{q(e,r)} := b_{q(e,r)} + \tilde b^{(e)}_{r},\quad
        r\in{I_d}{\thinspace .}  



.. _fem:approx:fe:mapping:

Mapping to a reference element
------------------------------


.. index:: affine mapping

.. index::
   single: mapping of reference cells; affine mapping


Instead of computing the integrals


.. math::
         \tilde A^{(e)}_{r,s} = \int_{\Omega^{(e)}}{\varphi}_{q(e,r)}(x){\varphi}_{q(e,s)}(x){\, \mathrm{d}x}

over some element
:math:`\Omega^{(e)} = [x_L, x_R]`,
it is convenient to map the element domain :math:`[x_L, x_R]`
to a standardized reference element domain :math:`[-1,1]`.
(We have now introduced
:math:`x_L` and :math:`x_R` as the left and right boundary points of an arbitrary element.
With a natural, regular numbering of nodes and elements from left to right
through the domain, we have :math:`x_L=x_{e}` and :math:`x_R=x_{e+1}` for P1 elements.)

Let :math:`X\in [-1,1]` be the coordinate
in the reference element. A linear or *affine mapping* from :math:`X` to :math:`x` reads


.. math::
   :label: fem:approx:fe:affine:mapping
        
        x = \frac{1}{2} (x_L + x_R) + \frac{1}{2} (x_R - x_L)X{\thinspace .}
        
        

This relation can alternatively be expressed by

.. math::
   :label: fem:approx:fe:affine:mapping2
        
        x = x_m + \frac{1}{2}hX,
        
        

where we have introduced the element midpoint :math:`x_m=(x_L+x_R)/2` and
the element length :math:`h=x_R-x_L`.

Integrating on
the reference element is a matter of just changing the integration
variable from :math:`x` to :math:`X`. Let


.. math::
        
        {\tilde{\varphi}}_r(X) = {\varphi}_{q(e,r)}(x(X))
        

be the basis function associated with local node number :math:`r` in the
reference element. The integral transformation reads


.. math::
        
        \tilde A^{(e)}_{r,s} =
        \int_{\Omega^{(e)}}{\varphi}_{q(e,r)}(x){\varphi}_{q(e,s)}(x){\, \mathrm{d}x}
        = \int_{-1}^1 {\tilde{\varphi}}_r(X){\tilde{\varphi}}_s(X)\frac{dx}{dX}{\, \mathrm{d}X}
        {\thinspace .}  

The stretch factor :math:`dx/dX` between the :math:`x` and :math:`X` coordinates
becomes the determinant of the Jacobian matrix of the mapping
between the coordinate systems in 2D and 3D. To obtain a uniform
notation for 1D, 2D, and 3D problems we therefore replace
:math:`dx/dX` by :math:`\det J` already now. In 1D, :math:`\det J = dx/dX = h/2`.
The integration over the reference element is then written as


.. math::
   :label: fem:approx:fe:mapping:Ae
        
        \tilde A^{(e)}_{r,s}
        = \int_{-1}^1 {\tilde{\varphi}}_r(X){\tilde{\varphi}}_s(X)\det J\,dX
        
        {\thinspace .}
        

The corresponding formula for the element vector entries becomes


.. math::
   :label: fem:approx:fe:mapping:be
        
        \tilde b^{(e)}_{r} = \int_{\Omega^{(e)}}f(x){\varphi}_{q(e,r)}(x)dx
        = \int_{-1}^1 f(x(X)){\tilde{\varphi}}_r(X)\det J\,dX
        
        {\thinspace .}
        


Since we from now on will work in the reference
element, we need explicit mathematical formulas for the basis
functions :math:`{\varphi}_i(x)` in the reference element only, i.e., we only need
to specify formulas for :math:`{\tilde{\varphi}}_r(X)`.
This is a very convenient simplification compared to specifying
piecewise polynomials in the physical domain.

The :math:`{\tilde{\varphi}}_r(x)` functions are simply the Lagrange
polynomials defined through the local nodes in the reference element.
For :math:`d=1` and two nodes per element, we have the linear Lagrange
polynomials


.. math::
   :label: fem:approx:fe:mapping:P1:phi0
        
        {\tilde{\varphi}}_0(X) = \frac{1}{2} (1 - X)
        
        



.. math::
   :label: fem:approx:fe:mapping:P1:phi1
          
        {\tilde{\varphi}}_1(X) = \frac{1}{2} (1 + X)
        
        

Quadratic polynomials, :math:`d=2`, have the formulas


.. math::
        
        {\tilde{\varphi}}_0(X) = \frac{1}{2} (X-1)X
        



.. math::
          
        {\tilde{\varphi}}_1(X) = 1 - X^2
        



.. math::
          
        {\tilde{\varphi}}_2(X) = \frac{1}{2} (X+1)X
        

In general,


.. math::
        
        {\tilde{\varphi}}_r(X) = \prod_{s=0,s\neq r}^d \frac{X-X_{(s)}}{X_{(r)}-X_{(s)}},
        

where :math:`X_{(0)},\ldots,X_{(d)}` are the coordinates of the local nodes in
the reference element.
These are normally uniformly spaced: :math:`X_{(r)} = -1 + 2r/d`,
:math:`r\in{I_d}`.



.. admonition:: Why reference elements

   The great advantage of using reference elements is that
   the formulas for the basis functions, :math:`{\tilde{\varphi}}_r(X)`, are the
   same for all elements and independent of the element geometry
   (length and location in the mesh). The geometric information
   is "factored out" in the simple mapping formula and the associated
   :math:`\det J` quantity, but this information is (here taken as) the same for
   element types. Also, the integration domain is the same for
   all elements.


.. _fem:approx:fe:intg:ref:

Example: Integration over a reference element
---------------------------------------------

To illustrate the concepts from the previous section in a specific
example, we now
consider calculation of the element matrix and vector for a specific choice of
:math:`d` and :math:`f(x)`. A simple choice is :math:`d=1` (P1 elements) and :math:`f(x)=x(1-x)`
on :math:`\Omega =[0,1]`. We have the general expressions
:eq:`fem:approx:fe:mapping:Ae` and :eq:`fem:approx:fe:mapping:be`
for :math:`\tilde A^{(e)}_{r,s}` and :math:`\tilde b^{(e)}_{r}`.
Writing these out for the choices :eq:`fem:approx:fe:mapping:P1:phi0`
and :eq:`fem:approx:fe:mapping:P1:phi1`, and using that :math:`\det J = h/2`,
we can do the following calculations of the element matrix entries:


.. math::
        
        \tilde A^{(e)}_{0,0}
        = \int_{-1}^1 {\tilde{\varphi}}_0(X){\tilde{\varphi}}_0(X)\frac{h}{2} dX\nonumber
        



.. math::
   :label: fem:approx:fe:intg:ref:Ae00
          
        =\int_{-1}^1 \frac{1}{2}(1-X)\frac{1}{2}(1-X) \frac{h}{2} dX =
        \frac{h}{8}\int_{-1}^1 (1-X)^2 dX = \frac{h}{3},
        
        



.. math::
          
        \tilde A^{(e)}_{1,0}
        = \int_{-1}^1 {\tilde{\varphi}}_1(X){\tilde{\varphi}}_0(X)\frac{h}{2} dX\nonumber
        



.. math::
          
        =\int_{-1}^1 \frac{1}{2}(1+X)\frac{1}{2}(1-X) \frac{h}{2} dX =
        \frac{h}{8}\int_{-1}^1 (1-X^2) dX = \frac{h}{6},
        



.. math::
   :label: fem:approx:fe:intg:ref:Ae10
          
        \tilde A^{(e)}_{0,1} = \tilde A^{(e)}_{1,0},
        
        



.. math::
          
        \tilde A^{(e)}_{1,1}
        = \int_{-1}^1 {\tilde{\varphi}}_1(X){\tilde{\varphi}}_1(X)\frac{h}{2} dX\nonumber
        



.. math::
   :label: fem:approx:fe:intg:ref:Ae11
          
        =\int_{-1}^1 \frac{1}{2}(1+X)\frac{1}{2}(1+X) \frac{h}{2} dX =
        \frac{h}{8}\int_{-1}^1 (1+X)^2 dX = \frac{h}{3}
        
        {\thinspace .}
        


The corresponding entries in the element vector becomes


.. math::
        
        \tilde b^{(e)}_{0}
        = \int_{-1}^1 f(x(X)){\tilde{\varphi}}_0(X)\frac{h}{2} dX\nonumber
        



.. math::
          
        = \int_{-1}^1 (x_m + \frac{1}{2} hX)(1-(x_m + \frac{1}{2} hX))
        \frac{1}{2}(1-X)\frac{h}{2} dX \nonumber
        



.. math::
   :label: fem:approx:fe:intg:ref:be0
          
        = - \frac{1}{24} h^{3} + \frac{1}{6} h^{2} x_{m} - \frac{1}{12} h^{2} - \frac{1}{2} h x_{m}^{2} + \frac{1}{2} h x_{m}
        
        



.. math::
          
        \tilde b^{(e)}_{1}
        = \int_{-1}^1 f(x(X)){\tilde{\varphi}}_1(X)\frac{h}{2} dX\nonumber
        



.. math::
          
        = \int_{-1}^1 (x_m + \frac{1}{2} hX)(1-(x_m + \frac{1}{2} hX))
        \frac{1}{2}(1+X)\frac{h}{2} dX \nonumber
        



.. math::
          
        = - \frac{1}{24} h^{3} - \frac{1}{6} h^{2} x_{m} + \frac{1}{12} h^{2} -
        \frac{1}{2} h x_{m}^{2} + \frac{1}{2} h x_{m}
        {\thinspace .}
        

In the last two expressions we have used the element midpoint :math:`x_m`.

Integration of lower-degree polynomials above is tedious,
and higher-degree polynomials involve very much more algebra, but ``sympy``
may help. For example, we can easily calculate
:eq:`fem:approx:fe:intg:ref:Ae00`,
:eq:`fem:approx:fe:intg:ref:Ae00`, and
:eq:`fem:approx:fe:intg:ref:be0` by


        >>> import sympy as sm
        >>> x, x_m, h, X = sm.symbols('x x_m h X')
        >>> sm.integrate(h/8*(1-X)**2, (X, -1, 1))
        h/3
        >>> sm.integrate(h/8*(1+X)*(1-X), (X, -1, 1))
        h/6
        >>> x = x_m + h/2*X
        >>> b_0 = sm.integrate(h/4*x*(1-x)*(1-X), (X, -1, 1))
        >>> print b_0
        -h**3/24 + h**2*x_m/6 - h**2/12 - h*x_m**2/2 + h*x_m/2

For inclusion of formulas in documents (like the present one), ``sympy`` can print
expressions in LaTeX format:


        >>> print sm.latex(b_0, mode='plain')
        - \frac{1}{24} h^{3} + \frac{1}{6} h^{2} x_{m}
        - \frac{1}{12} h^{2} - \frac{1}{2} h x_{m}^{2}
        + \frac{1}{2} h x_{m}


.. _fem:approx:fe:impl:

Implementation  (1)
===================

Based on the experience from the previous example, it makes
sense to write some code to automate the analytical integration process
for any choice of finite element basis functions. In addition,
we can automate the assembly process and linear system
solution. Appropriate
functions for this purpose document all details of all
steps in the finite element computations and can found in the module file
`fe_approx1D.py <http://tinyurl.com/jvzzcfn/fem/fe_approx1D.py>`_.
The key steps in the computational machinery are now explained in
detail in terms of code and text.

.. _fem:approx:fe:impl:intg:

Integration
-----------

First we need a Python function for
defining :math:`{\tilde{\varphi}}_r(X)` in terms of a Lagrange polynomial
of degree ``d``:


.. code-block:: python

        import sympy as sm
        import numpy as np
        
        def phi_r(r, X, d):
            if isinstance(X, sm.Symbol):
                h = sm.Rational(1, d)  # node spacing
                nodes = [2*i*h - 1 for i in range(d+1)]
            else:
                # assume X is numeric: use floats for nodes
                nodes = np.linspace(-1, 1, d+1)
            return Lagrange_polynomial(X, r, nodes)
        
        def Lagrange_polynomial(x, i, points):
            p = 1
            for k in range(len(points)):
                if k != i:
                    p *= (x - points[k])/(points[i] - points[k])
            return p

Observe how we construct the ``phi_r`` function to be
a symbolic expression for :math:`{\tilde{\varphi}}_r(X)` if ``X`` is a
``Symbol`` object from ``sympy``. Otherwise, we assume that ``X``
is a ``float`` object and compute the corresponding
floating-point value of :math:`{\tilde{\varphi}}_r(X)`. Recall that the
``Lagrange_polynomial`` function, here simply copied
from the section :ref:`fem:approx:global:Fourier`,
works with both symbolic and
numeric variables.

The complete basis :math:`{\tilde{\varphi}}_0(X),\ldots,{\tilde{\varphi}}_d(X)`
on the reference element, represented as a list of
symbolic expressions, is constructed by


.. code-block:: python

        def basis(d=1):
            X = sm.Symbol('X')
            phi = [phi_r(r, X, d) for r in range(d+1)]
            return phi

Now we are in a position to write the function for computing
the element matrix:


.. code-block:: python

        def element_matrix(phi, Omega_e, symbolic=True):
            n = len(phi)
            A_e = sm.zeros((n, n))
            X = sm.Symbol('X')
            if symbolic:
                h = sm.Symbol('h')
            else:
                h = Omega_e[1] - Omega_e[0]
            detJ = h/2  # dx/dX
            for r in range(n):
                for s in range(r, n):
                    A_e[r,s] = sm.integrate(phi[r]*phi[s]*detJ, (X, -1, 1))
                    A_e[s,r] = A_e[r,s]
            return A_e

In the symbolic case (``symbolic`` is ``True``),
we introduce the element length as a symbol
``h`` in the computations. Otherwise, the real numerical value
of the element interval ``Omega_e``
is used and the final matrix elements are numbers,
not symbols.
This functionality can be demonstrated:


        >>> from fe_approx1D import *
        >>> phi = basis(d=1)
        >>> phi
        [1/2 - X/2, 1/2 + X/2]
        >>> element_matrix(phi, Omega_e=[0.1, 0.2], symbolic=True)
        [h/3, h/6]
        [h/6, h/3]
        >>> element_matrix(phi, Omega_e=[0.1, 0.2], symbolic=False)
        [0.0333333333333333, 0.0166666666666667]
        [0.0166666666666667, 0.0333333333333333]


The computation of the element vector is done by a similar
procedure:


.. code-block:: python

        def element_vector(f, phi, Omega_e, symbolic=True):
            n = len(phi)
            b_e = sm.zeros((n, 1))
            # Make f a function of X
            X = sm.Symbol('X')
            if symbolic:
                h = sm.Symbol('h')
            else:
                h = Omega_e[1] - Omega_e[0]
            x = (Omega_e[0] + Omega_e[1])/2 + h/2*X  # mapping
            f = f.subs('x', x)  # substitute mapping formula for x
            detJ = h/2  # dx/dX
            for r in range(n):
                b_e[r] = sm.integrate(f*phi[r]*detJ, (X, -1, 1))
            return b_e

Here we need to replace the symbol ``x`` in the expression for ``f``
by the mapping formula such that ``f`` can be integrated
in terms of :math:`X`, cf. the formula
:math:`\tilde b^{(e)}_{r} = \int_{-1}^1 f(x(X)){\tilde{\varphi}}_r(X)\frac{h}{2}dX`.

The integration in the element matrix function involves only products
of polynomials, which ``sympy`` can easily deal with, but for the
right-hand side ``sympy`` may face difficulties with certain types of
expressions ``f``. The result of the integral is then an ``Integral``
object and not a number or expression
as when symbolic integration is successful.
It may therefore be wise to introduce a fallback on numerical
integration. The symbolic integration can also take much time
before an unsuccessful conclusion so we may also introduce a parameter
``symbolic`` and set it to ``False`` to avoid symbolic integration:


.. code-block:: python

        def element_vector(f, phi, Omega_e, symbolic=True):
                ...
                if symbolic:
                    I = sm.integrate(f*phi[r]*detJ, (X, -1, 1))
                if not symbolic or isinstance(I, sm.Integral):
                    h = Omega_e[1] - Omega_e[0]  # Ensure h is numerical
                    detJ = h/2
                    integrand = sm.lambdify([X], f*phi[r]*detJ)
                    I = sm.mpmath.quad(integrand, [-1, 1])
                b_e[r] = I
                ...

Numerical integration requires that the symbolic
integrand is converted
to a plain Python function (``integrand``) and that
the element length ``h`` is a real number.


.. _fem:approx:fe:impl:linsys:

Linear system assembly and solution
-----------------------------------

The complete algorithm
for computing and assembling the elementwise contributions
takes the following form


.. code-block:: python

        def assemble(nodes, elements, phi, f, symbolic=True):
            N_n, N_e = len(nodes), len(elements)
            if symbolic:
                A = sm.zeros((N_n, N_n))
                b = sm.zeros((N_n, 1))    # note: (N_n, 1) matrix
            else:
                A = np.zeros((N_n, N_n))
                b = np.zeros(N_n)
            for e in range(N_e):
                Omega_e = [nodes[elements[e][0]], nodes[elements[e][-1]]]
        
                A_e = element_matrix(phi, Omega_e, symbolic)
                b_e = element_vector(f, phi, Omega_e, symbolic)
        
                for r in range(len(elements[e])):
                    for s in range(len(elements[e])):
                        A[elements[e][r],elements[e][s]] += A_e[r,s]
                    b[elements[e][r]] += b_e[r]
            return A, b

The ``nodes`` and ``elements`` variables represent the finite
element mesh as explained earlier.

Given the coefficient matrix ``A`` and the right-hand side ``b``,
we can compute the coefficients :math:`\left\{ {c}_i \right\}_{i\in{I}}` in the expansion
:math:`u(x)=\sum_jc_j{\varphi}_j` as the solution vector ``c`` of the linear
system:


.. code-block:: python

        if symbolic:
            c = A.LUsolve(b)
        else:
            c = np.linalg.solve(A, b)

When ``A`` and ``b`` are ``sympy`` arrays,
the solution procedure implied by ``A.LUsolve`` is symbolic.
Otherwise, ``A`` and ``b`` are ``numpy`` arrays and a standard
numerical solver is called.
The symbolic version is suited for small problems only
(small :math:`N` values) since the calculation time becomes prohibitively large
otherwise. Normally, the symbolic *integration* will be more time
consuming in small problems than the symbolic *solution* of the linear system.

.. _fem:approx:fe:impl:ex1:symbolic:

Example on computing symbolic approximations
--------------------------------------------

We can exemplify the use of ``assemble`` on the computational
case from the section :ref:`fem:approx:global:linearsystem` with
two P1 elements (linear basis functions) on the domain :math:`\Omega=[0,1]`.
Let us first work with a symbolic element length:


        >>> h, x = sm.symbols('h x')
        >>> nodes = [0, h, 2*h]
        >>> elements = [[0, 1], [1, 2]]
        >>> phi = basis(d=1)
        >>> f = x*(1-x)
        >>> A, b = assemble(nodes, elements, phi, f, symbolic=True)
        >>> A
        [h/3,   h/6,   0]
        [h/6, 2*h/3, h/6]
        [  0,   h/6, h/3]
        >>> b
        [     h**2/6 - h**3/12]
        [      h**2 - 7*h**3/6]
        [5*h**2/6 - 17*h**3/12]
        >>> c = A.LUsolve(b)
        >>> c
        [                           h**2/6]
        [12*(7*h**2/12 - 35*h**3/72)/(7*h)]
        [  7*(4*h**2/7 - 23*h**3/21)/(2*h)]


.. _fem:approx:fe:impl:ex1:collocation:

Comparison with finite elements and interpolation/collocation
-------------------------------------------------------------

We may, for comparison, compute the ``c`` vector corresponding to
an interpolation/collocation method with finite element basis functions.
Choosing the nodes as points, the principle is


.. math::
         u(x_{i}) = \sum_{j\in{I}} c_j{\varphi}_j(x_{i}) = f(x_{i}),\quad
        i\in{I}{\thinspace .}

The coefficient matrix :math:`A_{i,j}={\varphi}_j(x_{i})` becomes
the identity matrix because basis function number :math:`j` vanishes
at all nodes, except node :math:`j`: :math:`{\varphi}_j(x_{i}=\delta_{ij}`.
Therefore, :math:`c_i = f(x_{i}`.

The associated ``sympy`` calculations are


        >>> fn = sm.lambdify([x], f)
        >>> c = [fn(xc) for xc in nodes]
        >>> c
        [0, h*(1 - h), 2*h*(1 - 2*h)]

These expressions are much simpler than those based on least squares
or projection in combination with finite element basis functions.

.. _fem:approx:fe:impl:ex1:numeric:

Example on computing numerical approximations
---------------------------------------------

The numerical computations corresponding to the
symbolic ones in the section :ref:`fem:approx:fe:impl:ex1:symbolic`,
and still done by ``sympy`` and the ``assemble`` function, go as follows:


        >>> nodes = [0, 0.5, 1]
        >>> elements = [[0, 1], [1, 2]]
        >>> phi = basis(d=1)
        >>> x = sm.Symbol('x')
        >>> f = x*(1-x)
        >>> A, b = assemble(nodes, elements, phi, f, symbolic=False)
        >>> A
        [ 0.166666666666667, 0.0833333333333333,                  0]
        [0.0833333333333333,  0.333333333333333, 0.0833333333333333]
        [                 0, 0.0833333333333333,  0.166666666666667]
        >>> b
        [          0.03125]
        [0.104166666666667]
        [          0.03125]
        >>> c = A.LUsolve(b)
        >>> c
        [0.0416666666666666]
        [ 0.291666666666667]
        [0.0416666666666666]


The ``fe_approx1D`` module contains functions for generating the
``nodes`` and ``elements`` lists for equal-sized elements with
any number of nodes per element. The coordinates in ``nodes``
can be expressed either through the element length symbol ``h``
(``symbolic=True``) or by real numbers (``symbolic=False``):


.. code-block:: python

        nodes, elements = mesh_uniform(N_e=10, d=3, Omega=[0,1],
                                       symbolic=True)

There is also a function


.. code-block:: python

        def approximate(f, symbolic=False, d=1, N_e=4, filename='tmp.pdf'):

which computes a mesh with ``N_e`` elements, basis functions of
degree ``d``, and approximates a given symbolic expression
``f`` by a finite element expansion :math:`u(x) = \sum_jc_j{\varphi}_j(x)`.
When ``symbolic`` is ``False``, :math:`u(x) = \sum_jc_j{\varphi}_j(x)`
can be computed at a (large)
number of points and plotted together with :math:`f(x)`. The construction
of :math:`u` points from the solution vector ``c`` is done
elementwise by evaluating :math:`\sum_rc_r{\tilde{\varphi}}_r(X)` at a (large)
number of points in each element in the local coordinate system,
and the discrete :math:`(x,u)` values on
each element are stored in separate arrays that are finally
concatenated to form a global array for :math:`x` and for :math:`u`.
The details are found in the ``u_glob`` function in
``fe_approx1D.py``.

.. _fem:approx:fe:A:structure:

The structure of the coefficient matrix
---------------------------------------

Let us first see how the global matrix looks like if we assemble
symbolic element matrices, expressed in terms of ``h``, from
several elements:


        >>> d=1; N_e=8; Omega=[0,1]  # 8 linear elements on [0,1]
        >>> phi = basis(d)
        >>> f = x*(1-x)
        >>> nodes, elements = mesh_symbolic(N_e, d, Omega)
        >>> A, b = assemble(nodes, elements, phi, f, symbolic=True)
        >>> A
        [h/3,   h/6,     0,     0,     0,     0,     0,     0,   0]
        [h/6, 2*h/3,   h/6,     0,     0,     0,     0,     0,   0]
        [  0,   h/6, 2*h/3,   h/6,     0,     0,     0,     0,   0]
        [  0,     0,   h/6, 2*h/3,   h/6,     0,     0,     0,   0]
        [  0,     0,     0,   h/6, 2*h/3,   h/6,     0,     0,   0]
        [  0,     0,     0,     0,   h/6, 2*h/3,   h/6,     0,   0]
        [  0,     0,     0,     0,     0,   h/6, 2*h/3,   h/6,   0]
        [  0,     0,     0,     0,     0,     0,   h/6, 2*h/3, h/6]
        [  0,     0,     0,     0,     0,     0,     0,   h/6, h/3]

The reader is encouraged to assemble the element matrices by hand and verify
this result, as this exercise will give a hands-on understanding of
what the assembly is about. In general we have a coefficient matrix that is
tridiagonal:



.. math::
        
        A = \frac{h}{6}
        \left(
        \begin{array}{cccccccccc}
        2 & 1 & 0
        &\cdots & \cdots & \cdots & \cdots & \cdots & 0 \\ 
        1 & 4 & 1 & \ddots &   & &  & &  \vdots \\ 
        0 & 1 & 4 & 1 &
        \ddots & &  &  & \vdots \\ 
        \vdots & \ddots &  & \ddots & \ddots & 0 &  & & \vdots \\ 
        \vdots &  & \ddots & \ddots & \ddots & \ddots & \ddots & & \vdots \\ 
        \vdots & &  & 0 & 1 & 4 & 1 & \ddots & \vdots \\ 
        \vdots & & &  & \ddots & \ddots & \ddots &\ddots  & 0 \\ 
        \vdots & & & &  &\ddots  & 1  & 4  & 1 \\ 
        0 &\cdots & \cdots &\cdots & \cdots & \cdots  & 0 & 1 & 2
        \end{array}
        \right)
        



The structure of the right-hand side is more difficult to reveal since
it involves an assembly of elementwise integrals of
:math:`f(x(X)){\tilde{\varphi}}_r(X)h/2`, which obviously depend on the
particular choice of :math:`f(x)`.
Numerical integration can give some insight into the nature of
the right-hand side. For this purpose it
is easier to look at the integration in :math:`x` coordinates, which
gives the general formula :eq:`fem:approx:fe:bi:formula1`.
For equal-sized elements of length :math:`h`, we can apply the
Trapezoidal rule at the global node points to arrive at


.. math::
        
        b_i = h\left( \frac{1}{2} {\varphi}_i(x_{0})f(x_{0}) +
        \frac{1}{2} {\varphi}_i(x_{N})f(x_{N}) + \sum_{j=1}^{N-1}
        {\varphi}_i(x_{j})f(x_{j})\right)
        



.. math::
          
         =
        \left\lbrace\begin{array}{ll}
        \frac{1}{2} hf(x_i), i=0\hbox{ or }i=N,
        



.. math::
          
        h f(x_i),  1 \leq i \leq N-1
        \end{array}\right.
        

The reason for this simple formula is simply that :math:`{\varphi}_i` is either
0 or 1 at the nodes and 0 at all but one of them.

Going to P2 elements (``d=2``) leads
to the element matrix


.. math::
        
        A^{(e)} = \frac{h}{30}
        \left(\begin{array}{ccc}
        4 & 2 & -1\\ 
        2 & 16 & 2\\ 
        -1 & 2 & 4
        \end{array}\right)
        

and the following global assembled matrix from four elements:


.. math::
        
        A = \frac{h}{30}
        \left(
        \begin{array}{ccccccccc}
        4 & 2 & - 1 & 0
          & 0 & 0 & 0 & 0 & 0\\ 
          2 & 16 & 2
          & 0 & 0 & 0 & 0 & 0 & 0\\- 1 & 2 &
          8 & 2 & - 1 & 0 & 0 & 0 &
          0\\0 & 0 & 2 & 16 & 2 & 0 & 0
          & 0 & 0\\0 & 0 & - 1 & 2 & 8
          & 2 & - 1 & 0 & 0\\0 & 0 & 0 & 0 &
          2 & 16 & 2 & 0 & 0\\0 & 0 & 0
          & 0 & - 1 & 2 & 8 &
          2 & - 1\\0 & 0 & 0 & 0 & 0 & 0 &
          2 & 16 & 2\\0 & 0 & 0 & 0 & 0
          & 0 & - 1 & 2 & 4
        \end{array}
        \right)
        

In general, for :math:`i` odd we have the nonzeroes


.. math::
         A_{i,i-2} = -1,\quad A_{i-1,i}=2,\quad A_{i,i} = 8,\quad A_{i+1,i}=2,
        \quad A_{i+2,i}=-1,

multiplied by :math:`h/30`, and for :math:`i` even we have the nonzeros


.. math::
         A_{i-1,i}=2,\quad A_{i,i} = 16,\quad A_{i+1,i}=2,

multiplied by :math:`h/30`. The rows with odd numbers correspond to
nodes at the element boundaries and get contributions from two
neighboring elements in the assembly process,
while the even numbered rows correspond to
internal nodes in the elements where the only one element contributes
to the values in the global matrix.

.. _fem:approx:fe:impl:ex2:

Applications
------------

With the aid of the ``approximate`` function in the ``fe_approx1D``
module we can easily investigate the quality of various finite element
approximations to some given functions. Figure :ref:`fem:approx:fe:x9:sin`
shows how linear and quadratic elements approximates the polynomial
:math:`f(x)=x(1-x)^8` on :math:`\Omega =[0,1]`, using equal-sized elements.
The results arise from the program


.. code-block:: python

        import sympy as sm
        from fe_approx1D import approximate
        x = sm.Symbol('x')
        
        approximate(f=x*(1-x)**8, symbolic=False, d=1, N_e=4)
        approximate(f=x*(1-x)**8, symbolic=False, d=2, N_e=2)
        approximate(f=x*(1-x)**8, symbolic=False, d=1, N_e=8)
        approximate(f=x*(1-x)**8, symbolic=False, d=2, N_e=4)

The quadratic functions are seen to be better than the linear ones for the same
value of :math:`N`, as we increase :math:`N`. This observation has some generality:
higher degree is not necessarily better on a coarse mesh, but it is as
we refined the mesh.



.. _fem:approx:fe:x9:sin:

.. figure:: fe_p1_p2_x9_248e.png
   :width: 800

   *Comparison of the finite element approximations: 4 P1 elements with 5 nodes (upper left), 2 P2 elements with 5 nodes (upper right), 8 P1 elements with 9 nodes (lower left), and 4 P2 elements with 9 nodes (lower right)*



.. _fem:approx:fe:impl:sparse:

Sparse matrix storage and solution
----------------------------------


.. index:: sparse matrices


Some of the examples in the preceding section took several minutes to
compute, even on small meshes consisting of up to eight elements.
The main explanation for slow computations is unsuccessful
symbolic integration: ``sympy`` may use a lot of energy on
integrals like :math:`\int f(x(X)){\tilde{\varphi}}_r(X)h/2 dx` before
giving up, and the program then resorts to numerical integration.
Codes that can deal with a large number of basis functions and
accept flexible choices of :math:`f(x)` should compute all integrals
numerically and replace the matrix objects from ``sympy`` by
the far more efficient array objects from ``numpy``.

Another reason for slow code is related to the fact that most of the
matrix entries :math:`A_{i,j}` are zero, because :math:`({\varphi}_i,{\varphi}_j)=0`
unless :math:`i` and :math:`j` are nodes in the same element.  A matrix whose
majority of entries are zeros, is known as a *sparse* matrix.  The
sparsity should be utilized in software as it dramatically decreases
the storage demands and the CPU-time needed to compute the solution of
the linear system. This optimization is not critical in 1D problems
where modern computers can afford computing with all the zeros in the
complete square matrix, but in 2D and especially in 3D, sparse
matrices are fundamental for feasible finite element computations.

In 1D problems, using a
numbering of nodes and elements from left to right over the domain,
the assembled coefficient matrix has only a few diagonals different
from zero. More precisely, :math:`2d+1` diagonals are different from
zero. With a different numbering of global nodes, say a random
ordering, the diagonal structure is lost, but the number of
nonzero elements is unaltered. Figures :ref:`fem:approx:fe:sparsity:P1`
and :ref:`fem:approx:fe:sparsity:P3` exemplify sparsity patterns.


.. _fem:approx:fe:sparsity:P1:

.. figure:: sparsity_pattern_1D_30.png
   :width: 800

   *Matrix sparsity pattern for left-to-right numbering (left) and random numbering (right) of nodes in P1 elements*



.. _fem:approx:fe:sparsity:P3:

.. figure:: sparsity_pattern_1DP3_30.png
   :width: 800

   *Matrix sparsity pattern for left-to-right numbering (left) and random numbering (right) of nodes in P3 elements*


.. 2DO:

.. figure of diagonals vs random, exact examples on sparsity in 2D/3D?


The ``scipy.sparse`` library supports creation of sparse matrices
and linear system solution.

 * ``scipy.sparse.diags`` for matrix defined via diagonals

 * ``scipy.sparse.lil_matrix`` for creation via setting matrix entries

 * ``scipy.sparse.dok_matrix`` for creation via setting matrix entries
.. 2DO

.. Examples to come....

.. Exercise: introduce a random numbering of global nodes; need arbitrary, sparse matrix.


.. _fem:approx:fe:fd:

Comparison of finite element and finite difference approximation
================================================================

The previous sections on approximating :math:`f` by a finite element function :math:`u`
utilize the projection/Galerkin or
least squares approaches to minimize the approximation
error. We may, alternatively, use the collocation/interpolation method
as described in the section :ref:`fem:approx:fe:impl:ex1:collocation`.
Here we shall compare these three approaches with what one does in
the finite difference method when representing a given function on a mesh.


.. _fem:approx:fe:fd:fdproj:

Finite difference approximation of given functions
--------------------------------------------------

Approximating a given function :math:`f(x)` on a mesh in a finite difference
context will typically just sample :math:`f` at the mesh points. If :math:`u_i`
is the value of the approximate :math:`u` at the mesh point :math:`x_{i}`, we have
:math:`u_i = f(x_{i})`.
The collocation/interpolation method using finite element basis
functions gives exactly the same representation,
as shown the section :ref:`fem:approx:fe:impl:ex1:collocation`,


.. math::
         u(x_{i}) = c_i = f(x_{i}){\thinspace .}


How does a finite element Galerkin or least squares approximation differ
from this straightforward interpolation of :math:`f`? This is the question
to be addressed next.
We now limit the scope to P1 elements since this is the element type
that gives formulas closest to those arising in the finite difference
method.

.. _fem:approx:fe:fd:feproj:

Finite difference interpretation of a finite element approximation
------------------------------------------------------------------


The linear system arising from a Galerkin or least squares approximation
reads in general


.. math::
        
        \sum_{j\in{I}} c_j ({\psi}_i,{\psi}_j) = (f,{\psi}_i),\quad i\in{I}{\thinspace .}
        

In the finite element approximation we choose :math:`{\psi}_i ={\varphi}_i`.
With :math:`{\varphi}_i` corresponding to P1 elements and a uniform mesh of
element length :math:`h` we have in the section :ref:`fem:approx:global:linearsystem` calculated the matrix with entries
:math:`({\varphi}_i,{\varphi}_j)`.  Equation number :math:`i` reads


.. math::
   :label: fem:deq:1D:approx:deq:massmat:diffeq2
        
        \frac{h}{6}(u_{i-1} + 4u_i + u_{i+1}) = (f,{\varphi}_i)
        {\thinspace .}
        
        

The first and last equation, corresponding to :math:`i=0` and :math:`i=N` are slightly
different, see the section :ref:`fem:approx:fe:A:structure`.

The finite difference counterpart to
:eq:`fem:deq:1D:approx:deq:massmat:diffeq2` is just :math:`u_i=f_i`
as explained in the section :ref:`fem:approx:fe:fd:fdproj`.
To easier compare this result to
the finite element approach to approximating functions, we can rewrite
the left-hand side of :eq:`fem:deq:1D:approx:deq:massmat:diffeq2`
as


.. math::
        
        h(u_i + \frac{1}{6}(u_{i-1} - 2u_i + u_{i+1}))
        {\thinspace .}
        

Thinking in terms of finite differences, we can write this expression
using finite difference operator notation:


.. math::
         [h(u + \frac{h^2}{6}D_x D_x u)]_i,

which is nothing but the standard discretization of


.. math::
         h(u + \frac{h^2}{6}u''){\thinspace .}


Before interpreting the approximation procedure as solving a
differential equation, we need to work out what the right-hand side is
in the context of P1 elements.
Since :math:`{\varphi}_i` is the linear function that is 1 at
:math:`x_{i}` and zero at all other nodes, only the interval :math:`[x_{i-1},x_{i+1}]`
contribute to the integral on the right-hand side. This integral is
naturally split into two parts according to
:eq:`fem:approx:fe:phi:1:formula2`:


.. math::
         (f,{\varphi}_i) = \int_{x_{i-1}}^{x_{i}} f(x)\frac{1}{h} (x - x_{i-1}) dx
        + \int_{x_{i}}^{x_{i+1}} f(x)\frac{1}{h}(1 - (x - x_{i})) dx
        {\thinspace .}
        

However, if :math:`f` is not known we cannot do much else with this expression.
It is clear that many values of
:math:`f` around :math:`x_{i}` contributes to the right-hand side, not just
the single point value :math:`f(x_{i})`
as in the finite difference method.

To proceed with the right-hand side, we can
turn to numerical integration schemes.
The Trapezoidal method for :math:`(f,{\varphi}_i)`, based on
sampling the integrand :math:`f{\varphi}_i` at the node points :math:`x_{i}=i h`
gives


.. math::
         (f,{\varphi}_i) = \int_\Omega f{\varphi}_i dx\approx h\frac{1}{2}(
        f(x_{0}){\varphi}_i(x_{0}) + f(x_{N}){\varphi}_i(x_{N}))
        + h\sum_{j=1}^{N-1} f(x_{j}){\varphi}_i(x_{j})
        {\thinspace .}
        

Since :math:`{\varphi}_i` is zero at all these points, except at :math:`x_{i}`, the
Trapezoidal rule collapses to one term:


.. math::
        
        (f,{\varphi}_i) \approx hf(x_{i}),
        

for :math:`i=1,\ldots,N-1`,
which is the same result as with collocation/interpolation, and of course
the same result as in the finite difference method.
For :math:`i=0` and :math:`i=N` we get contribution from only one element so


.. math::
        
        (f,{\varphi}_i) \approx \frac{1}{2}hf(x_{i}),\quad i=0,\ i=N
        {\thinspace .}
        


Simpson's rule with sample points also in the middle of
the elements, at :math:`x_{i+\frac{1}{2}}=(x_{i} + x_{i+1})/2`,
can be written as


.. math::
         \int_\Omega g(x)dx \approx \frac{\tilde h}{3}\left( g(x_{0}) +
        2\sum_{j=1}^{N-1} g(x_{j})
        + 4\sum_{j=0}^{N-1} g(x_{j+\frac{1}{2}}) + f(x_{2N})\right),
        

where :math:`\tilde h= h/2` is the spacing between the sample points.
Our integrand is :math:`g=f{\varphi}_i`. For all the node points,
:math:`{\varphi}_i(x_{j})=\delta_{ij}`, and therefore
:math:`\sum_{j=1}^{N-1} f(x_{j}){\varphi}_i(x_{j})=f(x_{i})`.
At the midpoints, :math:`{\varphi}_i(x_{i\pm\frac{1}{2}})=1/2` and
:math:`{\varphi}_i(x_{j+\frac{1}{2}})=0` for :math:`j>1` and :math:`j<i-1`.
Consequently,


.. math::
         \sum_{j=0}^{N-1} f(x_{j+\frac{1}{2}}){\varphi}_i(x_{j+\frac{1}{2}})
        = \frac{1}{2}(fx_{j-\frac{1}{2}} + x_{j+\frac{1}{2}}){\thinspace .}

When :math:`1\leq i\leq N-1` we then get


.. math::
        
        (f,{\varphi}_i) \approx
        \frac{h}{3}(f_{i-\frac{1}{2}} + f_i + f_{i+\frac{1}{2}})
        {\thinspace .}
        

This result shows that, with Simpson's rule, the finite element method
operates with the average of :math:`f` over three points, while the finite difference
method just applies :math:`f` at one point. We may interpret this as
a "smearing" or smoothing of :math:`f` by the finite element method.

We can now summarize our findings. With the approximation of
:math:`(f,{\varphi}_i)` by the Trapezoidal rule, P1 elements give rise
to equations that can be expressed as a finite difference
discretization of


.. math::
        
        u + \frac{h^2}{6} u'' = f,\quad u'(0)=u'(L)=0,
        

expressed with operator notation as


.. math::
        
        [u + \frac{h^2}{6} D_x D_x u = f]_i{\thinspace .}  

As :math:`h\rightarrow 0`, the extra term proportional to :math:`u''` goes to zero,
and the two methods are then equal.

With the Simpson's rule, we may say that we solve


.. math::
        
        [u + \frac{h^2}{6} D_x D_x u = \bar f]_i,
        

where :math:`\bar f_i` means the average :math:`\frac{1}{3}(f_{i-1/2} + f_i + f_{i+1/2})`.

The extra term :math:`\frac{h^2}{6} u''` represents a smoothing effect: with
just this term, we would find :math:`u` by integrating :math:`f` twice and thereby
smooth :math:`f` considerably. In addition, the finite element
representation of :math:`f` involves an average, or a smoothing, of :math:`f` on
the right-hand side of the equation system. If :math:`f` is a noisy
function, direct interpolation :math:`u_i=f_i` may result in a noisy :math:`u`
too, but with a Galerkin or least squares formulation and P1 elements,
we should expect that :math:`u` is smoother than :math:`f` unless :math:`h` is very
small.

The interpretation that finite elements tend to smooth the solution
is valid in applications far beyond approximation of 1D functions.


Making finite elements behave as finite differences
---------------------------------------------------

With a simple trick, using numerical integration, we can easily produce
the result :math:`u_i=f_i` with the Galerkin or least square formulation
with P1 elements. This is useful in many occasions when we deal
with more difficult differential equations and want the finite element
method to have properties like the finite difference method (solving
standard linear wave equations is one primary example).

Computations in physical space
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We have already seen that applying the Trapezoidal rule to the
right-hand side :math:`(f,{\varphi}_i)` simply gives :math:`f` sampled at :math:`x_{i}`.
Using the Trapezoidal rule on the  matrix entries
:math:`A_{i,j}=({\varphi}_i,{\varphi}_j)` involves a sum

.. math::
         \sum_k {\varphi}_i(x_{k}){\varphi}_j(x_{k}),

but :math:`{\varphi}_i(x_{k})=\delta_{ik}` and
:math:`{\varphi}_j(x_{k})=\delta_{jk}`.
The product :math:`{\varphi}_i{\varphi}_j` is then different from zero only
when sampled at :math:`x_{i}` and :math:`i=j`. The Trapezoidal
approximation to the integral
is then


.. math::
         ({\varphi}_i,{\varphi}_j) \approx h,\quad i=j,

and zero if :math:`i\neq j`. This means that we have obtained a diagonal matrix!
The first and last diagonal elements, :math:`({\varphi}_0,{\varphi}_0)` and
:math:`({\varphi}_N,{\varphi}_N)` get contribution only from the first and last
element, respectively, resulting in the approximate integral value :math:`h/2`.
The corresponding right-hand side also has a factor :math:`1/2` for :math:`i=0` and :math:`i=N`.
Therefore, the least squares or Galerkin approach with P1 elements and
Trapezoidal integration results in


.. math::
         c_i = f_i,\quad i\in{I}{\thinspace .}  


Simpsons's rule can be used to achieve a similar result for P2 elements, i.e,
a diagonal coefficient matrix, but with the previously derived
average of :math:`f` on the right-hand side.

Elementwise computations
~~~~~~~~~~~~~~~~~~~~~~~~

Identical results to those above will arise if we perform elementwise
computations. The idea is to use the Trapezoidal rule on the reference
element for computing the element matrix and vector. When assembled,
the same equations :math:`c_i=f(x_{i})` arise. :ref:`fem:approx:fe:exer:1D:trapez` encourages you to carry out the
details.

.. see ex_fe_approx1D_session.py for an example of symbolic comp.



.. index:: mass matrix

.. index:: mass lumping

.. index:: lumped mass matrix


Terminology
~~~~~~~~~~~

The matrix with entries :math:`({\varphi}_i,{\varphi}_j)` typically arises from
terms proportional to :math:`u` in a differential equation where :math:`u` is the
unknown function. This matrix is often called the *mass matrix*,
because in the early days of the finite element method, the matrix
arose from the mass times acceleration term in Newton's second law of
motion. Making the mass matrix diagonal by, e.g., numerical
integration, as demonstrated above, is a widely used technique and is
called *mass lumping*. In time-dependent problems it can sometimes
enhance the numerical accuracy and computational efficiency of the
finite element method.  However, there are also examples where mass
lumping destroys accuracy.




.. _fem:approx:fe:element:

A generalized element concept
=============================


So far, finite element computing has employed the ``nodes`` and
``element`` lists together with the definition of the basis functions
in the reference element. Suppose we want to introduce a piecewise
constant approximation with one basis function :math:`{\tilde{\varphi}}_0(x)=1` in
the reference element, corresponding to a :math:`{\varphi}_i(x)` function that
is 1 on element number :math:`i` and zero on all other elements.
Although we could associate the function value
with a node in the middle of the elements, there are no nodes at the
ends, and the previous code snippets will not work because we
cannot find the element boundaries from the ``nodes`` list.

.. _fem:approx:fe:element:terminology:

Cells, vertices, and degrees of freedom
---------------------------------------


.. index:: cell

.. index:: vertex

.. index:: degree of freedom

.. index:: reference cell


We now introduce *cells* as the subdomains :math:`\Omega^{(e)}` previously
referred as elements. The cell boundaries are denoted as *vertices*.
The reason for this name is that cells are recognized by their vertices
in 2D and 3D. We also define a set of *degrees of freedom*, which are
the quantities we aim to compute. The most common type of degree
of freedom is the value of the unknown function :math:`u` at some point.
(For example, we can introduce nodes as before and say the degrees of
freedom are the values of :math:`u` at the nodes.) The basis functions are
constructed so that they equal unity for one particular degree of
freedom and zero for the rest. This property ensures that when
we evaluate :math:`u=\sum_j c_j{\varphi}_j` for degree of freedom number :math:`i`,
we get :math:`u=c_i`. Integrals are performed over cells, usually by
mapping the cell of interest to a *reference cell*.

With the concepts of cells, vertices, and degrees of freedom we
increase the decoupling of the geometry (cell, vertices) from the
space of basis functions. We will associate different
sets of basis functions with a cell. In 1D, all cells are intervals,
while in 2D we can have cells that are triangles with straight sides,
or any polygon, or in fact any two-dimensional geometry. Triangles and
quadrilaterals are most common, though. The popular cell types in 3D
are tetrahedra and hexahedra.

.. _fem:approx:fe:element:def:

Extended finite element concept
-------------------------------


.. index::
   single: finite element, definition

.. index:: dof map


The concept of a *finite element* is now

  * a *reference cell* in a local reference coordinate system;

  * a set of *basis functions* :math:`{\tilde{\varphi}}_i` defined on the cell;

  * a set of *degrees of freedom* that uniquely determines
    the basis functions such that :math:`{\tilde{\varphi}}_i=1` for degree of freedom
    number :math:`i` and :math:`{\tilde{\varphi}}_i=0` for all other degrees of freedom;

  * a mapping between local and global degree of freedom numbers,
    here called the *dof map*;

  * a geometric *mapping* of the reference cell onto to cell in the physical
    domain.

There must be a geometric description of a cell. This is trivial in 1D
since the cell is an interval and is described by the interval limits,
here called vertices. If the cell is :math:`\Omega^{(e)}=[x_L,x_R]`,
vertex 0 is :math:`x_L` and vertex 1 is :math:`x_R`. The reference cell in 1D
is :math:`[-1,1]` in the reference coordinate system :math:`X`.


.. index::
   single: finite element expansion; reference element


The expansion of :math:`u` over one cell is often used:


.. math::
        
        u(x) = \tilde u(X) = \sum_{r} c_r{\tilde{\varphi}}_r(X),\quad x\in\Omega^{(e)},\ 
        X\in [-1,1],
        

where the sum is taken over the numbers of the degrees of freedom and
:math:`c_r` is the value of :math:`u` for degree of freedom number :math:`r`.

Our previous P1, P2, etc., elements are defined by introducing :math:`d+1`
equally spaced nodes in the reference cell and saying that the degrees
of freedom are the :math:`d+1` function values at these nodes.  The basis
functions must be 1 at one node and 0 at the others, and the Lagrange
polynomials have exactly this property.  The nodes can be numbered
from left to right with associated degrees of freedom that are
numbered in the same way.  The degree of freedom mapping becomes what
was previously represented by the ``elements`` lists.  The cell mapping
is the same affine mapping :eq:`fem:approx:fe:affine:mapping` as
before.



.. _fem:approx:fe:element:impl:

Implementation  (2)
-------------------


.. index:: cells list

.. index:: vertices list

.. index:: dof_map list


Implementationwise,

  * we replace ``nodes`` by ``vertices``;

  * we introduce ``cells`` such that ``cell[e][r]`` gives the mapping
    from local vertex ``r`` in cell ``e`` to the global vertex number
    in ``vertices``;

  * we replace ``elements`` by ``dof_map`` (the contents are the same
    for Pd elements).

Consider the example from the section :ref:`fem:approx:fe:def:elements:nodes`
where :math:`\Omega =[0,1]` is divided into two cells,
:math:`\Omega^{(0)}=[0,0.4]` and :math:`\Omega^{(1)}=[0.4,1]`, as
depicted in Figure :ref:`fem:approx:fe:def:elements:nodes:fig:P2`.
The vertices are :math:`[0,0.4,1]`. Local vertex 0 and 1 are
:math:`0` and :math:`0.4` in cell 0 and :math:`0.4` and :math:`1` in cell 1.
A P2 element means that the degrees of freedom are
the value of :math:`u` at three equally spaced points (nodes) in each
cell. The data structures become[[[


.. code-block:: python

        vertices = [0, 0.4, 1]
        cells = [[0, 1], [1, 2]]
        dof_map = [[0, 1, 2], [1, 2, 3]]


If we would approximate :math:`f` by piecewise constants, known as
P0 elements, we simply
introduce one point or node in an element, preferably :math:`X=0`,
and define one degree of freedom, which is the function value
at this node. Moreover, we set :math:`{\tilde{\varphi}}_0(X)=1`.
The ``cells`` and ``vertices`` arrays remain the same, but
``dof_map`` is altered:


.. code-block:: python

        dof_map = [[0], [1], [2]]


We use the ``cells`` and ``vertices`` lists to retrieve information
on the geometry of a cell, while ``dof_map`` is the
:math:`q(e,r)` mapping introduced earlier in the
assembly of element matrices and vectors.
For example, the ``Omega_e`` variable (representing the cell interval)
in previous code snippets must now be computed as


.. code-block:: python

        Omega_e = [vertices[cells[e][0], vertices[cells[e][1]]

The assembly is done by


.. code-block:: python

        A[dof_map[e][r], dof_map[e][s]] += A_e[r,s]
        b[dof_map[e][r]] += b_e[r]


We will hereafter drop the ``nodes`` and ``elements`` arrays
and work exculsively with ``cells``, ``vertices``, and ``dof_map``.
The module ``fe_approx1D_numint.py`` now replaces the module
``fe_approx1D`` and offers similar functions that work with
the new concepts:


.. code-block:: python

        from fe_approx1D_numint import *
        x = sm.Symbol('x')
        f = x*(1 - x)
        N_e = 10
        vertices, cells, dof_map = mesh_uniform(N_e, d=3, Omega=[0,1])
        phi = [basis(len(dof_map[e])-1) for e in range(N_e)]
        A, b = assemble(vertices, cells, dof_map, phi, f)
        c = np.linalg.solve(A, b)
        # Make very fine mesh and sample u(x) on this mesh for plotting
        x_u, u = u_glob(c, vertices, cells, dof_map,
                        resolution_per_element=51)
        plot(x_u, u)

These steps are offered in the ``approximate`` function, which we here
apply to see how well four P0 elements (piecewise constants)
can approximate a parabola:


.. code-block:: python

        from fe_approx1D_numint import *
        x=sm.Symbol("x")
        for N_e in 4, 8:
            approximate(x*(1-x), d=0, N_e=N_e, Omega=[0,1])

Figure :ref:`fem:approx:fe:element:impl:fig:P0:x2` shows the result.


.. _fem:approx:fe:element:impl:fig:P0:x2:

.. figure:: fe_p0_x2_4e_8e.png
   :width: 600

   *Approximation of a parabola by 4 (left) and 8 (right) P0 elements*



.. _fem:approx:fe:element:impl:error:

Computing the error of the approximation
----------------------------------------

So far we have focused on computing the coefficients :math:`c_j` in the
approximation :math:`u(x)=\sum_jc_j{\varphi}_j` as well as on plotting :math:`u` and
:math:`f` for visual comparison. A more quantitative comparison needs to
investigate the error :math:`e(x)=f(x)-u(x)`. We mostly want a single number to
reflect the error and use a norm for this purpose, usually the :math:`L^2` norm


.. math::
         ||e||_{L^2} = \left(\int_{\Omega} e^2 dx\right)^{1/2}{\thinspace .}

Since the finite element approximation is defined for all :math:`x\in\Omega`,
and we are interested in how :math:`u(x)` deviates from :math:`f(x)` through all
the elements,
we can either integrate analytically or use an accurate numerical
approximation. The latter is more convenient as it is a generally
feasible and simple approach. The idea is to sample :math:`e(x)`
at a large number of points in each element. The function ``u_glob``
in the ``fe_approx1D_numint`` module does this for :math:`u(x)` and returns
an array ``x`` with coordinates and an array ``u`` with the :math:`u` values:


.. code-block:: python

        x, u = u_glob(c, vertices, cells, dof_map,
                      resolution_per_element=101)
        e = f(x) - u

Let us use the Trapezoidal method to approximate the integral. Because
different elements may have different lengths, the ``x`` array has
a non-uniformly distributed set of coordinates. Also, the ``u_glob``
function works in an element by element fashion such that coordinates
at the boundaries between elements appear twice. We therefore need
to use a "raw" version of the Trapezoidal rule where we just add up
all the trapezoids:


.. math::
         \int_\Omega g(x) dx \approx \sum_{j=0}^{n-1} \frac{1}{2}(g(x_j) +
        g(x_{j+1}))(x_{j+1}-x_j),

if :math:`x_0,\ldots,x_n` are all the coordinates in ``x``. In
vectorized Python code,


.. code-block:: python

        g_x = g(x)
        integral = 0.5*np.sum((g_x[:-1] + g_x[1:])*(x[1:] - x[:-1]))

Computing the :math:`L^2` norm of the error, here named ``E``, is now achieved by


.. code-block:: python

        e2 = e**2
        E = np.sqrt(0.5*np.sum((e2[:-1] + e2[1:])*(x[1:] - x[:-1]))




.. admonition:: How does the error depend on :math:`h` and :math:`d`

   Theory and experiments show that the least squares or projection/Galerkin
   method in combination with Pd elements of equal length :math:`h` has an error
   
   
   .. math::
      :label: fem:approx:fe:error:theorem
           
           ||e||_{L^2} = Ch^{d+1},
           
           
   
   where :math:`C` is a constant depending on :math:`f`, but not on :math:`h` or :math:`d`.


.. _fem:approx:fe:element:impl:Hermite:

Example: Cubic Hermite polynomials
----------------------------------


.. index:: Hermite polynomials


The finite elements considered so far represent :math:`u` as piecewise
polynomials with discontinuous derivatives at the cell boundaries.
Sometimes it is desirable to have continuous derivatives. A primary
examples is the solution of differential equations with fourth-order
derivatives where standard finite element formulations lead to
a need for basis functions with continuous first-order derivatives.
The most common type of such basis functions in 1D is the
so-called cubic Hermite polynomials.
The construction of such polynomials, as explained next, will further
exemplify the concepts of a cell, vertex, degree of freedom, and dof map.

Given a reference cell :math:`[-1,1]`, we seek cubic polynomials
with the values of the *function* and its *first-order derivative* at
:math:`X=-1` and :math:`X=1` as the four degrees of freedom. Let us number
the degrees of freedom as

  * 0: value of function at :math:`X=-1`

  * 1: value of first derivative at :math:`X=-1`

  * 2: value of function at :math:`X=1`

  * 3: value of first derivative at :math:`X=1`

By having the derivatives as unknowns, we ensure that
the derivative of a basis function in two neighboring elements
is the same at the node points.

The four basis functions can be written in a general form

.. math::
         {\tilde{\varphi}}_i (X) = \sum_{j=0}^3 C_{i,j}X^j, 

with four coefficients :math:`C_{i,j}`, :math:`j=0,1,2,3`, to be determined for
each :math:`i`. The constraints
that basis function number :math:`i` must be 1 for degree of
freedom number :math:`i` and zero for the other three degrees of freedom,
gives four equations to determine :math:`C_{i,j}` for each :math:`i`. In mathematical
detail,

.. math::
        
        {\tilde{\varphi}}_0 (-1) &= 1,\quad {\tilde{\varphi}}_0 (1)={\tilde{\varphi}}_0'(-1)={\tilde{\varphi}}_i' (1)=0,\\ 
        {\tilde{\varphi}}_1' (-1) &= 1,\quad {\tilde{\varphi}}_1 (-1)={\tilde{\varphi}}_1(1)={\tilde{\varphi}}_1' (1)=0,\\ 
        {\tilde{\varphi}}_2 (1) &= 1,\quad {\tilde{\varphi}}_2 (-1)={\tilde{\varphi}}_2'(-1)={\tilde{\varphi}}_2' (1)=0,\\ 
        {\tilde{\varphi}}_3' (1) &= 1,\quad {\tilde{\varphi}}_3 (-1)={\tilde{\varphi}}_3'(-1)={\tilde{\varphi}}_3 (1)=0
        {\thinspace .}
        

These four :math:`4\times 4` linear equations can be solved, yielding the
following formulas
for the cubic basis functions:


.. math::
        
        {\tilde{\varphi}}_0(X) = 1 - \frac{3}{4}(X+1)^2 + \frac{1}{4}(X+1)^3
        



.. math::
          
        {\tilde{\varphi}}_1(X) = -(X+1)(1 - \frac{1}{2}(X+1))^2
        



.. math::
          
        {\tilde{\varphi}}_2(X) = \frac{3}{4}(X+1)^2 - \frac{1}{2}(X+1)^3
        



.. math::
          
        {\tilde{\varphi}}_3(X) = -\frac{1}{2}(X+1)(\frac{1}{2}(X+1)^2 - (X+1))
        



.. math::
          
        


The construction of the dof map needs a scheme for numbering the
global degrees of freedom. A natural left-to-right numbering
has the function value at vertex :math:`x_{i}`
as degree of freedom number :math:`2i` and the value of the derivative
at :math:`x_{i}` as degree of freedom number :math:`2i+1`, :math:`i=0,\ldots,N_e+1`.



Numerical integration
=====================

Finite element codes usually apply numerical approximations to
integrals. Since the integrands in the coefficient matrix often
are (lower-order) polynomials, integration rules that can
integrate polynomials exactly are popular.

The numerical integration rules can be expressed in a common form,


.. math::
        
        \int_{-1}^{1} g(X)dX \approx \sum_{j=0}^M w_j\bar X_j,
        

where :math:`\bar X_j` are *integration points* and :math:`w_j` are
*integration weights*, :math:`j=0,\ldots,M`.
Different rules correspond to different choices of points and weights.

The very simplest method is the *Midpoint rule*,

.. math::
        
        \int_{-1}^{1} g(X)dX \approx 2g(0),\quad \bar X_0=0,\ w_0=2,
        

which integrates linear functions exactly.

.. _fem:approx:fe:numint1:

Newton-Cotes rules
------------------


.. index::
   single: numerical integration; Midpoint rule


.. index::
   single: numerical integration; Trapezoidal rule


.. index::
   single: numerical integration; Simpson's rule


.. index::
   single: numerical integration; Newton-Cotes formulas


.. index:: Midpoint rule

.. index:: Trapezoidal rule

.. index:: Simpson's rule


.. index:: Newton-Cotes rules


The `Newton-Cotes <http://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas>`_
rules are based on a fixed uniform distribution of the integration points.
The first two formulas in this family are the well-known
*Trapezoidal rule*,


.. math::
   :label: fem:approx:fe:numint1:trapez
        
        \int_{-1}^{1} g(X)dX \approx g(-1) + g(1),\quad \bar X_0=-1,\ \bar X_1=1,\ w_0=w_1=1,
         
        

and *Simpson's rule*,


.. math::
        
        \int_{-1}^{1} g(X)dX \approx \frac{1}{3}\left(g(-1) + 4g(0)
        + g(1)\right),
        

where


.. math::
        
        \bar X_0=-1,\ \bar X_1=0,\ \bar X_2=1,\ w_0=w_2=\frac{1}{3},\ w_1=\frac{4}{3}{\thinspace .}  

Newton-Cotes rules up to five points is supported in the
module file `numint.py <http://tinyurl.com/jvzzcfn/fem/numint.py>`_.

For higher accuracy one can divide the reference cell into a set of
subintervals and use the rules above on each subinterval. This approach
results in *composite* rules, well-known from basic introductions
to numerical integration of :math:`\int_{a}^{b}f(x)dx`.

Gauss-Legendre rules with optimized points
------------------------------------------


.. index:: Gauss-Legendre quadrature


More accurate rules, for a given :math:`M`, arise if the location of the
integration points are optimized for polynomial integrands.  The
`Gauss-Legendre rules <http://en.wikipedia.org/wiki/Gaussian_quadrature>`_ (also known as
Gauss-Legendre quadrature or Gaussian quadrature) constitute one such
class of integration methods. Two widely applied Gauss-Legendre rules
in this family have the choice


.. math::
        
        M=1:\quad \bar X_0=-\frac{1}{\sqrt{3}},\ 
        \bar X_1=\frac{1}{\sqrt{3}},\ w_0=w_1=1
        



.. math::
          
        M=2:\quad \bar X_0=-\sqrt{\frac{3}{{5}}},\ \bar X_0=0,\ 
        \bar X_2= \sqrt{\frac{3}{{5}}},\ w_0=w_2=\frac{5}{9},\ w_1=\frac{8}{9}{\thinspace .}  

These rules integrate 3rd and 5th degree polynomials exactly.
In general, an :math:`M`-point Gauss-Legendre rule integrates a polynomial
of degree :math:`2M+1` exactly.
The code ``numint.py`` contains a large collection of Gauss-Legendre rules.

.. 2DO

.. Newton-Cotes: bedre med det som overskrift over

.. Later:

.. lumped mass via num int; example or exercise


.. non-uniform meshes

.. hand-calculation, extend software?

.. example: half a Gaussian hat with one fine-grid area and a coarse-grid area

.. adaptivity



.. _fem:approx:2D:

Approximation of functions in 2D
================================

All the concepts and algorithms developed for approximation of 1D functions
:math:`f(x)` can readily be extended to 2D functions :math:`f(x,y)` and 3D functions
:math:`f(x,y,z)`. Basically, the extensions consists of defining basis functions
:math:`{\psi}_i(x,y)` or :math:`{\psi}_i(x,y,z)` over some domain :math:`\Omega`, and
for the least squares and Galerkin methods, the integration is done over
:math:`\Omega`.

As in 1D, the least squares and projection/Galerkin methods
two lead to linear systems


.. math::
        
        \sum_{j\in{I}} A_{i,j}c_j &= b_i,\quad i\in{I},\\ 
        A_{i,j} &= ({\psi}_i,{\psi}_j),\\ 
        b_i &= (f,{\psi}_i),
        

where the inner product of two functions :math:`f(x,y)` and :math:`g(x,y)` is defined
completely analogously to the 1D case :eq:`fem:approx:LS:innerprod`:

.. math::
        
        (f,g) = \int_\Omega f(x,y)g(x,y) dx dy
        


.. _fem:approx:2D:global:

2D basis functions as tensor products of 1D functions
-----------------------------------------------------



.. index:: tensor product


One straightforward
way to construct a basis in 2D is to combine
1D basis functions. Say we have the 1D vector space


.. math::
   :label: fem:approx:2D:Vx
        
        V_x = \mbox{span}\{ \hat{\psi}_0(x),\ldots,\hat{\psi}_{N_x}(x)\}
        
        {\thinspace .}
        

A similar space for variation in :math:`y` can be defined,


.. math::
   :label: fem:approx:2D:Vy
        
        V_y = \mbox{span}\{ \hat{\psi}_0(y),\ldots,\hat{\psi}_{N_y}(y)\}
        
        {\thinspace .}
        

We can then form 2D basis functions as *tensor products* of 1D basis functions.



.. admonition:: Tensor products

   Given two vectors :math:`a=(a_0,\ldots,a_M)` and :math:`b=(b_0,\ldots,b_N)`,
   their *outer tensor product*, also called the *dyadic product*,
   is :math:`p=a\otimes b`, defined through
   
   
   .. math::
            p_{i,j}=a_ib_j,\quad i=0,\ldots,M,\ j=0,\ldots,N{\thinspace .}
   
   In the tensor terminology,
   :math:`a` and :math:`b` are first-order tensors (vectors with one index, also termed
   rank-1 tensors), and then their outer
   tensor product is a second-order tensor (matrix with two indices, also
   termed rank-2 tensor). The
   corresponding *inner tensor product* is the well-known scalar or dot
   product of two vectors: :math:`p=a\cdot b = \sum_{j=0}^N a_jb_j`. Now,
   :math:`p` is a rank-0 tensor.
   
   Tensors are typically represented by arrays in computer code.
   In the above example, :math:`a` and :math:`b` are represented by
   one-dimensional arrays of length
   :math:`M` and :math:`N`, respectively, while :math:`p=a\otimes b` must be represented
   by a two-dimensional array of size :math:`M\times N`.
   
   `Tensor products <http://en.wikipedia.org/wiki/Tensor_product>`_ can
   be used in a variety of context.


.. The following is from `<http://en.wikipedia.org/wiki/Tensor_product>`_,

.. Notation and examples

Given the vector spaces :math:`V_x` and :math:`V_y` as defined
in :eq:`fem:approx:2D:Vx` and :eq:`fem:approx:2D:Vy`, the
tensor product space :math:`V=V_x\otimes V_y` has a basis formed
as the tensor product of the basis for :math:`V_x` and :math:`V_y`.
That is, if :math:`\left\{ {\varphi}_i(x) \right\}_{i\in{I_x}}`
and :math:`\left\{ {\varphi}_i(y) \right\}_{i\in {I_y}}` are basis for
:math:`V_x` and :math:`V_y`, respectively, the elements in the basis for :math:`V` arise
from the tensor product:
:math:`\left\{ {\varphi}_i(x){\varphi}_j(y) \right\}_{i\in {I_x},j\in {I_y}}`.
The index sets are :math:`I_x=\{0,\ldots,N_x\}` and :math:`I_y=\{0,\ldots,N_y\}`.

The notation for a basis function in 2D can employ a double index as in


.. math::
         {\psi}_{p,q}(x,y) = \hat{\psi}_p(x)\hat{\psi}_q(y),
        \quad p\in{I_x},q\in{I_y}{\thinspace .}
        

The expansion for :math:`u` is then written as a double sum


.. math::
         u = \sum_{p\in{I_x}}\sum_{q\in{I_y}} c_{p,q}{\psi}_{p,q}(x,y){\thinspace .}
        

Alternatively, we may employ a single index,


.. math::
        
        {\psi}_i(x,y) = \hat{\psi}_p(x)\hat{\psi}_q(y),
        

and use the standard form for :math:`u`,


.. math::
         u = \sum_{j\in{I}} c_j{\psi}_i(x,y){\thinspace .}

The single index is related to the double index through
:math:`i=p N_y + q` or :math:`i=q N_x + p`.

Example: Polynomial basis in 2D
-------------------------------

Suppose we choose :math:`\hat{\psi}_p(x)=x^p`, and try an approximation with
:math:`N_x=N_y=1`:


.. math::
         {\psi}_{0,0}=1,\quad {\psi}_{1,0}=x, \quad {\psi}_{0,1}=y,
        \quad {\psi}_{1,1}=xy
        {\thinspace .}
        

Using a mapping to one index like :math:`i=q N_x + p`, we get


.. math::
         {\psi}_0=1,\quad {\psi}_1=x, \quad {\psi}_2=y,\quad{\psi}_3 =xy
        {\thinspace .}
        


With the specific choice :math:`f(x,y) = (1+x^2)(1+2y^2)` on
:math:`\Omega = [0,L_x]\times [0,L_y]`, we can perform actual calculations:


.. math::
        
        A_{0,0} &= ({\psi}_0,{\psi}_0) = \int_0^{L_y}\int_{0}^{L_x}
        {\psi}_0(x,y)^2 dx dy = \int_0^{L_y}\int_{0}^{L_x}dx dy = L_xL_y,\\ 
        A_{1,0} &= ({\psi}_1,{\psi}_0) = \int_0^{L_y}\int_{0}^{L_x} x dxdy =
        \frac{1}{2}L_x^2L_y,\\ 
        A_{0,1} &= ({\psi}_0,{\psi}_1) = \int_0^{L_y}\int_{0}^{L_x} y dxdy =
        \frac{1}{2}L_y^2L_x,\\ 
        A_{0,1} &= ({\psi}_0,{\psi}_1) = \int_0^{L_y}\int_{0}^{L_x} xy dxdy =
        \int_0^{L_y}ydy \int_{0}^{L_x} xdx =
        \frac{1}{4}L_y^2L_x^2
        {\thinspace .}
        

The right-hand side vector has the entries


.. math::
        
        b_{0} &= ({\psi}_0,f) = \int_0^{L_y}\int_{0}^{L_x}1\cdot (1+x^2)(1+2y^2) dxdy\\ 
        &= \int_0^{L_y}(1+2y^2)dy \int_{0}^{L_x} (1+x^2)dx
        = (L_y + \frac{2}{3}L_y^3)(L_x + \frac{1}{3}L_x^3)\\ 
        b_{1} &= ({\psi}_1,f) = \int_0^{L_y}\int_{0}^{L_x} x(1+x^2)(1+2y^2) dxdy\\ 
        &=\int_0^{L_y}(1+2y^2)dy \int_{0}^{L_x} x(1+x^2)dx
        = (L_y + \frac{2}{3}L_y^3)(\frac{1}{2}L_x^2 + \frac{1}{4}L_x^4)\\ 
        b_{2} &= ({\psi}_2,f) = \int_0^{L_y}\int_{0}^{L_x} y(1+x^2)(1+2y^2) dxdy\\ 
        &= \int_0^{L_y}y(1+2y^2)dy \int_{0}^{L_x} (1+x^2)dx
        = (\frac{1}{2}L_y + \frac{1}{2}L_y^4)(L_x + \frac{1}{3}L_x^3)\\ 
        b_{3} &= ({\psi}_2,f) = \int_0^{L_y}\int_{0}^{L_x} xy(1+x^2)(1+2y^2) dxdy\\ 
        &= \int_0^{L_y}y(1+2y^2)dy \int_{0}^{L_x} x(1+x^2)dx
        = (\frac{1}{2}L_y^2 + \frac{1}{2}L_y^4)(\frac{1}{2}L_x^2 + \frac{1}{4}L_x^4)
        {\thinspace .}
        


There is a general pattern in these calculations that we can explore.
An arbitrary matrix entry has the formula


.. math::
        
        A_{i,j} &= ({\psi}_i,{\psi}_j) = \int_0^{L_y}\int_{0}^{L_x}
        {\psi}_i{\psi}_j dx dy \\ 
        &= \int_0^{L_y}\int_{0}^{L_x}
        {\psi}_{p,q}{\psi}_{r,s} dx dy
        = \int_0^{L_y}\int_{0}^{L_x}
        \hat{\psi}_p(x)\hat{\psi}_q(y)\hat{\psi}_r(x)\hat{\psi}_s(y) dx dy\\ 
        &= \int_0^{L_y} \hat{\psi}_q(y)\hat{\psi}_s(y)dy
        \int_{0}^{L_x} \hat{\psi}_p(x) \hat{\psi}_r(x) dx\\ 
        &= \hat A^{(x)}_{p,r}\hat A^{(y)}_{q,s},
        

where


.. math::
         \hat A^{(x)}_{p,r} = \int_{0}^{L_x} \hat{\psi}_p(x) \hat{\psi}_r(x) dx,
        \quad
        \hat A^{(y)}_{q,s} = \int_0^{L_y} \hat{\psi}_q(y)\hat{\psi}_s(y)dy,
        

are matrix entries for one-dimensional approximations. Moreover,
:math:`i=q N_y+q` and :math:`j=s N_y+r`.

With :math:`\hat{\psi}_p(x)=x^p` we have


.. math::
         \hat A^{(x)}_{p,r} = \frac{1}{p+r+1}L_x^{p+r+1},\quad
        \hat A^{(y)}_{q,s} = \frac{1}{q+s+1}L_y^{q+s+1},
        

and


.. math::
         A_{i,j} = \hat A^{(x)}_{p,r} \hat A^{(y)}_{q,s} =
        \frac{1}{p+r+1}L_x^{p+r+1} \frac{1}{q+s+1}L_y^{q+s+1},
        

for :math:`p,r\in{I_x}` and :math:`q,s\in{I_y}`.

Corresponding reasoning for the right-hand side leads to

.. math::
        
        b_i &= ({\psi}_i,f) = \int_0^{L_y}\int_{0}^{L_x}{\psi}_i f\,dxdx\\ 
        &= \int_0^{L_y}\int_{0}^{L_x}\hat{\psi}_p(x)\hat{\psi}_q(y) f\,dxdx\\ 
        &= \int_0^{L_y}\hat{\psi}_q(y) (1+2y^2)dy
        \int_0^{L_y}\hat{\psi}_p(x) x^p (1+x^2)dx\\ 
        &= \int_0^{L_y} y^q (1+2y^2)dy
        \int_0^{L_y}x^p (1+x^2)dx\\ 
        &= (\frac{1}{q+1} L_y^{q+1} + \frac{2}{q+3}L_y^{q+3})
        (\frac{1}{p+1} L_x^{p+1} + \frac{2}{q+3}L_x^{p+3})
        


Choosing :math:`L_x=L_y=2`, we have


.. math::
        
        A =
        \left[\begin{array}{cccc}
        4 & 4 & 4 & 4\\ 
        4 & \frac{16}{3} & 4 & \frac{16}{3}\\ 
        4 & 4 & \frac{16}{3} & \frac{16}{3}\\ 
        4 & \frac{16}{3} & \frac{16}{3} & \frac{64}{9}
        \end{array}\right],\quad
        b = \left[\begin{array}{c}
        \frac{308}{9}\\\frac{140}{3}\\44\\60\end{array}\right],
        \quad c = \left[
        \begin{array}{r}
        -\frac{1}{9} \\ 
        \frac{4}{3} \\ 
         - \frac{2}{3} \\ 
         8
        \end{array}\right]
        {\thinspace .}
        

Figure :ref:`fem:approx:fe:2D:fig:ubilinear` illustrates the result.


.. _fem:approx:fe:2D:fig:ubilinear:

.. figure:: approx2D_bilinear.png
   :width: 800

   *Approximation of a 2D quadratic function (left) by a 2D bilinear function (right) using the Galerkin or least squares method*




.. _fem:approx:2D:global:code:

Implementation  (3)
-------------------

The ``least_squares`` function from
the section :ref:`fem:approx:global:orth` and/or the
file `approx1D.py <http://tinyurl.com/jvzzcfn/fem/fe_approx1D.py>`_
can with very small modifications solve 2D approximation problems.
First, let ``Omega`` now be a list of the intervals in :math:`x` and :math:`y` direction.
For example, :math:`\Omega = [0,L_x]\times [0,L_y]` can be represented
by ``Omega = [[0, L_x], [0, L_y]]``.

Second, the symbolic integration must be extended to 2D:


.. code-block:: python

        import sympy as sm
        
        integrand = phi[i]*phi[j]
        I = sm.integrate(integrand,
                         (x, Omega[0][0], Omega[0][1]),
                         (y, Omega[1][0], Omega[1][1]))

provided ``integrand`` is an expression involving the ``sympy`` symbols ``x``
and ``y``.
The 2D version of numerical integration becomes


.. code-block:: python

        if isinstance(I, sm.Integral):
            integrand = sm.lambdify([x,y], integrand)
            I = sm.mpmath.quad(integrand,
                               [Omega[0][0], Omega[0][1]],
                               [Omega[1][0], Omega[1][1]])

The right-hand side integrals are modified in a similar way.

Third, we must construct a list of 2D basis functions. Here are two
examples based on tensor products of 1D "Taylor-style" polynomials :math:`x^i`
and 1D sine functions :math:`\sin((i+1)\pi x)`:


.. code-block:: python

        def taylor(x, y, Nx, Ny):
            return [x**i*y**j for i in range(Nx+1) for j in range(Ny+1)]
        
        def sines(x, y, Nx, Ny):
            return [sm.sin(sm.pi*(i+1)*x)*sm.sin(sm.pi*(j+1)*y)
                    for i in range(Nx+1) for j in range(Ny+1)]

The complete code appears in
`approx2D.py <http://tinyurl.com/jvzzcfn/fem/fe_approx2D.py>`_.

The previous hand calculation where a quadratic :math:`f` was approximated by
a bilinear function can be computed symbolically by


        >>> from approx2D import *
        >>> f = (1+x**2)*(1+2*y**2)
        >>> phi = taylor(x, y, 1, 1)
        >>> Omega = [[0, 2], [0, 2]]
        >>> u = least_squares(f, phi, Omega)
        >>> print u
        8*x*y - 2*x/3 + 4*y/3 - 1/9
        >>> print sm.expand(f)
        2*x**2*y**2 + x**2 + 2*y**2 + 1

We may continue with adding higher powers to the basis:


        >>> phi = taylor(x, y, 2, 2)
        >>> u = least_squares(f, phi, Omega)
        >>> print u
        2*x**2*y**2 + x**2 + 2*y**2 + 1
        >>> print u-f
        0

For :math:`N_x\geq 2` and :math:`N_y\geq 2` we recover the exact function :math:`f`, as
expected, since in that case :math:`f\in V` (see
the section :ref:`fem:approx:global:exact`).

.. _fem:approx:3D:global:

Extension to 3D
---------------

Extension to 3D is in principle straightforward once the 2D extension
is understood. The only major difference is that we need the
repeated outer tensor product,


.. math::
         V = V_x\otimes V_y\otimes V_z{\thinspace .}

In general, given vectors (first-order tensors)
:math:`a^{(q)} = (a^{(q)}_0,\ldots,a^{(q)}_{N_q}`, :math:`q=0,\ldots,m`,
the tensor product :math:`p=a^{(0)}\otimes\cdots\otimes a^{m}` has
elements


.. math::
         p_{i_0,i_1,\ldots,i_m} = a^{(0)}_{i_1}a^{(1)}_{i_1}\cdots a^{(m)}_{i_m}{\thinspace .}

The basis functions in 3D are then


.. math::
         {\psi}_{p,q,r}(x,y,z) = \hat{\varphi}_p(x)\hat{\varphi}_q(y)\hat{\varphi}_r(z),

with :math:`p\in{I_x}`, :math:`q\in{I_y}`, :math:`r\in{I_z}`. The expansion of :math:`u` becomes


.. math::
         u(x,y,z) = \sum_{p\in{I_x}}\sum_{q\in{I_y}}\sum_{r\in{I_z}} c_{p,q,r}
        {\psi}_{p,q,r}(x,y,z){\thinspace .}

A single index can be introduced also here, e.g., :math:`i=N_xN_yr + q_Nx + p`,
:math:`u=\sum_i c_i{\varphi}_i(x,y,z)`.



.. admonition:: Use of tensor product spaces

   Constructing a multi-dimensional space and basis from tensor products
   of 1D spaces is a standard technique when working with global basis
   functions. In the world of finite elements, constructing basis functions
   by tensor products is much used on quadrilateral and hexahedra cell
   shapes, but not on triangles and tetrahedra. The global
   finite element basis functions are almost exclusively denoted by a single
   index.


Finite elements in 2D and 3D
============================

Finite element approximation is particularly powerful in 2D and 3D because
the method can handle a geometrically complex domain :math:`\Omega` with ease.
The principal idea is, as in 1D, to divide the domain into cells
and use polynomials for approximating a function over a cell.
Two popular cell shapes are triangles and the quadrilaterals.
Figures :ref:`fem:approx:fe:2D:fig:rectP1`, :ref:`fem:approx:fe:2D:fig:circP1`,
and :ref:`fem:approx:fe:2D:fig:rectQ1` provide examples. P1 elements
means linear functions (:math:`a_0 + a_1x + a_2y`) over triangles, while Q1 elements
have bilinear functions (:math:`a_0 + a_1x + a_2y + a_3xy`) over rectangular cells.
Higher-order elements can easily be defined.


.. _fem:approx:fe:2D:fig:rectP1:

.. figure:: mesh2D_rect_P1.png
   :width: 800

   *Examples on 2D P1 elements*



.. _fem:approx:fe:2D:fig:circP1:

.. figure:: mesh2D_quarter_circle.png
   :width: 400

   *Examples on 2D P1 elements in a deformed geometry*



.. _fem:approx:fe:2D:fig:rectQ1:

.. figure:: mesh2D_rect_Q1.png
   :width: 400

   *Examples on 2D Q1 elements*


Basis functions over triangles in the physical domain
-----------------------------------------------------

Cells with triangular shape will be in main focus here.  With the P1
triangular element, :math:`u` is a linear function over each cell, as
depicted in Figure :ref:`fem:approx:fe:2D:fig:femfunc`, with
discontinuous derivatives at the cell boundaries.


.. _fem:approx:fe:2D:fig:femfunc:

.. figure:: demo2D_4x3r.png
   :width: 400

   *Example on piecewise linear 2D functions defined on triangles*


We give the vertices of the cells global and local numbers as in 1D.
The degrees of freedom in the P1 element are the function values at
a set of nodes, which are the three vertices.
The basis function :math:`{\varphi}_i(x,y)` is then 1 at the vertex with global vertex
number :math:`i` and zero at all other vertices.
On an element, the three degrees of freedom uniquely determine
the linear basis functions in that element, as usual.
The global
:math:`{\varphi}_i(x,y)` function is then a combination of the linear functions
(planar surfaces)
over all the neighboring cells
that have vertex number :math:`i` in common. Figure :ref:`fem:approx:fe:2D:fig:basphi`
tries to illustrate the shape of such a "pyramid"-like function.


.. _fem:approx:fe:2D:fig:basphi:

.. figure:: demo2D_basisfunc.png
   :width: 400

   *Example on a piecewise linear 2D basis function over a patch of triangles*


Element matrices and vectors
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As in 1D, we split the integral over :math:`\Omega` into a sum of integrals
over cells. Also as in 1D, :math:`{\varphi}_i` overlaps :math:`{\varphi}_j`
(i.e., :math:`{\varphi}_i{\varphi}_j\neq 0`) if and only if
:math:`i` and :math:`j` are vertices in the same cell. Therefore, the integral
of :math:`{\varphi}_i{\varphi}_j` over an element is nonzero only when :math:`i` and :math:`j`
run over the vertex numbers in the element. These nonzero contributions
to the coefficient matrix are, as in 1D, collected in an element matrix.
The size of the element matrix becomes :math:`3\times 3` since there are
three degrees of freedom
that :math:`i` and :math:`j` run over. Again, as in 1D, we number the
local vertices in a cell, starting at 0, and add the entries in
the element matrix into the global system matrix, exactly as in 1D.
All details and code appear below.



Basis functions over triangles in the reference cell
----------------------------------------------------

As in 1D, we can define the basis functions and the degrees of freedom
in a reference cell and then use a mapping from the reference coordinate
system to the physical coordinate system.
We also have a mapping of local degrees of freedom numbers to global degrees
of freedom numbers.

.. (``dof_map``).


The reference cell in an :math:`(X,Y)` coordinate system has vertices
:math:`(0,0)`, :math:`(1,0)`, and :math:`(0,1)`, corresponding to local vertex numbers
0, 1, and 2, respectively. The P1 element has linear functions
:math:`{\tilde{\varphi}}_r(X,Y)` as basis functions, :math:`r=0,1,2`.
Since a linear function :math:`{\tilde{\varphi}}_r(X,Y)` in 2D is on
the form :math:`C_{r,0} + C_{r,1}X + C_{r,2}Y`, and hence has three
parameters :math:`C_{r,0}`, :math:`C_{r,1}`, and :math:`C_{r,2}`, we need three
degrees of freedom. These are in general taken as the function values at a
set of nodes. For the P1 element the set of nodes is the three vertices.
Figure :ref:`fem:approx:fe:2D:fig:P12D` displays the geometry of the
element and the location of the nodes.


.. _fem:approx:fe:2D:fig:P12D:

.. figure:: P1_2d.png
   :width: 100

   *2D P1 element*


Requiring :math:`{\tilde{\varphi}}_r=1` at node number :math:`r` and
:math:`{\tilde{\varphi}}_r=0` at the two other nodes, gives three linear equations to
determine :math:`C_{r,0}`, :math:`C_{r,1}`, and :math:`C_{r,2}`. The result is


.. math::
        
        {\tilde{\varphi}}_0(X,Y) = 1 - X - Y,
        



.. math::
          
        {\tilde{\varphi}}_1(X,Y) = X,
        



.. math::
          
        {\tilde{\varphi}}_2(X,Y) = Y
        


Higher-order approximations are obtained by increasing the polynomial order,
adding additional nodes, and letting the degrees of freedom be
function values at the nodes. Figure :ref:`fem:approx:fe:2D:fig:P22D`
shows the location of the six nodes in the P2 element.


.. _fem:approx:fe:2D:fig:P22D:

.. figure:: P2_2d.png
   :width: 100

   *2D P2 element*


.. 2DO: write up local basis funcs for P2


A polynomial of degree :math:`p` in :math:`X` and :math:`Y` has :math:`n_p=(p+1)(p+2)/2` terms
and hence needs :math:`n_p` nodes. The values at the nodes constitute :math:`n_p`
degrees of freedom. The location of the nodes for
:math:`{\tilde{\varphi}}_r` up to degree 6 is displayed in Figure
:ref:`fem:approx:fe:2D:fig:P162D`.


.. _fem:approx:fe:2D:fig:P162D:

.. figure:: P1-6_2d.png
   :width: 400

   *2D P1, P2, P3, P4, P5, and P6 elements*


The generalization to 3D is straightforward: the reference element is a
`tetrahedron <http://en.wikipedia.org/wiki/Tetrahedron>`_
with vertices :math:`(0,0,0)`, :math:`(1,0,0)`, :math:`(0,1,0)`, and :math:`(0,0,1)`
in a :math:`X,Y,Z` reference coordinate system. The P1 element has its degrees
of freedom as four nodes, which are the four vertices, see Figure
:ref:`fem:approx:fe:2D:fig:P1:123D`. The P2 element adds additional
nodes along the edges of the cell, yielding a total of 10 nodes and
degrees of freedom, see
Figure :ref:`fem:approx:fe:2D:fig:P2:123D`.


.. _fem:approx:fe:2D:fig:P1:123D:

.. figure:: P1-1d2d3d.png
   :width: 400

   *P1 elements in 1D, 2D, and 3D*



.. _fem:approx:fe:2D:fig:P2:123D:

.. figure:: P2-1d2d3d.png
   :width: 400

   *P2 elements in 1D, 2D, and 3D*



.. index:: simplex elements

.. index:: simplices

.. index:: faces

.. index:: edges


The interval in 1D, the triangle in 2D, the tetrahedron in 3D, and
its generalizations to higher space dimensions are known
as *simplex* cells (the geometry) or *simplex* elements (the geometry,
basis functions, degrees of freedom, etc.). The plural forms
`simplices <http://en.wikipedia.org/wiki/Simplex>`_ and
simplexes are
also a much used shorter terms when referring to this type of cells or elements.
The side of a simplex is called a *face*, while the tetrahedron also
has *edges*.


*Acknowledgment.* Figures :ref:`fem:approx:fe:2D:fig:P12D` to :ref:`fem:approx:fe:2D:fig:P2:123D`
are created by Anders Logg and taken from the `FEniCS book <https://launchpad.net/fenics-book>`_: *Automated Solution of Differential Equations by the Finite Element Method*, edited by A. Logg, K.-A. Mardal, and G. N. Wells, published
by `Springer <http://goo.gl/lbyVMH>`_, 2012.



Affine mapping of the reference cell
------------------------------------

Let :math:`{\tilde{\varphi}}_r^{(1)}` denote the basis functions associated
with the P1 element in 1D, 2D, or 3D, and let :math:`\boldsymbol{x}_{q(e,r)}` be
the physical coordinates of local vertex number :math:`r` in cell :math:`e`.
Furthermore,
let :math:`\boldsymbol{X}` be a point in the reference coordinate system corresponding
to the point :math:`\boldsymbol{x}` in the physical coordinate system.
The affine mapping of any :math:`\boldsymbol{X}` onto :math:`\boldsymbol{x}` is
then defined by


.. index:: affine mapping



.. math::
   :label: fem:approx:fe:affine:map
        
        \boldsymbol{x} = \sum_{r} {\tilde{\varphi}}_r^{(1)}(\boldsymbol{X})\boldsymbol{x}_{q(e,r)},
        
        

where :math:`r` runs over the local vertex numbers in the cell.
The affine mapping essentially stretches, translates, and rotates
the triangle. Straight or planar faces of the reference cell are
therefore mapped onto
straight or planar faces in the physical coordinate system. The mapping can
be used for both P1 and higher-order elements, but note that the
mapping itself always applies the P1 basis functions.


.. _fem:approx:fe:map:fig:2DP1:

.. figure:: ElmT3n2D_map.png
   :width: 400

   *Affine mapping of a P1 element*




Isoparametric mapping of the reference cell
-------------------------------------------


.. index:: isoparametric mapping

.. index::
   single: mapping of reference cells; isoparametric mapping


Instead of using the P1 basis functions in the mapping
:eq:`fem:approx:fe:affine:map`,
we may use the basis functions of the actual Pd element:


.. math::
   :label: fem:approx:fe:isop:map
        
        \boldsymbol{x} = \sum_{r} {\tilde{\varphi}}_r(\boldsymbol{X})\boldsymbol{x}_{q(e,r)},
        
        

where :math:`r` runs over all nodes, i.e., all points associated with the
degrees of freedom. This is called an *isoparametric mapping*.
For P1 elements it is identical to the affine mapping
:eq:`fem:approx:fe:affine:map`, but for higher-order elements
the mapping of the straight or planar faces of the reference cell will
result in a *curved* face in the physical coordinate system.
For example, when we use the basis functions of the triangular P2 element
in 2D in :eq:`fem:approx:fe:isop:map`, the straight faces of the
reference triangle are mapped onto curved faces of parabolic shape in
the physical coordinate system, see Figure :ref:`fem:approx:fe:map:fig:2DP2`.


.. _fem:approx:fe:map:fig:2DP2:

.. figure:: ElmT6n2D_map.png
   :width: 400

   *Isoparametric mapping of a P2 element*


From :eq:`fem:approx:fe:affine:map` or
:eq:`fem:approx:fe:isop:map` it is easy to realize that the
vertices are correctly mapped. Consider a vertex with local number :math:`s`.
Then :math:`{\tilde{\varphi}}_s=1` at this vertex and zero at the others.
This means that only one term in the sum is nonzero and :math:`\boldsymbol{x}=\boldsymbol{x}_{q(e,s)}`,
which is the coordinate of this vertex in the global coordinate system.


Computing integrals
-------------------

Let :math:`\tilde\Omega^r` denote the reference cell and :math:`\Omega^{(e)}`
the cell in the physical coordinate system. The transformation of
the integral from the physical to the reference coordinate system reads


.. math::
        
        \int_{\Omega^{(e)}}{\varphi}_i (\boldsymbol{x}) {\varphi}_j (\boldsymbol{x}) {\, \mathrm{d}x} =
        \int_{\tilde\Omega^r} {\tilde{\varphi}}_i (\boldsymbol{X}) {\tilde{\varphi}}_j (\boldsymbol{X})
        \det J\, {\, \mathrm{d}X},
        



.. math::
          
        \int_{\Omega^{(e)}}{\varphi}_i (\boldsymbol{x}) f(\boldsymbol{x}) {\, \mathrm{d}x} =
        \int_{\tilde\Omega^r} {\tilde{\varphi}}_i (\boldsymbol{X}) f(\boldsymbol{x}(\boldsymbol{X})) \det J\, {\, \mathrm{d}X},
        

where :math:`{\, \mathrm{d}x}` means the infinitesimal area element :math:`dx dy` in 2D and
:math:`dx dy dz` in 3D, with a similar
definition of :math:`{\, \mathrm{d}X}`. The quantity :math:`\det J` is the determinant of the
Jacobian of the mapping :math:`\boldsymbol{x}(\boldsymbol{X})`. In 2D,


.. math::
   :label: fem:approx:fe:2D:mapping:J:detJ
        
        J = \left[\begin{array}{cc}
        \frac{\partial x}{\partial X} & \frac{\partial x}{\partial Y}\\ 
        \frac{\partial y}{\partial X} & \frac{\partial y}{\partial Y}
        \end{array}\right], \quad
        \det J = \frac{\partial x}{\partial X}\frac{\partial y}{\partial Y}
        - \frac{\partial x}{\partial Y}\frac{\partial y}{\partial X}
        {\thinspace .}
        
        

With the affine mapping
:eq:`fem:approx:fe:affine:map`, :math:`\det J=2\Delta`, where :math:`\Delta` is
the area or volume of the cell in the physical coordinate system.

*Remark.* Observe that finite elements in 2D and 3D builds on the same
*ideas* and *concepts* as in 1D, but there is simply much
more to compute because the
specific mathematical formulas in 2D and 3D are more complicated
and the book keeping with dof maps also gets more complicated.
The manual work is tedious, lengthy, and error-prone
so automation by the computer is a must.


.. 2DO

.. First: two triangles

.. vertices = [(0,0), (1,0), (0,1), (1,1)]

.. cells = [[0, 1, 3], [0, 3, 2]]

.. dof_map = cells

.. write up affine mapping

.. D is the area that sympy.Triangle can compute :-) No, do that directly! 0.5...

.. rhs: choose simple f=x*y, try hand-calculation or two-step

.. sympy: first integrate in y with (0,1-x) as limits, then

.. integrate the result in x

.. a = integrate(x*y*(1-x-y), (y, 0, 1-x))

.. b = integrate(a, (x,0,1))

.. use the same for local element matrix

.. show assembly

.. should have pysketcher prog for drawing 2D mesh, mark and number nodes

.. and elements


.. Should have example with x**8*(1-x)*y**8*(1-y) worked out, but

.. need software


.. Need 2D exercises


Exercises
=========



.. --- begin exercise ---


.. _fem:approx:exer:linalg1:

Exercise 1: Linear algebra refresher I
--------------------------------------

Look up the topic of *vector space* in your favorite linear algebra
book or search for the term at Wikipedia.
Prove that vectors in the plane :math:`(a,b)` form a vector space
by showing that all the axioms of a vector space
are satisfied. Similarly,
prove that all linear functions of the form :math:`ax+b` constitute a vector space,
:math:`a,b\in\mathbb{R}`.

On the contrary,
show that all quadratic functions of the form :math:`1 + ax^2 + bx` *do not*
constitute a vector space.
Filename: ``linalg1.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:linalg2:

Exercise 2: Linear algebra refresher II
---------------------------------------

As an extension of :ref:`fem:approx:exer:linalg1`, check out
the topic of *inner product spaces*. Suggest a possible inner product
for the space of all linear functions of the form :math:`ax+b`, :math:`a,b\in\mathbb{R}`.
Show that this inner product satisfies the
general requirements of an inner product in a vector space.
Filename: ``linalg2.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:vec:3Dby2D:

Exercise 3: Approximate a three-dimensional vector in a plane
-------------------------------------------------------------

Given :math:`\boldsymbol{f} = (1,1,1)` in :math:`\mathbb{R}^3`, find the best approximation vector
:math:`\boldsymbol{u}` in the plane spanned by the unit vectors :math:`(1,0)` and :math:`(0,1)`.
Repeat the calculations using the vectors :math:`(2,1)` and :math:`(1,2)`.
Filename: ``vec111_approx.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:exp:powers:

Exercise 4: Approximate the exponential function by power functions
-------------------------------------------------------------------

Let :math:`V` be a function space with basis functions
:math:`x^{2i+1}`, :math:`i=0,1,\ldots,N`.
Find the best approximation to :math:`f(x)=\exp(-x)` on :math:`\Omega =[0,4]`
among all functions in :math:`V`
for :math:`N=2,3,4`. Illustrate the three approximations in three separate plots.
Filename: ``exp_powers.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:sin:powers:

Exercise 5: Approximate the sine function by power functions
------------------------------------------------------------

Let :math:`V` be a function space with basis functions
:math:`x^{2i+1}`, :math:`i=0,1,\ldots,N`.
Find the best approximation to :math:`f(x)=\sin(x)` among all functions in :math:`V`,
using :math:`N=8` for a domain that includes more and more half-periods of
the sine function: :math:`\Omega = [0, k\pi/2]`, :math:`k=2,3,\ldots,12`.
How does a Taylor series of :math:`\sin(x)` around :math:`x` up to degree 9
behave for the largest domain?

.. --- begin hint in exercise ---


*Hint.* One can make a loop over :math:`k` and call the functions ``least_squares`` and
``comparison_plot`` from the ``approx1D`` module.

.. --- end hint in exercise ---

Filename: ``sin_powers.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:tanh:sine1:

Exercise 6: Approximate a steep function by sines
-------------------------------------------------

Find the best approximation of :math:`f(x) = \tanh (s(x-\pi))` on
:math:`[0, 2\pi]` in the space :math:`V` with basis
:math:`{\varphi}_i(x) = \sin((2i+1)x)`, :math:`i\in{I}`.
Make a movie showing how :math:`u=\sum_{j\in{I}}c_j{\varphi}_j(x)`
approximates :math:`f(x)` as :math:`N` grows. Choose :math:`s` such that :math:`f` is
steep (:math:`s=20` may be appropriate).

.. --- begin hint in exercise ---


*Hint.* One may naively call the ``least_squares_orth`` and ``comparison_plot``
from the ``approx1D`` module in a loop and extend the basis with
one new element in each pass. This approach
implies a lot of recomputations.
A more efficient strategy is to let ``least_squares_orth``
compute with only one basis function at a time and accumulate
the corresponding ``u`` in the total solution.

.. --- end hint in exercise ---

Filename: ``tanh_sines_approx1.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:tanh:sine2:

Exercise 7: Animate the approximation of a steep function by sines
------------------------------------------------------------------

Make a movie where the steepness (:math:`s`) of the :math:`\tanh` function in
:ref:`fem:approx:exer:tanh:sine1` grows in "time",
and for each value of the steepness, the movie shows how the
approximation improves with increasing :math:`N`.
Filename: ``tanh_sines_approx2.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:Fourier:

Exercise 8: Fourier series as a least squares approximation
-----------------------------------------------------------

Given a function :math:`f(x)` on an interval :math:`[0,L]`, look up the formula
for the coefficients :math:`a_j` and :math:`b_j` in the Fourier series of :math:`f`:


.. math::
        
        f(x) = a_0 + \sum_{j=1}^\infty a_j\cos \left(j\frac{\pi x}{L}\right)
        + \sum_{j=1}^\infty b_j\sin \left(j\frac{\pi x}{L}\right){\thinspace .}
        


Let an infinite-dimensional vector space :math:`V` have the basis functions
:math:`\cos j\frac{\pi x}{L}` for :math:`j=0,1,\dots,\infty` and
:math:`\sin j\frac{\pi x}{L}` for :math:`j=1,\dots,\infty`.  Show that the least squares
approximation method from the section :ref:`fem:approx:global` leads to a
linear system whose solution coincides with the standard formulas for
the coefficients in a Fourier series of :math:`f(x)` (see also
the section :ref:`fem:approx:global:Fourier`). You may choose


.. math::
         {\varphi}_{2i} = \cos\left( i\frac{\pi}{L}x\right),\quad
        {\varphi}_{2i+1} = \sin\left( i\frac{\pi}{L}x\right),

for :math:`i=0,1,\ldots,N\rightarrow\infty`.

Choose :math:`f(x) = \tanh(s(x-\frac{1}{2}))` on :math:`\Omega=[0,1]`, which is
a smooth function, but with considerable steepness around :math:`x=1/2`
as :math:`s` grows in size.
Calculate the coefficients in the Fourier expansion by
solving the linear system, arising from the least squares or Galerkin
methods, by hand. Plot
some truncated versions of the series together with :math:`f(x)` to show how
the series expansion converges for :math:`s=10` and :math:`s=100`.
Filename: ``Fourier_approx.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:tanh:

Exercise 9: Approximate a steep function by Lagrange polynomials
----------------------------------------------------------------

Use interpolation/collocation with uniformly distributed
points and Chebychev nodes to approximate


.. math::
         f(x) = -\tanh(s(x-\frac{1}{2})),\quad x\in [0,1],

by Lagrange polynomials for :math:`s=10,100` and :math:`N=3,6,9,11`.
Make separate plots of the approximation for each combination of
:math:`s`, point type (Chebyshev or uniform), and :math:`N`.
Filename: ``tanh_Lagrange.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:mesh1:

Exercise 10: Define nodes and elements
--------------------------------------

Consider a domain :math:`\Omega =[0,2]` divided into the three elements
:math:`[0,1]`, :math:`[1,1.2]`, and :math:`[1.2,2]`, with two nodes in each element
(P1 elements).
Set up the list of coordinates and nodes (``nodes``) and the
numbers of the nodes that belong to each element (``elements``) in
two cases: 1) nodes and elements numbered from left to right, and 2)
nodes and elements numbered from right to left.

Thereafter, subdivide the element :math:`[1.2,2]` into two new equal-sized elements.
Add the new node and the two new elements to the data structures created above,
and try to minimize the modifications.
Filename: ``fe_numberings1.py.``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:mesh2:

Exercise 11: Define vertices, cells, and dof maps
-------------------------------------------------

Repeat :ref:`fem:approx:fe:exer:mesh2`, but define the
data structures ``vertices``, ``cells``, and ``dof_map`` instead of
``nodes`` and ``elements``.
Filename: ``fe_numberings2.py.``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:defmesh:sparsity:

Exercise 12: Construct matrix sparsity patterns
-----------------------------------------------

:ref:`fem:approx:fe:exer:defmesh` describes a element mesh
with a total of five elements, but with two different element and
node orderings. For each of the two orderings,
make a :math:`5\times 5` matrix and fill in the entries that will be nonzero.

.. --- begin hint in exercise ---


*Hint.* A matrix entry :math:`(i,j)` is nonzero if :math:`i` and :math:`j` are nodes in the
same element.

.. --- end hint in exercise ---

Filename: ``fe_sparsity_pattern.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:Asinwt:symbolic:

Exercise 13: Perform symbolic finite element computations
---------------------------------------------------------

Find formulas for the coefficient matrix and right-hand side
when approximating :math:`f(x) = sin (x)` on
:math:`\Omega=[0, \pi]` by two P1 elements of size :math:`\pi/2`.
Solve the system and compare :math:`u(\pi/2` with
the exact value 1.

.. Hint: wolframalpha or sympy can help with (1-x)*sin(a*x+b),

.. which is the integral

.. that arises on the right-hand side.


.. solution:

.. from fe_approx1D_numint import *

.. c = approximate(sm.sin(x), symbolic=True, d=1, N_e=2, numint=None,

.. Omega=[0,sm.pi])

.. print sm.simplify(c[1,0].subs('h', sm.pi/2))

Filename: ``sin_approx_P1.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:tanh:

Exercise 14: Approximate a steep function by P1 and P2 elements
---------------------------------------------------------------

Given


.. math::
         f(x) = \tanh(s(x-\frac{1}{2}))

use the Galerkin or least squares method with finite elements to find
an approximate function :math:`u(x)`. Choose :math:`s=40` and try
:math:`N_e=4,8,16` P1 elements and
:math:`N_e=2,4,8` P2 elements.
Integrate :math:`f{\varphi}_i` numerically.
Filename: ``tanh_fe_P1P2_approx.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:exer:tanh2:

Exercise 15: Approximate a steep function by P3 and P4 elements
---------------------------------------------------------------

Solve :ref:`fem:approx:exer:tanh` using :math:`N_e=1,2,4` P3 and P4
elements. How will a collocation/interpolation method work in
this case with the same number of nodes?
Filename: ``tanh_fe_P3P4_approx.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:Asinwt:interpol:error:

Exercise 16: Investigate the approximation error in finite elements
-------------------------------------------------------------------

The theory :eq:`fem:approx:fe:error:theorem` from
the section :ref:`fem:approx:fe:error` predicts that the
error in the Pd approximation of a function
should behave as :math:`h^{d+1}`. Use experiments to verify this
asymptotic behavior (i.e., for small enough :math:`h`).
Choose two examples: :math:`f(x)=Ae^{-\omega x}` on :math:`[0,3/\omega]`
and :math:`f(x) = A\sin (\omega x)` on :math:`\Omega=[0, 2\pi/\omega]` for
constants :math:`A` and :math:`\omega`. What happens if you try
:math:`f(x)=\sqrt{x}` on :math:`[0,1]`?

.. --- begin hint in exercise ---


*Hint.* Run a series of experiments: :math:`(h_i,E_)`, :math:`i=0,\ldots,m`, where :math:`E_i`
is the :math:`L^2` norm of the error corresponding to element length :math:`h_i`.
Assume an error model :math:`E=Ch^r` and compute :math:`r` from two successive
experiments:


.. math::
         r_i = \ln (E_{i+1}/E_i)/\ln (h_{i+1}/h_i),\quad i=0,\ldots,m-1{\thinspace .}

Hopefully, the sequence :math:`r_0,\ldots,r_{m-1}` converges to the true
:math:`r`, and :math:`r_{m-1}` can be taken as an approximation to :math:`r`.

.. --- end hint in exercise ---

Filename: ``Asinwt_interpolation_error.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:Heaviside:

Exercise 17: Approximate a step function by finite elements
-----------------------------------------------------------

Approximate the step function


.. math::
         f(x) = \left\lbrace\begin{array}{ll}
        1 & x < {1/2},\\ 
        2 & x \geq {1/2}
        \end{array}\right.
        

by 2, 4, and 8 P1 and P2 elements. Compare
approximations visually.

.. --- begin hint in exercise ---


*Hint.* This :math:`f` can also be expressed in terms of the Heaviside function :math:`H(x)`:
:math:`f(x) = H(x-{1/2})`.
Therefore, :math:`f` can be defined by


.. code-block:: python

        f = sm.Heaviside(x -  sm.Rational(1,2))

making the ``approximate`` function in the
``fe_approx1D.py`` module an obvious candidate to solve the
problem. However, ``sympy`` does not handle symbolic integration
with this particular integrand, and the ``approximate`` function faces a problem
when converting ``f`` to a Python function (for plotting) since
``Heaviside`` is not an available function in ``numpy``. It is better to make
special-purpose code for this case or perform all
calculations by hand.

.. --- end hint in exercise ---

Filename: ``Heaviside_approx_P1P2.py.``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:2Dsines:symbolic:

Exercise 18: 2D approximation with orthogonal functions
-------------------------------------------------------

Assume we have basis functions :math:`{\varphi}_i(x,y)` in 2D that are
orthogonal
such that :math:`({\varphi}_i,{\varphi}_j)=0` when :math:`i\neq j`.
The function ``least_squares`` in the
file `approx2D.py <http://tinyurl.com/jvzzcfn/fem/fe_approx2D.py>`_ will then spend much time on computing off-diagonal terms
in the coefficient matrix that we know are zero.
To speed up the computations, make a
version ``least_squares_orth`` that utilizes the orthogonality among the
basis functions. Apply the function to approximate


.. math::
         f(x,y) = x(1-x)y(1-y)e^{-x-y}

on :math:`\Omega = [0,1]\times [0,1]` via basis functions


.. math::
         {\varphi}_i(x,y) = \sin (p\pi x)\sin(q\pi y),\quad i=q N_x + p
        {\thinspace .}
        


.. --- begin hint in exercise ---


*Hint.* Get ideas from the function ``least_squares_orth`` in
the section :ref:`fem:approx:global:orth` and
file `approx1D.py <http://tinyurl.com/jvzzcfn/fem/fe_approx1D.py>`_.

.. --- end hint in exercise ---

Filename: ``approx2D_lsorth_sin.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:1D:trapez:

Exercise 19: Use the Trapezoidal rule and P1 elements
-----------------------------------------------------

Consider approximation of some :math:`f(x)` on an interval :math:`\Omega` using
the least squares or Galerkin methods with P1 elements. Derive
the element matrix and vector using the
Trapezoidal rule :eq:`fem:approx:fe:numint1:trapez` for calculating
integrals on the reference element. Assemble the contributions, assuming
a uniform cell partitioning, and show that the resulting linear system
has the form :math:`c_i=f(x_{i})` for :math:`i\in{I}`.
Filename: ``fe_trapez.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:1D:P1:vs:interp:

Problem 20: Compare P1 elements and interpolation
-------------------------------------------------

We shall approximate the function


.. math::
         f(x) = 1 + \epsilon\sin (2\pi nx),\quad x\in \Omega = [0,1],

where :math:`n\in\mathbb{Z}` and :math:`\epsilon \geq 0`.


*a)* Sketch :math:`f(x)` and find the wave length of the function.

*b)* We want to use :math:`N_P` elements per wave length. Show that the number
of elements is then :math:`nN_P`.

*c)* The critical quantity for accuracy is the number of elements per
wave length, not the element size in itself. It therefore suffices
to study an :math:`f` with just one wave length in :math:`\Omega = [0,1]`.
Set :math:`\epsilon = 0.5`.

Run the least squares or projection/Galerkin method for
:math:`N_P=2,4,8,16,32`. Compute the error :math:`E=||u-f||_{L^2}`.

.. --- begin hint in exercise ---


*Hint.* Use the ``fe_approx1D_numint`` module to compute :math:`u` and use
the technique from the section :ref:`fem:approx:fe:element:impl:error` to
compute the norm of the error.

.. --- end hint in exercise ---


*d)* Repeat the set of experiments in the above point, but
use interpolation/collocation based on the node points to
compute :math:`u(x)` (recall that :math:`c_i` is now simply :math:`f(x_{i})`).
Compute the error :math:`E=||u-f||_{L^2}`.
Which method seems to be most accurate?

Filename: ``P1_vs_interp.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _fem:approx:fe:exer:3D:approx3D:

Exercise 21: Implement 3D computations with global basis functions
------------------------------------------------------------------

Extend the `approx2D.py <http://tinyurl.com/jvzzcfn/fem/approx2D.py>`_ code to 3D
applying ideas from the section :ref:`fem:approx:3D:global`.
Use a 3D generalization of the test problem in the section :ref:`fem:approx:2D:global:code` to test the implementation.
Filename: ``approx3D.py``.

.. --- end exercise ---


