.. !split

.. _nonlin:alglevel:1D:

Discretization of 1D stationary nonlinear differential equations
================================================================

The section :ref:`nonlin:pdelevel` presents methods for linearizing
time-discrete PDEs directly prior to discretization in space.  We can
alternatively carry out the discretization in space and of the
time-discrete nonlinear PDE problem and get a system of nonlinear
algebraic equations, which can be solved by Picard iteration or
Newton's method as presented in the section :ref:`nonlin:systems:alg`.
This latter approach will now be described in detail.

We shall work with the 1D problem

.. _Eq:nonlin:alglevel:1D:pde:

.. math::
   :label: nonlin:alglevel:1D:pde
        
        -({\alpha}(u)u^{\prime})^{\prime} + au = f(u),\quad x\in (0,L),
        \quad {\alpha}(u(0))u^{\prime}(0) = C,\ u(L)=D
        {\thinspace .}
        
        

The problem :eq:`nonlin:alglevel:1D:pde` arises from the stationary
limit of a diffusion equation,

.. _Eq:nonlin:alglevel:1D:pde:tver:

.. math::
   :label: nonlin:alglevel:1D:pde:tver
        
        \frac{\partial u}{\partial t} = \frac{\partial}{\partial x}\left(
        \alpha(u)\frac{\partial u}{\partial x}\right) + au + f(u),
        
        

as :math:`t\rightarrow\infty` and :math:`\partial u/\partial t\rightarrow 0`.
Alternatively, the problem :eq:`nonlin:alglevel:1D:pde` arises
at each time level from implicit time discretization of
:eq:`nonlin:alglevel:1D:pde:tver`. For example, a Backward Euler
scheme for :eq:`nonlin:alglevel:1D:pde:tver` with :math:`a=0` leads to

.. _Eq:nonlin:alglevel:1D:pde:tver:BE:

.. math::
   :label: nonlin:alglevel:1D:pde:tver:BE
        
        \frac{u^{n}-u^{n-1}}{\Delta t} =
        \frac{\partial}{\partial x}\left(
        \alpha(u^n)\frac{\partial u^n}{\partial x}\right) - f(u^n){\thinspace .}
        
        

Introducing :math:`u(x)` for :math:`u^n(x)`, :math:`u^{(1)}` for :math:`u^{n-1}`, and letting :math:`f(u)`
in :eq:`nonlin:alglevel:1D:pde` be :math:`f(u) + u^{n-1}/\Delta t` in
:eq:`nonlin:alglevel:1D:pde:tver:BE`, gives
:eq:`nonlin:alglevel:1D:pde` with :math:`a=1/\Delta t`.

.. _nonlin:alglevel:1D:fd:

Finite difference discretizations
---------------------------------

The nonlinearity in
the differential equation :eq:`nonlin:alglevel:1D:pde` poses no more
difficulty than a variable coefficient, as in :math:`({\alpha}(x)u^{\prime})^{\prime}`.
We can therefore use a standard approach to discretizing the Laplace
term with a variable coefficient:

.. math::
         [-D_x{\alpha} D_x u +au = f]_i{\thinspace .}

Writing this out for a uniform mesh with points :math:`x_i=i\Delta x`,
:math:`i=0,\ldots,N_x`, leads to

.. _Eq:nonlin:alglevel:1D:fd:deq0:

.. math::
   :label: nonlin:alglevel:1D:fd:deq0
        
        -\frac{1}{\Delta x^2}
        \left({\alpha}_{i+\frac{1}{2}}(u_{i+1}-u_i) -
        {\alpha}_{i-\frac{1}{2}}(u_{i}-u_{i-1})\right)
        + au_i = f(u_i){\thinspace .}
        
        

This equation is valid at all the mesh points :math:`i=0,1,\ldots,N_x-1`.
At :math:`i=N_x` we have the Dirichlet condition :math:`u_i=0`.
The only difference from the case with :math:`({\alpha}(x)u^{\prime})^{\prime}` and :math:`f(x)` is that
now :math:`{\alpha}` and :math:`f` are functions of :math:`u` and not only on :math:`x`:
:math:`({\alpha}(u(x))u^{\prime})^{\prime}` and :math:`f(u(x))`.

The quantity :math:`{\alpha}_{i+\frac{1}{2}}`, evaluated between two mesh points,
needs a comment. Since :math:`{\alpha}` depends on :math:`u` and :math:`u` is only known
at the mesh points, we need to express :math:`{\alpha}_{i+\frac{1}{2}}` in
terms of :math:`u_i` and :math:`u_{i+1}`. For this purpose we use an arithmetic
mean, although a harmonic mean is also common in this context if
:math:`{\alpha}` features large jumps.
There are two choices of arithmetic means:

.. _Eq:nonlin:alglevel:1D:fd:dfc:mean:u:

.. math::
   :label: nonlin:alglevel:1D:fd:dfc:mean:u
        
        {\alpha}_{i+\frac{1}{2}} \approx
        {\alpha}(\frac{1}{2}(u_i + u_{i+1}) =
        [{\alpha}(\overline{u}^x)]^{i+\frac{1}{2}},
        
        
        

.. _Eq:nonlin:alglevel:1D:fd:dfc:mean:dfc:

.. math::
   :label: nonlin:alglevel:1D:fd:dfc:mean:dfc
          
        {\alpha}_{i+\frac{1}{2}} \approx
        \frac{1}{2}({\alpha}(u_i) + {\alpha}(u_{i+1})) = [\overline{{\alpha}(u)}^x]^{i+\frac{1}{2}}
        
        

Equation :eq:`nonlin:alglevel:1D:fd:deq0` with
the latter approximation then looks like

.. math::
        
        -\frac{1}{2\Delta x^2}
        \left(({\alpha}(u_i)+{\alpha}(u_{i+1}))(u_{i+1}-u_i) -
        ({\alpha}(u_{i-1})+{\alpha}(u_{i}))(u_{i}-u_{i-1})\right)\nonumber
        

.. _Eq:nonlin:alglevel:1D:fd:deq:

.. math::
   :label: nonlin:alglevel:1D:fd:deq
          
        \qquad\qquad + au_i = f(u_i),
        
        

or written more compactly,

.. math::
         [-D_x\overline{{\alpha}}^x D_x u +au = f]_i{\thinspace .}

At mesh point :math:`i=0` we have the boundary condition :math:`{\alpha}(u)u^{\prime}=C`,
which is discretized by

.. math::
         [{\alpha}(u)D_{2x}u = C]_0,

meaning

.. _Eq:nonlin:alglevel:1D:fd:Neumann:x0:

.. math::
   :label: nonlin:alglevel:1D:fd:Neumann:x0
        
        {\alpha}(u_0)\frac{u_{1} - u_{-1}}{2\Delta x} = C{\thinspace .}
        
        

The fictitious value :math:`u_{-1}` can be eliminated with the aid
of :eq:`nonlin:alglevel:1D:fd:deq` for :math:`i=0`.
Formally, :eq:`nonlin:alglevel:1D:fd:deq` should be solved with
respect to :math:`u_{i-1}` and that value (for :math:`i=0`) should be inserted in
:eq:`nonlin:alglevel:1D:fd:Neumann:x0`, but it is algebraically
much easier to do it the other way around. Alternatively, one can
use a ghost cell :math:`[-\Delta x,0]` and update the :math:`u_{-1}` value
in the ghost cell according to :eq:`nonlin:alglevel:1D:fd:Neumann:x0`
after every Picard or Newton iteration. Such an approach means that
we use a known :math:`u_{-1}` value in :eq:`nonlin:alglevel:1D:fd:deq`
from the previous iteration.

Solution of algebraic equations
-------------------------------

The structure of the equation system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The nonlinear algebraic equations :eq:`nonlin:alglevel:1D:fd:deq` are
of the form :math:`A(u)u = b(u)` with

.. math::
        
        A_{i,i} &= \frac{1}{2\Delta x^2}({\alpha}(u_{i-1}) + 2{\alpha}(u_{i})
        {\alpha}(u_{i+1})) + a,\\ 
        A_{i,i-1} &= -\frac{1}{2\Delta x^2}({\alpha}(u_{i-1}) + {\alpha}(u_{i})),\\ 
        A_{i,i+1} &= -\frac{1}{2\Delta x^2}({\alpha}(u_{i}) + {\alpha}(u_{i+1})),\\ 
        b_i &= f(u_i){\thinspace .}
        

The matrix :math:`A(u)` is tridiagonal: :math:`A_{i,j}=0` for :math:`j > 1+1` and :math:`j < i-1`.

The above expressions are valid for internal mesh points :math:`1\leq i\leq N_x-1`.
For :math:`i=0` we need to express :math:`u_{i-1}=u_{-1}` in terms of :math:`u_1` using
:eq:`nonlin:alglevel:1D:fd:Neumann:x0`:

.. _Eq:nonlin:alglevel:1D:fd:Neumann:x0:um1:

.. math::
   :label: nonlin:alglevel:1D:fd:Neumann:x0:um1
        
        u_{-1} = u_1 -\frac{2\Delta x}{{\alpha}(u_0)}C{\thinspace .}
        
        

This value must be inserted in :math:`A_{0,0}`. The expression for :math:`A_{i,i+1}`
applies for :math:`i=0`, and :math:`A_{i,i-1}` does not enter the system when :math:`i=0`.

Regarding the last equation, its form depends on whether we include
the Dirichlet condition :math:`u(L)=D`, meaning :math:`u_{N_x}=D`, in the
nonlinear algebraic equation system or not. Suppose we choose
:math:`(u_0,u_1,\ldots,u_{N_x-1})` as unknowns, later referred to as
*systems without Dirichlet conditions*. The last equation
corresponds to :math:`i=N_x-1`. It involves the boundary value :math:`u_{N_x}`,
which is substituted by :math:`D`. If the unknown vector includes the
boundary value, :math:`(u_0,u_1,\ldots,u_{N_x})`, later referred to as
*system including Dirichlet conditions*, the equation for :math:`i=N_x-1`
just involves the unknown :math:`u_{N_x}`, and the final equation becomes
:math:`u_{N_x}=D`, corresponding to :math:`A_{i,i}=1` and :math:`b_i=D` for :math:`i=N_x`.

Picard iteration  (3)
~~~~~~~~~~~~~~~~~~~~~

The obvious Picard iteration scheme is to use previously computed
values of :math:`u_i` in :math:`A(u)` and :math:`b(u)`, as described more in detail in
the section :ref:`nonlin:systems:alg`. With the notation :math:`u^{-}` for the
most recently computed value of :math:`u`, we have the system :math:`F(u)\approx
\hat F(u) = A(u^{-})u - b(u^{-})`, with :math:`F=(F_0,F_1,\ldots,F_m)`,
:math:`u=(u_0,u_1,\ldots,u_m)`.  The index :math:`m` is :math:`N_x` if the system
includes the Dirichlet condition as a separate equation and :math:`N_x-1`
otherwise.  The matrix :math:`A(u^{-})` is tridiagonal, so the solution
procedure is to fill a tridiagonal matrix data structure and the
right-hand side vector with the right numbers and call a Gaussian
elimination routine for tridiagonal linear systems.

To write out all the mathematical details in a specific
case, let us look at the case :math:`N_x=2`. We use :math:`u^{-}_i`
for the :math:`i`-th component in :math:`u^{-}`. In case we omit the Dirichlet
condition from the system we get the following :math:`2\times 2` system,

.. math::
        
        \left(\begin{array}{cc}
        A_{0,0}& A_{0,1}\\ 
        A_{1,0} & A_{1,1}
        \end{array}\right)
        \left(\begin{array}{c}
        u_0\\ 
        u_1
        \end{array}\right)
        =
        \left(\begin{array}{c}
        b_0\\ 
        b_1
        \end{array}\right)
        

The matrix and right-hand side entries are given by

.. math::
        
        A_{0,0} = \frac{1}{2\Delta x^2}({\alpha}(u_{-1}^{-}) + 2{\alpha}(u_{0}^{-})
        + {\alpha}(u_{1}^{-})) + a
        

.. math::
          
        A_{0,1} =
        -\frac{1}{2\Delta x^2}({\alpha}(u_{0}^{-}) + {\alpha}(u_{1}^{-})),
        

.. math::
          
        A_{1,0} =
        -\frac{1}{2\Delta x^2}({\alpha}(u_{0}^{-}) + {\alpha}(u_{1}^{-})),
        

.. math::
          
        A_{1,1} =
        \frac{1}{2\Delta x^2}({\alpha}(u_{0}^{-}) + 2{\alpha}(u_{1}^{-})
        +{\alpha}(u_{2})) + a,
        

.. math::
          
        b_0 =
        f(u_0^{-}),
        

.. math::
          
        b_1 =
        f(u_1^{-}),
        

where :math:`u_{-1}` must be substituted by
:eq:`nonlin:alglevel:1D:fd:Neumann:x0:um1`, and :math:`u_2` by :math:`D`.

The system with the Dirichlet condition becomes

.. math::
        
        \left(\begin{array}{ccc}
        A_{0,0}& A_{0,1} & A_{0,2}\\ 
        A_{1,0} & A_{1,1} & A_{1,2}\\ 
        A_{2,0} & A_{2,1} & A_{2,2}
        \end{array}\right)
        \left(\begin{array}{c}
        u_0\\ 
        u_1\\ 
        u_2
        \end{array}\right)
        =
        \left(\begin{array}{c}
        b_0\\ 
        b_1\\ 
        b_2
        \end{array}\right),
        

with entries for :math:`A_{i,j}` and :math:`b_i` as above for :math:`i,j=1,2`, keeping
:math:`u_2` as unknown in :math:`A_{1,1}`, and

.. math::
        
        A_{0,2}=A_{2,0}=A_{2,1}=0,\ A_{1,2}=
        -\frac{1}{2\Delta x^2}({\alpha}(u_{1}) + {\alpha}(u_{2})),\ A_{2,2}=1,\ b_2=D{\thinspace .}
        

Newton's method  (4)
~~~~~~~~~~~~~~~~~~~~

The Jacobian must be derived in order to use Newton's method. Here it means
that we need to differentiate :math:`F(u)=A(u)u - b(u)` with respect to
the unknown parameters
:math:`u_0,u_1,\ldots,u_m` (:math:`m=N_x` or :math:`m=N_x-1`, depending on whether the
Dirichlet condition is included in the nonlinear system :math:`F(u)=0` or not).
Nonlinear equation number :math:`i` has the structure

.. math::
         F_i = A_{i,i-1}(u_{i-1},u_i)u_{i-1} +
        A_{i,i}(u_{i-1},u_i,u_{i+1})u_i +
        A_{i,i+1}(u_i, u_{i+1})u_{i+1} - b_i(u_i){\thinspace .}

Computing the Jacobian requires careful differentiation. For example,

.. math::
        
        \frac{\partial}{\partial u_i}(A_{i,i}(u_{i-1},u_i,u_{i+1})u_i) &=
        \frac{\partial A_{i,i}}{\partial u_i}u_i + A_{i,i}
        \frac{\partial u_i}{\partial u_i}\\ 
        &=
        \frac{\partial}{\partial u_i}(
        \frac{1}{2\Delta x^2}({\alpha}(u_{i-1}) + 2{\alpha}(u_{i})
        +{\alpha}(u_{i+1})) + a)u_i +\\ 
        &\quad\frac{1}{2\Delta x^2}({\alpha}(u_{i-1}) + 2{\alpha}(u_{i})
        +{\alpha}(u_{i+1})) + a\\ 
        &= \frac{1}{2\Delta x^2}(2{\alpha}^\prime (u_i)u_i
        +{\alpha}(u_{i-1}) + 2{\alpha}(u_{i})
        +{\alpha}(u_{i+1})) + a{\thinspace .}
        

The complete Jacobian becomes

.. math::
        
        J_{i,i} &= \frac{\partial F_i}{\partial u_i}
        = \frac{\partial A_{i,i-1}}{\partial u_i}u_{i-1}
        + \frac{\partial A_{i,i}}{\partial u_i}u_i
        + A_{i,i}
        + \frac{\partial A_{i,i+1}}{\partial u_i}u_{i+1}
        - \frac{\partial b_i}{\partial u_{i}}\\ 
        &=
        \frac{1}{2\Delta x^2}(
        -{\alpha}^{\prime}(u_i)u_{i-1}
        +2{\alpha}^{\prime}(u_i)u_{i}
        +{\alpha}(u_{i-1}) + 2{\alpha}(u_i) + {\alpha}(u_{i+1})) +\\ 
        &\quad a
        -\frac{1}{2\Delta x^2}{\alpha}^{\prime}(u_{i})u_{i+1}
        - b^{\prime}(u_i),\\ 
        J_{i,i-1} &= \frac{\partial F_i}{\partial u_{i-1}}
        = \frac{\partial A_{i,i-1}}{\partial u_{i-1}}u_{i-1}
        + A_{i-1,i}
        + \frac{\partial A_{i,i}}{\partial u_{i-1}}u_i
        - \frac{\partial b_i}{\partial u_{i-1}}\\ 
        &=
        \frac{1}{2\Delta x^2}(
        -{\alpha}^{\prime}(u_{i-1})u_{i-1} - ({\alpha}(u_{i-1}) + {\alpha}(u_i))
        + {\alpha}^{\prime}(u_{i-1})u_i),\\ 
        J_{i,i+1} &= \frac{\partial A_{i,i+1}}{\partial u_{i-1}}u_{i+1}
        + A_{i+1,i} +
        \frac{\partial A_{i,i}}{\partial u_{i+1}}u_i
        - \frac{\partial b_i}{\partial u_{i+1}}\\ 
        &=\frac{1}{2\Delta x^2}(
        -{\alpha}^{\prime}(u_{i+1})u_{i+1} - ({\alpha}(u_{i}) + {\alpha}(u_{i+1}))
        + {\alpha}^{\prime}(u_{i+1})u_i)
        {\thinspace .}
        

The explicit expression for nonlinear equation number :math:`i`,
:math:`F_i(u_0,u_1,\ldots)`, arises from moving the :math:`(u_i)` term in
:eq:`nonlin:alglevel:1D:fd:deq` to the left-hand side:

.. math::
        
        F_i = -\frac{1}{2\Delta x^2}
        \left(({\alpha}(u_i)+{\alpha}(u_{i+1}))(u_{i+1}-u_i) -
        ({\alpha}(u_{i-1})+{\alpha}(u_{i}))(u_{i}-u_{i-1})\right)\nonumber
        

.. _Eq:nonlin:alglevel:1D:fd:deq2:

.. math::
   :label: nonlin:alglevel:1D:fd:deq2
          
        \qquad\qquad + au_i - f(u_i) = 0{\thinspace .}
        
        

At the boundary point :math:`i=0`, :math:`u_{-1}` must be replaced using
the formula :eq:`nonlin:alglevel:1D:fd:Neumann:x0:um1`.
When the Dirichlet condition at :math:`i=N_x` is not a part of the
equation system, the last equation :math:`F_m=0` for :math:`m=N_x-1`
involves the quantity :math:`u_{N_x-1}` which must be replaced by :math:`D`.
If :math:`u_{N_x}` is treated as an unknown in the system, the
last equation :math:`F_m=0` has :math:`m=N_x` and reads

.. math::
         F_{N_x}(u_0,\ldots,u_{N_x}) = u_{N_x} - D = 0{\thinspace .}

Similar replacement of :math:`u_{-1}` and :math:`u_{N_x}` must be done in
the Jacobian for the first and last row. When :math:`u_{N_x}`
is included as an unknown, the last row in the Jacobian
must help implement the condition :math:`\delta u_{N_x}=0`, since
we assume that :math:`u` contains the right Dirichlet value
at the beginning of the iteration (:math:`u_{N_x}=D`), and then
the Newton update should be zero for :math:`i=0`, i.e., :math:`\delta u_{N_x}=0`.
This also forces the right-hand side to be :math:`b_i=0`, :math:`i=N_x`.

We have seen, and can see from the present example, that the
linear system in Newton's method contains all the terms present
in the system that arises in the Picard iteration method.
The extra terms in Newton's method can be multiplied by a factor
such that it is easy to program one linear system and set this
factor to 0 or 1 to generate the Picard or Newton system.

.. Remark: Neumann cond at x=L and Dirichlet at x=0 leads to different

.. numbering of unknowns and u at mesh points. Must address this

.. in a remark and treat it properly in diffu.

.. _nonlin:alglevel:1D:fe:

Galerkin-type discretizations
-----------------------------

For a Galerkin-type discretization, which may be developed into
a finite element method, we first need to derive the
variational problem. Let :math:`V` be an appropriate function space
with basis functions :math:`\left\{ {{\psi}}_i \right\}_{i\in{\mathcal{I}_s}}`. Because of the
Dirichlet condition at :math:`x=L` we require :math:`{\psi}_i(L)=0`, :math:`i\in{\mathcal{I}_s}`.
The approximate solution is written as :math:`u = D + \sum_{j\in{\mathcal{I}_s}}c_j{\psi}_j`,
where the term :math:`D` can be viewed as a boundary function needed to
implement the Dirichlet condition :math:`u(L)=D`.

Using Galerkin's method,
we multiply the differential equation by any :math:`v\in V` and integrate
terms with second-order derivatives by parts:

.. math::
        
        \int_0^L {\alpha}(u)u^{\prime}v^{\prime}{\, \mathrm{d}x} + \int_0^L auv{\, \mathrm{d}x} =
        \int_0^L f(u)v{\, \mathrm{d}x} + [{\alpha}(u)u^{\prime}v]_0^L,\quad \forall v\in V{\thinspace .}
        

The Neumann condition at the boundary :math:`x=0` is inserted in the
boundary term:

.. math::
         [{\alpha}(u)u^{\prime}v]_0^L = {\alpha}(u(L))u^{\prime}(L)v(L) - {\alpha}(u(0))u^{\prime}(0)v(0)
        = 0 - Cv(0)=-Cv(0){\thinspace .}
        

(Recall that since :math:`{\psi}_i(L)=0`, any linear combination :math:`v`
of the basis functions also vanishes at :math:`x=L`: :math:`v(L)=0`.)
The variational problem is then:
find :math:`u\in V` such that

.. _Eq:nonlin:alglevel:1D:pde:varform:

.. math::
   :label: nonlin:alglevel:1D:pde:varform
        
        \int_0^L {\alpha}(u)u^{\prime}v^{\prime}{\, \mathrm{d}x} + \int_0^L auv{\, \mathrm{d}x} =
        \int_0^L f(u)v{\, \mathrm{d}x} - Cv(0),\quad \forall v\in V{\thinspace .}
        
        

To derive the algebraic equations, we note that :math:`\forall v\in V` is
equivalent with :math:`v={\psi}_i` for :math:`i\in{\mathcal{I}_s}`. Setting :math:`u=D+\sum_jc_j{\psi}_j`
and sorting terms results in the linear system

.. math::
        
        \sum_{j\in{\mathcal{I}_s}}\left(
        \int_0^L {\alpha}(D+\sum_{k\in{\mathcal{I}_s}}c_k{\psi}_k)
        {\psi}_j^{\prime}{\psi}_i^{\prime}{\, \mathrm{d}x}\right)c_j =
        \int_0^L f(D+\sum_{k\in{\mathcal{I}_s}}c_k{\psi}_k){\psi}_i{\, \mathrm{d}x} -
        C{\psi}_i(0),\quad i\in{\mathcal{I}_s}{\thinspace .}
        

Fundamental integration problem
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Methods that use the Galerkin or weighted residual principle
face a fundamental difficulty in nonlinear
problems: how can we integrate a terms like
:math:`\int_0^L {\alpha}(\sum_{k}c_k{\psi}_k){\psi}_i^{\prime}{\psi}_j^{\prime}{\, \mathrm{d}x}`
and :math:`\int_0^L f(\sum_{k}c_k{\psi}_k){\psi}_i{\, \mathrm{d}x}`
when we do not know
the :math:`c_k` coefficients in the argument of the :math:`{\alpha}` function?
We can resort to numerical integration, provided an approximate
:math:`\sum_kc_k{\psi}_k` can be used for the argument :math:`u` in :math:`f` and :math:`{\alpha}`.
This is the approach used in computer programs.

However, if we want to look more mathematically into the structure of
the algebraic equations generated by the finite element method in
nonlinear problems, and compare such equations with those arising in
the finite difference method, we need techniques that enable
integration of expressions like :math:`\int_0^L
f(\sum_{k}c_k{\psi}_k){\psi}_i{\, \mathrm{d}x}` *by hand*. Two such techniques
will be shown: the group finite element and numerical integration
based on the nodes only. Both techniques are approximate, but they
allow us to see the difference equations in the finite element method.

Finite element basis functions
------------------------------

Introduction of finite element basis functions :math:`{\varphi}_i` means setting

.. math::
         {\psi}_i = {\varphi}_{\nu(i)},\quad i\in{\mathcal{I}_s},

where degree of freedom number :math:`\nu(i)` in the mesh corresponds to
unknown number :math:`i` (:math:`c_i`).
In the present example, we use all the basis functions except the
last at :math:`i=N_n-1`, i.e., :math:`{\mathcal{I}_s} = \{0,\ldots,N_n-2\}`, and :math:`\nu(j)=j`.
The expansion of :math:`u` can be taken as

.. math::
         u = D + \sum_{j\in{\mathcal{I}_s}} c_j{\varphi}_{\nu(j)},

but it is more common in a finite element context to use a boundary
function :math:`B=\sum_{j\in{I_b}}U_j{\varphi}_j`, where :math:`U_j` are prescribed
Dirichlet conditions for degree of freedom number :math:`j` and :math:`U_j` is
the corresponding value.

.. math::
         u = D{\varphi}_{N_n-1} + \sum_{j\in{\mathcal{I}_s}} c_j{\varphi}_{\nu(j)}{\thinspace .}
        

In the general case with :math:`u` prescribed as :math:`U_j` at some nodes :math:`j\in{I_b}`,
we set

.. math::
         u = \sum_{j\in{I_b}} U_j{\varphi}_j +
        \sum_{j\in{\mathcal{I}_s}}c_j{\varphi}_{\nu(j)},

where :math:`c_j = u(x^{\nu(j)})`. That is, :math:`\nu(j)` maps unknown number :math:`j` to
the corresponding node number :math:`\nu(j)` such that :math:`c_j = u(x^{\nu(j)})`.

.. _nonlin:alglevel:1D:fe:group:

The group finite element method
-------------------------------

Finite element approximation of functions of :math:`u`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since we already expand :math:`u` as :math:`\sum_j{\varphi}_j u(x_{j})`, we may use the
same approximation for other functions as well. For example,

.. math::
        
        f(u)\approx \sum_{j} f(x_{j}){\varphi}_j,
        

where :math:`f(x_{j})` is the value of :math:`f` at node :math:`j`. Since :math:`f` is a function
of :math:`u`, :math:`f(x_{j})=f(u(x_{j}))`. Introducing
:math:`u_j` as a short form for :math:`u(x_{j})`, we can write

.. math::
        
        f(u)\approx \sum_{j} f(u_{j}){\varphi}_j{\thinspace .}
        

This approximation is known as the *group finite element method*
or the *product approximation* technique. The index :math:`j` runs over
all node numbers in the mesh.

The principal advantages of the group finite element method are two-fold:

1. Complicated nonlinear expressions can be simplified to increase
   the efficiency of numerical computations.

2. One can derive *symbolic forms* of the difference equations arising
   from the finite element method in nonlinear problems.
   The symbolic form is useful for comparing finite element and finite
   difference equations of nonlinear differential equation problems.

Below, we shall explore point 2 to see exactly how the finite element
method creates more complex expressions in the resulting
linear system (the difference equations) that the finite difference
method does. It turns out that is very difficult to see
what kind of turns in the difference equations that arise from
:math:`\int f(u){\varphi}_i{\, \mathrm{d}x}` without using the group finite element
method or numerical integration utilizing the nodes only.

Note, however, that an expression like :math:`\int f(u){\varphi}_i{\, \mathrm{d}x}` causes
no problems in a computer program as the integral is calculated by
numerical integration using an existing approximation of :math:`u` in
:math:`f(u)` such that the integrand can be sampled at any spatial point.

Simplified problem
~~~~~~~~~~~~~~~~~~

Our aim now is the derive symbolic expressions for the difference
equations arising from the finite element method in nonlinear
problems and compare the expressions with those arising in the
finite difference method. To this,
let us simplify the model problem and set :math:`a=0`, :math:`{\alpha}=1`,
:math:`f(u)=u^2`, and have Neumann conditions at both ends such that we
get a very simple nonlinear problem :math:`-u^{\prime\prime}=u^2`,
:math:`u'(0)=1`, :math:`u'(L)=0`.
The variational form is then

.. math::
         \int_0^L u^{\prime}v^{\prime}{\, \mathrm{d}x} = \int_0^L u^2v{\, \mathrm{d}x}
        - v(0),\quad\forall v\in V{\thinspace .}

The term with :math:`u^{\prime}v^{\prime}` is well known so the only new feature is
the term :math:`\int u^2v{\, \mathrm{d}x}`.

To make the distance from finite element equations to finite
difference equations as short as possible, we shall substitute :math:`c_j`
in the sum :math:`u=\sum_jc_j{\varphi}_j` by :math:`u_j=u(x_{j})` since :math:`c_j` is
the value of :math:`u` at node :math:`j`. (In the more general case
with Dirichlet conditions as well, we have a sum
:math:`\sum_jc_j{\varphi}_{\nu(j)}` where :math:`c_j` is replaced by :math:`u(x_{\nu(j)})`.
We can then introduce some other counter :math:`k` such that it is
meaningful to write :math:`u=\sum_k u_k{\varphi}_k`, where :math:`k` runs over appropriate
node numbers.)
The quantity :math:`u_j` in :math:`\sum_ju_j{\varphi}_j`
is the same as :math:`u` at mesh point number :math:`j`
in the finite difference method, which is commonly denoted :math:`u_j`.

Integrating nonlinear functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider the term :math:`\int u^2v{\, \mathrm{d}x}` in the variational formulation
with :math:`v={\varphi}_i` and :math:`u=\sum_k{\varphi}_ku_k`:

.. math::
         \int_0^L (\sum_ku_k{\varphi}_k)^2{\varphi}_i{\, \mathrm{d}x}{\thinspace .}

Evaluating this integral for P1 elements (see :ref:`nonlin:exer:fu:fem:int`) results in the expression

.. math::
         \frac{h}{12}(u_{i-1}^2 + 2u_i(u_{i-1} + u_{i+1}) + 6u_i^2
        + u_{i+1}^2),

to be compared with the simple value :math:`u_i^2` that would arise in
a finite difference discretization when :math:`u^2` is sampled at
mesh point :math:`x_i`. More complicated :math:`f(u)` functions
give rise to much more lengthy expressions, if it is possible to
carry out the integral symbolically at all.

.. index:: group finite element method

.. index:: product approximation technique

Application of the group finite element method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let use the group finite element method to derive the terms in
the difference equation corresponding to :math:`f(u)` in the differential
equation. We have

.. math::
         \int_0^L f(u){\varphi}_i{\, \mathrm{d}x} \approx
        \int_0^L (\sum_j {\varphi}_jf(u_j)){\varphi}_i{\, \mathrm{d}x}
        = \sum_j \left(\int_0^L {\varphi}_i{\varphi}_j{\, \mathrm{d}x}\right) f(u_j){\thinspace .}

We recognize this expression as the mass matrix :math:`M`, arising from
:math:`\int{\varphi}_i{\varphi}_j{\, \mathrm{d}x}`, times the
vector :math:`f=(f(u_0),f(u_1),\ldots,)`: :math:`Mf`. The associated terms
in the difference equations are, for P1 elements,

.. math::
         \frac{h}{6}(f(u_{i-1}) + 4f(u_i) + f(u_{i+1})){\thinspace .}

Occasionally, we want to interpret this expression in terms of finite
differences, and to this end a rewrite of this expression is convenient:

.. math::
         \frac{h}{6}(f(u_{i-1}) + 4f(u_i) + f(u_{i+1}))
        = h[f(u) - \frac{h^2}{6}D_xD_x f(u)]_i{\thinspace .}

That is, the finite element treatment of :math:`f(u)` (when using a group
finite element method) gives the same term as in a finite difference
approach, :math:`f(u_i)`, minus a diffusion term which is the
2nd-order discretization of :math:`\frac{1}{6}h^2f''(x_i)`.

We may lump the mass matrix through integration with the Trapezoidal
rule so that :math:`M` becomes diagonal in the finite element method.
In that case the :math:`f(u)` term in the differential equation
gives rise to a single term :math:`hf(u_i)`, just as in the finite difference
method.

.. _nonlin:alglevel:1D:fe:f:

Numerical integration of nonlinear terms
----------------------------------------

Let us reconsider a term :math:`\int f(u)v{\, \mathrm{d}x}` as treated in the previous
section, but now we want to integrate this term numerically.
Such an approach can lead to easy-to-interpret formulas if we apply
a numerical integration rule that samples the integrand at the node
points :math:`x_{i}` only, because at such points, :math:`{\varphi}_j(x_{i})=0`
if :math:`j\neq i`, which leads to great simplifications.

The term in question takes the form

.. math::
         \int_0^L f(\sum_k u_k{\varphi}_k){\varphi}_i{\, \mathrm{d}x}{\thinspace .}

Evaluation of the integrand at a node :math:`x_{\ell}` leads to a
collapse of the sum :math:`\sum_k u_k{\varphi}_k` to one term because

.. math::
         \sum_k u_k{\varphi}_k(x_{\ell}) = u_\ell{\thinspace .}

.. math::
         f(\sum_k u_k\underbrace{{\varphi}_k(x_{\ell})}_{\delta_{k\ell}})
        \underbrace{{\varphi}_i(x_{\ell})}_{\delta_{i\ell}}
        = f(u_\ell)\delta_{i\ell},

where we have used the Kronecker delta: :math:`\delta_{ij}=0` if :math:`i\neq j` and
:math:`\delta_{ij}=1` if :math:`i=j`.

Considering the Trapezoidal rule for integration, where the integration
points are the nodes, we have

.. math::
        
        \int_0^L f(\sum_k u_k{\varphi}_k)(x){\varphi}_i(x){\, \mathrm{d}x}
        \approx h\sum_{\ell=0}^{N_n} f(u_\ell)\delta_{i\ell} - \mathcal{C}
        = hf(u_i){\thinspace .}
        

This is the same representation of the :math:`f` term as in the finite
difference method.
The term :math:`\mathcal{C}` contains the evaluations of the integrand
at the ends with weight :math:`\frac{1}{2}`, needed to make a true Trapezoidal rule:

.. math::
         \mathcal{C} = \frac{h}{2}f(u_0){\varphi}_i(0) + \frac{h}{2}f(u_{N_n-1}){\varphi}_i(L){\thinspace .}

The answer :math:`hf(u_i)` must therefore be multiplied by :math:`\frac{1}{2}` if
:math:`i=0` or :math:`i=N_n-1`. Note that :math:`\mathcal{C}=0` for :math:`i=1,\ldots,N_n-2`.

One can alternatively use the Trapezoidal rule on the reference cell and
assemble the contributions. It is a bit more labor in this context,
but working on the reference cell is safer as that approach is
guaranteed to handle discontinuous derivatives of finite element
functions correctly (not important in this particular example),
while the rule above was derived with the
assumption that :math:`f` is continuous at the integration points.

The conclusion is that it suffices to use the Trapezoidal rule if
one wants to derive the difference equations in the finite element
method and make them similar to those arising in the finite difference
method. The Trapezoidal rule has sufficient accuracy for P1 elements, but
for P2 elements one should turn to Simpson's rule.

.. _nonlin:alglevel:1D:fe:Laplace:

Finite element discretization of a variable coefficient Laplace term
--------------------------------------------------------------------

Turning back to the model problem :eq:`nonlin:alglevel:1D:pde`, it
remains to calculate the contribution of the :math:`({\alpha} u^{\prime})^{\prime}`
and boundary terms
to the difference equations. The integral in the variational form
corresponding to :math:`({\alpha} u^{\prime})^{\prime}` is

.. math::
         \int_0^L {\alpha}(\sum_k c_k{\psi}_k){\psi}_i^{\prime}{\psi}_j^{\prime}{\, \mathrm{d}x}{\thinspace .}

Numerical integration utilizing a value of :math:`\sum_k c_k{\psi}_k` from
a previous iteration must in general be used to compute the integral.
Now our aim is to integrate symbolically, as much as we can, to obtain
some insight into how the finite element method approximates
this term.
To be able to derive symbolic expressions, we must either turn to
the group finite element method or numerical integration in the
node points. Finite element basis functions :math:`{\varphi}_i` are now used.

Group finite element method
~~~~~~~~~~~~~~~~~~~~~~~~~~~

We set :math:`{\alpha}(u)\approx \sum_k\alpha(u_k){\varphi}_k`, and then
we write

.. math::
        
        \int_0^L {\alpha}(\sum_k c_k{\varphi}_k){\varphi}_i^{\prime}{\varphi}_j^{\prime}{\, \mathrm{d}x}
        \approx
        \sum_k (\underbrace{\int_0^L {\varphi}_k{\varphi}_i^{\prime}{\varphi}_j^{\prime}{\, \mathrm{d}x}}_{L_{i,j,k}})
        {\alpha}(u_k) = \sum_k L_{i,j,k}{\alpha}(u_k){\thinspace .}
        

Further calculations are now easiest to carry out in the reference
cell. With P1 elements we can compute
:math:`L_{i,j,k}` for the two :math:`k` values that are relevant on the reference
cell. Turning to local indices, one gets

.. math::
        
        L_{r,s,t}^{(e)} =
        \frac{1}{2h}\left(\begin{array}{rr}
        1 & -1\\ 
        -1 & 1
        \end{array}\right),\quad t=0, 1,
        

where :math:`r,s,t=0,1` are indices over local degrees of
freedom in the reference cell
(:math:`i=q(e,r)`, :math:`j=q(e,s)`, and :math:`k=q(e,t)`). The
sum :math:`\sum_k L_{i,j,k}{\alpha}(u_k)` at the cell level becomes
:math:`\sum_{t=0}^1 L_{r,s,t}^{(e)}{\alpha}(\tilde u_t)`, where :math:`\tilde u_t`
is :math:`u(x_{q(e,t)})`, i.e., the value of :math:`u` at local node number :math:`t` in
cell number :math:`e`. The element matrix becomes

.. _Eq:nonlin:alglevel:1D:fe:Laplace:Ae:

.. math::
   :label: nonlin:alglevel:1D:fe:Laplace:Ae
        
        \frac{1}{2} ({\alpha}(\tilde u_0) + {\alpha}(\tilde u^{(1)}))
        \frac{1}{h}\left(\begin{array}{rr}
        1 & -1\\ 
        -1 & 1
        \end{array}\right){\thinspace .}
        
        

As usual, we employ
a left-to-right numbering of cells and nodes.
Row number :math:`i` in the global matrix gets contributions from
the first row of the element matrix in cell :math:`i` and the last
row of the element matrix in cell :math:`i-1`.
In cell number :math:`i-1` the sum
:math:`{\alpha}(\tilde u_0) + {\alpha}(\tilde u^{(1)})` corresponds to
:math:`{\alpha}(u_{i-1}) + {\alpha}(u_i)`. The same sum becomes
:math:`{\alpha}(u_{i}) + {\alpha}(u_{i+1})` in cell number :math:`i`.
We can with this insight assemble the contributions to row number :math:`i`
in the global matrix:

.. math::
         \frac{1}{2h}(-({\alpha}(u_{i-1}) + {\alpha}(u_i)),\quad
        {\alpha}(u_{i-1}) + 2{\alpha}(u_i) + {\alpha}(u_{i+1}),\quad
        {\alpha}(u_{i}) + {\alpha}(u_{i+1})){\thinspace .}
        

Multiplying by the vector of unknowns :math:`u_i` results in a formula that
can be arranged to

.. _Eq:nonlin:alglevel:1D:fe:Laplace:diffeq:

.. math::
   :label: nonlin:alglevel:1D:fe:Laplace:diffeq
        
        -\frac{1}{h}(\frac{1}{2}({\alpha}(u_i) + {\alpha}(u_{i+1}))(u_{i+1}-u_i)
        -  \frac{1}{2}({\alpha}(u_{i-1}) + {\alpha}(u_{i}))(u_{i}-u_{i-1})),
        
        

which is nothing but the standard finite difference discretization
of :math:`-({\alpha}(u)u^{\prime})^{\prime}` with an arithmetic mean of :math:`{\alpha}(u)` (and
the usual factor :math:`h` because of the integration in the finite element method).

Numerical integration at the nodes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Instead of using the group finite element method and exact integration
we can turn to the Trapezoidal rule for computing
:math:`\int_0^L {\alpha}(\sum_k u_k{\varphi}_k){\varphi}_i^{\prime}{\varphi}_j^{\prime}{\, \mathrm{d}x}`, again at
the cell level since that is most convenient when we deal with discontinuous
functions :math:`{\varphi}_i'`:

.. math::
        
        \int_{-1}^1 \alpha(\sum_t\tilde u_t{\tilde{\varphi}}_t){\tilde{\varphi}}_r'{\tilde{\varphi}}_s'\frac{h}{2}dX
        = \int_{-1}^1 {\alpha}(\sum_{t=0}^1
        \tilde u_t{\tilde{\varphi}}_t)\frac{2}{h}\frac{d{\tilde{\varphi}}_r}{dX}
        \frac{2}{h}\frac{d{\tilde{\varphi}}_s}{dX}\frac{h}{2}dX\nonumber
        

.. math::
          
         = \frac{1}{2h}(-1)^r(-1)^s \int_{-1}^1 {\alpha}(\sum_{t=0}^1 u_t{\tilde{\varphi}}_t(X))dX
        \nonumber
        

.. math::
          
         \approx \frac{1}{2h}(-1)^r(-1)^s{\alpha} (
        \sum_{t=0}^1{\tilde{\varphi}}_t(-1)\tilde u_t) + {\alpha}(\sum_{t=0}^1{\tilde{\varphi}}_t(1)\tilde u_t)
        \nonumber
        

.. _Eq:nonlin:alglevel:1D:fe:Laplace:Ae:Trapez:

.. math::
   :label: nonlin:alglevel:1D:fe:Laplace:Ae:Trapez
          
         = \frac{1}{2h}(-1)^r(-1)^s({\alpha}(\tilde u_0) + {\alpha}(\tilde u^{(1)})){\thinspace .}
        
        

The element matrix in :eq:`nonlin:alglevel:1D:fe:Laplace:Ae:Trapez`
is identical to the one in
:eq:`nonlin:alglevel:1D:fe:Laplace:Ae`, showing that the
group finite element method and Trapezoidal integration are
equivalent with a standard finite discretization of a
nonlinear Laplace term :math:`({\alpha}(u)u^{\prime})^{\prime}` using an arithmetic mean for
:math:`{\alpha}`: :math:`[D_x\overline{x}D_xu]_i`.


.. admonition:: Remark about integration in the physical :math:`x` coordinate

   We might comment on integration in the physical coordinate system too.
   The common Trapezoidal rule in the section :ref:`nonlin:alglevel:1D:fe:f`
   cannot be used to integrate derivatives like :math:`{\varphi}_i^{\prime}`, because
   the formula is derived under the assumption of a continuous integrand.
   One must instead use the more basic version of the Trapezoidal rule
   where all the trapezoids are summed up. This is straightforward, but
   I think it is even more straightforward to apply the Trapezoidal
   rule on the reference cell and assemble the contributions.




The term :math:`\int auv{\, \mathrm{d}x}` in the variational form is linear and gives
these terms in the algebraic equations:

.. math::
         \frac{ah}{6}(u_{i-1} + 4u_i + u_{i+1})
        = ah[u - \frac{h^2}{6}D_xD_x u]_i{\thinspace .}

The final term in the variational form is the Neumann condition
at the boundary: :math:`Cv(0)=C{\varphi}_i(0)`. With a left-to-right numbering
only :math:`i=0` will give a contribution :math:`Cv(0)=C\delta_{i0}` (since
:math:`{\varphi}_i(0)\neq 0` only for :math:`i=0`).


.. admonition:: Summary

   For the equation
   
   .. math::
            -({\alpha}(u)u^{\prime})^{\prime} +au = f(u),
   
   P1 finite elements results in difference equations where
   
    * the term :math:`-({\alpha}(u)u^{\prime})^{\prime}` becomes :math:`-h[D_x\overline{{\alpha}(u)}^xD_x u]_i`
      if the group finite element method or Trapezoidal integration is applied,
   
    * :math:`f(u)` becomes :math:`hf(u_i)` with Trapezoidal integration or the
      "mass matrix" representation :math:`h[f(u) - \frac{h}{6}D_xD_x f(u)]_i`
      if computed by a group finite element method,
   
    * :math:`au` leads to the "mass matrix" form :math:`ah[u - \frac{h}{6}D_xD_x u]_i`.




As we now have explicit expressions for the nonlinear difference
equations also in the finite element method, a Picard or Newton method
can be defined as shown for the finite difference method.  However,
our efforts in deriving symbolic forms of the difference equations in
the finite element method was motivated by a desire to see how
nonlinear terms in differential equations make the finite element and
difference method different. For practical calculations in computer
programs we apply numerical integration, normally the more accurate
Gauss-Legendre quadrature rules, to the integrals directly. This
allows us to easily *evaluate* the nonlinear algebraic equations for a
given numerical approximation of :math:`u` (here denoted :math:`u^{-}`).  To
*solve* the nonlinear algebraic equations we need to apply the Picard
iteration method or Newton's method to the variational form directly,
as shown next.

.. _nonlin:alglevel:1D:fe:Picard:

Picard iteration defined from the variational form
--------------------------------------------------

We address again the problem :eq:`nonlin:alglevel:1D:pde` with
the corresponding
variational form :eq:`nonlin:alglevel:1D:pde:varform`.
Our aim is to define a Picard iteration based on this variational
form without any attempt to compute integrals symbolically as in
the previous three sections.
The idea  in Picard iteration is to use a previously computed :math:`u` value in
the nonlinear functions :math:`{\alpha}(u)` and :math:`f(u)`. Let :math:`u^{-}` be
the available approximation to :math:`u` from the previous iteration.
The linearized variational form for Picard iteration is then

.. _Eq:nonlin:alglevel:1D:pde:varform:Picard:

.. math::
   :label: nonlin:alglevel:1D:pde:varform:Picard
        
        \int_0^L ({\alpha}(u^{-})u^{\prime}v^{\prime} + auv){\, \mathrm{d}x} = \int_0^L f(u^{-})v{\, \mathrm{d}x} -
        Cv(0),\quad \forall v\in V{\thinspace .}
        
        

This is a linear problem :math:`a(u,v)=L(v)` with bilinear and linear forms

.. math::
         a(u,v) = \int_0^L ({\alpha}(u^{-})u^{\prime}v^{\prime} + auv){\, \mathrm{d}x},\quad
        L(v) = \int_0^L f(u^{-})v{\, \mathrm{d}x} - Cv(0){\thinspace .}

Make sure to distinguish the coefficient :math:`a` in :math:`auv` from the
differential equation from the :math:`a` in
the abstract bilinear form notation :math:`a(\cdot,\cdot)`.

The linear system associated with
:eq:`nonlin:alglevel:1D:pde:varform:Picard` is computed the standard way.
Technically, we are back to solving :math:`-({\alpha}(x)u^{\prime})^{\prime} + au=f(x)`.
The unknown :math:`u` is sought on the form
:math:`u = B(x) + \sum_{j\in{\mathcal{I}_s}}c_j{\psi}_j`, with :math:`B(x)=D`
and :math:`{\psi}_i = {\varphi}_{\nu(i)}`, :math:`\nu(i)=i+1`, and
:math:`{\mathcal{I}_s} = \{0,1,\ldots,N=N_n-2\}`.

.. _nonlin:alglevel:1D:fe:Newton:

Newton's method defined from the variational form
-------------------------------------------------

Application of Newton's method to the nonlinear variational
form :eq:`nonlin:alglevel:1D:pde:varform` arising from
the problem :eq:`nonlin:alglevel:1D:pde` requires identification
of the nonlinear algebraic equations :math:`F_i=0`.
Although we originally denoted the unknowns in nonlinear
algebraic equations by :math:`u_0,\ldots,u_N`, it is in the present
context most natural to have the unknowns as :math:`c_0,\ldots,c_N`
and write

.. math::
         F_i(c_0,\ldots,c_N)=0, \quad i\in{\mathcal{I}_s},

and define the Jacobian as :math:`J_{i,j}=\partial F_i/\partial c_j` for
:math:`i,j\in{\mathcal{I}_s}`.

The specific form of the equations :math:`F_i=0` follows from the variational form

.. math::
        
        \int_0^L ({\alpha}(u)u^{\prime}v^{\prime} + auv){\, \mathrm{d}x} =
        \int_0^L f(u)v{\, \mathrm{d}x} - Cv(0),\quad \forall v\in V,
        

by choosing :math:`v={\psi}_i`, :math:`i\in{\mathcal{I}_s}`, and setting
:math:`u=\sum_{j\in{\mathcal{I}_s}}c_j{\psi}_j`, maybe with a boundary function
to incorporate Dirichlet conditions.

.. provided we sum over all degrees

.. of freedom and incorporate Dirichlet boundary condition in the

.. final linear systems. Alternatively, we can eliminate the

.. Dirichlet conditions from the algebraic systems and

.. use a boundary function in combination with a sum over

.. the truly unknown degrees of freedom of :math:`u` (:math:`\sum_jc_j{\varphi}_{\nu(j)}`).

.. We choose the former approach here since the indices look nicer in

.. the coming derivations.

With :math:`v={\psi}_i` we get

.. _Eq:nonlin:alglevel:1D:fe:Newton:Fi:

.. math::
   :label: nonlin:alglevel:1D:fe:Newton:Fi
        
        F_i =
        \int_0^L ({\alpha}(u)u^{\prime}{\psi}_i^{\prime} + au{\psi}_i -
        f(u){\psi}_i){\, \mathrm{d}x} + C{\psi}_i(0)=0,\quad i\in{\mathcal{I}_s}{\thinspace .}
        
        

In the differentiations leading to the Jacobian we will frequently use
the results

.. math::
         \frac{\partial u}{\partial c_j} = \frac{\partial}{\partial c_j}
        \sum_kc_k{\psi}_k = {\psi}_j,\quad
        \frac{\partial u^{\prime}}{\partial c_j} = \frac{\partial}{\partial c_j}
        \sum_kc_k{\psi}_k^{\prime} = {\psi}_j^{\prime}{\thinspace .}

The derivation of the Jacobian of :eq:`nonlin:alglevel:1D:fe:Newton:Fi` goes as

.. math::
        
        J_{i,j} = \frac{\partial F_i}{\partial c_j}
         = \int_0^L \frac{\partial}{\partial c_j}
        ({\alpha}(u)u^{\prime}{\psi}_i^{\prime} + au{\psi}_i -
        f(u){\psi}_i){\, \mathrm{d}x}\nonumber
        

.. math::
          
        =
        \int_0^L
        (({\alpha}^{\prime}(u)\frac{\partial u}{\partial c_j}u^{\prime} +
        {\alpha}(u)\frac{\partial u^{\prime}}{\partial c_j}){\psi}_i^{\prime}
        + a\frac{\partial u}{\partial c_j}{\psi}_i -
        f^{\prime}(u)\frac{\partial u}{\partial c_j}{\psi}_i){\, \mathrm{d}x}\nonumber
        

.. math::
          
        =
        \int_0^L
        (({\alpha}^{\prime}(u){\psi}_ju^{\prime} +
        {\alpha}(u){\psi}_j^{\prime}){\psi}_i^{\prime}
        + a{\psi}_j{\psi}_i -
        f^{\prime}(u){\psi}_j{\psi}_i){\, \mathrm{d}x}\nonumber
        

.. _Eq:nonlin:alglevel:1D:fe:Newton:Jij:

.. math::
   :label: nonlin:alglevel:1D:fe:Newton:Jij
          
        =
        \int_0^L
        ({\alpha}^{\prime}(u)u^{\prime}{\psi}_i^{\prime}{\psi}_j +
        {\alpha}(u){\psi}_i^{\prime}{\psi}_j^{\prime}
        + (a - f(u)){\psi}_i{\psi}_j){\, \mathrm{d}x}
        
        

When calculating the right-hand side vector :math:`F_i` and the coefficient
matrix :math:`J_{i,j}` in the linear system to be solved in each Newton
iteration, one must use
a previously computed :math:`u`, denoted by :math:`u^{-}`, for
the symbol :math:`u` in :eq:`nonlin:alglevel:1D:fe:Newton:Fi` and
:eq:`nonlin:alglevel:1D:fe:Newton:Jij`.
With this notation we have

.. _Eq:nonlin:alglevel:1D:fe:Newton:Fi2:

.. math::
   :label: nonlin:alglevel:1D:fe:Newton:Fi2
        
        F_i =
        \int_0^L\left(
        {\alpha}(u^{-})u^{-\prime}{\psi}_i^{\prime} +
        (a-f(u^{-})){\psi}_i\right){\, \mathrm{d}x} -
        C{\psi}_i(0),\quad i\in{\mathcal{I}_s},
        
        

.. _Eq:nonlin:alglevel:1D:fe:Newton:Jij2:

.. math::
   :label: nonlin:alglevel:1D:fe:Newton:Jij2
          
        J_{i,j} =
        \int_0^L
        ({\alpha}^{\prime}(u^{-})u^{-\prime}{\psi}_i^{\prime}{\psi}_j +
        {\alpha}(u^{-}){\psi}_i^{\prime}{\psi}_j^{\prime}
        + (a - f(u^{-})){\psi}_i{\psi}_j){\, \mathrm{d}x},
        \quad i,j\in{\mathcal{I}_s}{\thinspace .}
        
        

These expressions can be used for any basis :math:`\left\{ {{\psi}}_i \right\}_{i\in{\mathcal{I}_s}}`.
Choosing finite element functions for :math:`{\psi}_i`, one will
normally want to compute the integral contribution cell by cell,
working in a reference cell. To this end, we restrict the
integration to one cell and transform the cell to :math:`[-1,1]`.
The most recently computed approximation :math:`u^{-}` to :math:`u` becomes
:math:`\tilde u^{-}=\sum_t\tilde u^{-1}_t{\tilde{\varphi}}_t(X)` over the reference
element, where :math:`\tilde u^{-1}_t` is the value of :math:`u^{-}`
at global node (or degree of freedom)
:math:`q(e,t)` corresponding to the local node :math:`t` (or degree of freedom).
The formulas :eq:`nonlin:alglevel:1D:fe:Newton:Fi2` and
:eq:`nonlin:alglevel:1D:fe:Newton:Jij2` then change to

.. _Eq:nonlin:alglevel:1D:fe:Newton:Fi2:e:

.. math::
   :label: nonlin:alglevel:1D:fe:Newton:Fi2:e
        
        \tilde F_r^{(e)} =
        \int_{-1}^1\left(
        {\alpha}(\tilde u^{-})\tilde u^{-\prime}{\tilde{\varphi}}_r^{\prime} +
        (a-f(\tilde u^{-})){\tilde{\varphi}}_r\right)\det J{\, \mathrm{d}X} -
        C{\tilde{\varphi}}_r(0),
        
        

.. _Eq:nonlin:alglevel:1D:fe:Newton:Jij2:e:

.. math::
   :label: nonlin:alglevel:1D:fe:Newton:Jij2:e
          
        \tilde J_{r,s}^{(e)} =
        \int_{-1}^1
        ({\alpha}^{\prime}(\tilde u^{-})\tilde u^{-\prime}{\tilde{\varphi}}_r^{\prime}{\tilde{\varphi}}_s +
        {\alpha}(\tilde u^{-}){\tilde{\varphi}}_r^{\prime}{\tilde{\varphi}}_s^{\prime}
        + (a - f(\tilde u^{-})){\tilde{\varphi}}_r{\tilde{\varphi}}_s)\det J{\, \mathrm{d}X},
        
        

with :math:`r,s\in{I_d}` runs over the local degrees of freedom.

Many finite element programs require the user to provide :math:`F_i` and
:math:`J_{i,j}`. Some programs, like `FEniCS <http://fenicsproject.org>`__,
are capable of automatically deriving :math:`J_{i,j}` if :math:`F_i`
is specified.

Dirichlet conditions
~~~~~~~~~~~~~~~~~~~~

Incorporation of the Dirichlet values by assembling contributions from
all degrees of freedom and then modifying the linear system can be
obviously be applied to Picard iteration as that method involves
a standard linear system. In the Newton system, however, the unknown
is a correction :math:`\delta u` to the solution. Dirichlet conditions
are implemented by inserting them in the initial guess :math:`u^{-}`
for the Newton iteration and implementing :math:`\delta u_i =0` for
all known degrees of freedom. The manipulation of the linear system
follows exactly the algorithm in the linear problems, the only
difference being that the known values are zero.

