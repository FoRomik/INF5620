.. !split

In a linear differential equation all terms involving the unknown functions
are linear in the unknown functions or their derivatives. Linear here means that
the unknown function or a derivative of it is multiplied by a number or
a known function. All other differential equations are non-linear.

The easiest way to see if an equation is nonlinear is to spot nonlinear terms
where the unknown functions or their derivatives are multiplied by
each other. For example, in

.. math::
         u^{\prime}(t) = -a(t)u(t) + b(t),

the terms involving the unknown function :math:`u` are linear: :math:`u^{\prime}` contains
the derivative of the unknown function multiplied by unity, and :math:`au` contains
the unknown function multiplied by a known function.
However,

.. math::
         u^{\prime}(t) = u(t)(1 - u(t)),

is nonlinear because of the term :math:`-u^2` where the unknown function is
multiplied by itself. Also

.. math::
         \frac{\partial u}{\partial t} + u\frac{\partial u}{\partial x} = 0,

is nonlinear because of the term :math:`uu_x` where the unknown
function appears in a product with itself or one if its derivatives.
Another example of a nonlinear equation is

.. math::
         u^{\prime\prime} + \sin(u) =0,

because :math:`\sin(u)` contains products of :math:`u`,

.. math::
         \sin(u) = u - \frac{1}{3} u^3 + \ldots


.. admonition:: Mathematical proof

   To really prove mathematically that some differential equation
   in an unknown :math:`u` is linear,
   show for each term :math:`T(u)` that with :math:`u = au_1 + bu_2` for
   constants :math:`a` and :math:`b`,
   
   .. math::
            T(au_1 + bu_2) = aT(u_1) + bT(u_2){\thinspace .} 
   
   For example, the term :math:`T(u) = (\sin^2 t)u'(t)` is linear because
   
   .. math::
            T(au_1 + bu_2) = (\sin^2 t)(au_1(t) + b u_2(t)) =
           a(\sin^2 t)u_1(t) + b(\sin^2 t)u_2(t)  =aT(u_1) + bT(u_2){\thinspace .}
   
   However, :math:`T(u)=\sin u` is nonlinear because
   
   .. math::
            T(au_1 + bu_2) = \sin (au_1 + bu_2) \neq a\sin u_1 + b\sin u_2{\thinspace .}




A series of forthcoming examples will explain how to tackle
nonlinear differential equations with various techniques.

.. _nonlin:timediscrete:logistic:

Introduction of basic concepts
==============================

Consider the (scaled) logistic equation

.. _Eq:nonlin:timediscrete:logistic:eq:

.. math::
   :label: nonlin:timediscrete:logistic:eq
        
        u^{\prime}(t) = u(t)(1 - u(t)) {\thinspace .}
        
        

This is a nonlinear differential equation which will be solved by
different strategies in the following.
A time discretization of :eq:`nonlin:timediscrete:logistic:eq`
will either lead to a linear algebraic equation or a nonlinear
algebraic equation at each time level.
In the former case, the time discretization method transforms
the nonlinear ODE into linear subproblems at each time level, and
the solution is straightforward to find since linear algebraic equations
are easy to solve by hand. However,
when the time discretization leads to nonlinear algebraic equations, we
cannot (except in very rare cases) solve these without turning to
approximate, iterative solution methods.

The following subsections first introduce various methods
using :eq:`nonlin:timediscrete:logistic:eq`:

 * explicit time discretization methods (with no need to
   solve nonlinear algebraic equations)

 * implicit Backward Euler discretization, leading to nonlinear
   algebraic equations solved by

  * an exact analytical technique

  * Picard iteration based on manual linearization

  * a single Picard step

  * Newton's method

 * Implicit Crank-Nicolson discretization and linearization
   via a geometric mean formula

Thereafter, we compare the performance of the various approaches. Despite
the simplicity of :eq:`nonlin:timediscrete:logistic:eq`, the conclusions
reveal typical features of the various methods in much more complicated
nonlinear PDE problems.

.. _nonlin:timediscrete:logistic:FE:

Linearization by explicit time discretization
---------------------------------------------

.. index::
   single: linearization; explicit time integration

A Forward Euler
method to solve :eq:`nonlin:timediscrete:logistic:eq` results in

.. math::
         \frac{u^{n+1} - u^n}{\Delta t} = u^n(1 - u^n),

which is a *linear* algebraic
equation for the unknown value :math:`u^{n+1}`.
The nonlinearity in the original equation poses in this case no difficulty
in the discrete algebraic equation.
Any other explicit scheme in time will also give only linear
algebraic equations
to solve. For example, a typical 2nd-order Runge-Kutta method
for :eq:`nonlin:timediscrete:logistic:eq` reads,

.. math::
        
        u^* &= u^n + \Delta t u^n(1 - u^n),\\ 
        u^{n+1} &= u^n + \Delta t \frac{1}{2} \left(
        u^n(1 - u^n) + u^*(1 - u^*))
        \right){\thinspace .}
        

The first step is linear in the unknown :math:`u^*`. Then :math:`u^*` is
known in the next step, which is linear in the unknown :math:`u^{n+1}` .

.. _nonlin:timediscrete:logistic:roots:

Exact solution of nonlinear equations
-------------------------------------

Switching to a Backward Euler scheme for
:eq:`nonlin:timediscrete:logistic:eq`,

.. _Eq:nonlin:timediscrete:logistic:eq:BE:

.. math::
   :label: nonlin:timediscrete:logistic:eq:BE
        
        \frac{u^{n} - u^{n-1}}{\Delta t} = u^n(1 - u^n),
        
        

results in a nonlinear algebraic equation for the unknown value :math:`u^n`.
The equation is of quadratic type:

.. math::
         \Delta t (u^n)^2 + (1-\Delta t)u^n - u^{n-1} = 0{\thinspace .} 

We shall now introduce a shorter and often cleaner notation for
nonlinear algebraic equations at a given time level. The notation is
inspired by the natural notation, i.e., variable names, used in a
program, especially in more advanced partial differential equation
problems. The unknown in the algebraic equation is denoted by :math:`u`,
while :math:`u^{(1)}` is the value of the unknown at the previous time level
(in general :math:`u^{(\ell)}` is the value of the unknown :math:`\ell` levels
back in time). The notation will be frequently used in later
sections. What is meant by :math:`u` (the exact solution of the PDE problem,
the numerical approximation to the exact solution, or the unknown
solution at a certain time level) should be evident from the context.

The quadratic equation for the unknown :math:`u^n` in
:eq:`nonlin:timediscrete:logistic:eq:BE` can with the new
notation be written

.. _Eq:nonlin:timediscrete:logistic:eq:F:

.. math::
   :label: nonlin:timediscrete:logistic:eq:F
        
        F(u) = \Delta t u^2 + (1-\Delta t)u - u^{(1)} = 0{\thinspace .}
        
        

The solution is readily found to be

.. _Eq:nonlin:timediscrete:logistic:eq:roots:

.. math::
   :label: nonlin:timediscrete:logistic:eq:roots
        
        u = \frac{1}{2\Delta t}
        \left(-1+\Delta t \pm \sqrt{(1-\Delta t)^2 - 4\Delta t u^{(1)}}\right)
        {\thinspace .}
        
        

Now we encounter a fundamental challenge with nonlinear
algebraic equations:
the equation may have more than one solution. How do we pick the right
solution? In the present simple case we can expand the square root
in a series in :math:`\Delta t` and truncate after the linear term since
the Backward Euler scheme will introduce an error proportional to
:math:`\Delta t` anyway. Using ``sympy`` we find the following Taylor series
expansions of the roots:

.. code-block:: python

        >>> import sympy as sp
        >>> dt, u_1, u = sp.symbols('dt u_1 u')
        >>> r1, r2 = sp.solve(dt*u**2 + (1-dt)*u - u_1, u)  # find roots
        >>> r1
        (dt - sqrt(dt**2 + 4*dt*u_1 - 2*dt + 1) - 1)/(2*dt)
        >>> r2
        (dt + sqrt(dt**2 + 4*dt*u_1 - 2*dt + 1) - 1)/(2*dt)
        >>> print r1.series(dt, 0, 2)
        -1/dt + 1 - u_1 + dt*(u_1**2 - u_1) + O(dt**2)
        >>> print r2.series(dt, 0, 2)
        u_1 + dt*(-u_1**2 + u_1) + O(dt**2)

We see that the ``r1`` root, corresponding to
a minus sign in front of the square root in
:eq:`nonlin:timediscrete:logistic:eq:roots`,
behaves as :math:`1/\Delta t` and will therefore
blow up as :math:`\Delta t\rightarrow 0`! Therefore, only the ``r2`` root is of
relevance in this case.

Linearization
-------------

When the time integration of an ODE results in a nonlinear algebraic
equation, we must normally find its solution by defining a sequence
of linear equations and hope that the solutions of these linear equations
converge to the desired solution of the nonlinear algebraic equation.
Usually this means solving the linear equation repeatedly in an
iterative fashion.
Alternatively, the nonlinear equation can sometimes be approximated by one
linear equation, and consequently there is no need for iteration.

.. index:: linearization

Constructing a linear equation from a nonlinear one requires
*linearization* of each nonlinear term. This can be done manually
as in Picard iteration, or fully algorithmically as in Newton's method.
Examples will best illustrate how to linearize nonlinear problems.

.. _nonlin:timediscrete:logistic:Picard:

Picard iteration  (1)
---------------------

.. index:: Picard iteration

.. index:: successive substitutions

.. index:: fixed-point iteration

.. index::
   single: linearization; Picard iteration

.. index::
   single: linearization; successive substitutions

.. index::
   single: linearization; fixed-point iteration

Let us write :eq:`nonlin:timediscrete:logistic:eq:F` in a
more compact form

.. math::
         F(u) = au^2 + bu + c = 0,

with :math:`a=\Delta t`, :math:`b=1-\Delta t`, and :math:`c=-u^{(1)}`.
Let :math:`u^{-}` be an available approximation of the unknown :math:`u`.
Then we can linearize the term :math:`u^2` simply by writing
:math:`u^{-}u`. The resulting equation, :math:`\hat F(u)=0`, is now linear
and hence easy to solve:

.. math::
         F(u)\approx\hat F(u) = au^{-}u + bu + c = 0{\thinspace .}

Since the equation :math:`\hat F=0` is only approximate, the solution :math:`u`
does not equal the exact solution :math:`{u_{\small\mbox{e}}}` of the exact
equation :math:`F({u_{\small\mbox{e}}})=0`, but we can hope that :math:`u` is closer to
:math:`{u_{\small\mbox{e}}}` than :math:`u^{-}` is, and hence it makes sense to repeat the
procedure, i.e., set :math:`u^{-}=u` and solve :math:`\hat F(u)=0` again.

.. respect to :math:`u` again. Hopefully this iterative process leads

.. to a sequence of improved approximation that quickly converge to :math:`{u_{\small\mbox{e}}}`.

The idea of turning a nonlinear equation into a linear one by
using an approximation :math:`u^{-}` of :math:`u` in nonlinear terms is
a widely used approach that goes under many names:
*fixed-point iteration*, the method of *successive substitutions*,
*nonlinear Richardson iteration*, and *Picard iteration*.
We will stick to the latter name.

Picard iteration for solving the nonlinear equation
arising from the Backward Euler discretization of the logistic
equation can be written as

.. math::
         u = -\frac{c}{au^{-} + b},\quad u^{-}\ \leftarrow\ u{\thinspace .}

The iteration is started with the value of the unknown at the
previous time level: :math:`u^{-}=u^{(1)}`.

Some prefer an explicit iteration counter as superscript
in the mathematical notation. Let :math:`u^k` be the computed approximation
to the solution in iteration :math:`k`. In iteration :math:`k+1` we want
to solve

.. math::
         au^k u^{k+1} + bu^{k+1} + c = 0\quad\Rightarrow\quad u^{k+1}
        = -\frac{c}{au^k + b},\quad k=0,1,\ldots

Since we need to perform the iteration at every time level, the
time level counter is often also included:

.. math::
         au^{n,k} u^{n,k+1} + bu^{n,k+1} - u^{n-1} = 0\quad\Rightarrow\quad u^{n,k+1}
        = \frac{u^n}{au^{n,k} + b},\quad k=0,1,\ldots,

with the start value :math:`u^{n,0}=u^{n-1}` and the final converged value
:math:`u^{n}=u^{n,k}` for sufficiently large :math:`k`.

However, we will normally apply a mathematical notation in our
final formulas that is as close as possible to what we aim to write
in a computer code and then it becomes natural to use :math:`u` and :math:`u^{-}`
instead of :math:`u^{k+1}` and :math:`u^k` or :math:`u^{n,k+1}` and :math:`u^{n,k}`.

.. index:: stopping criteria (nonlinear problems)

Stopping criteria  (1)
~~~~~~~~~~~~~~~~~~~~~~

The iteration method can typically be terminated when the change
in the solution is smaller than a tolerance :math:`\epsilon_u`:

.. math::
         |u - u^{-}| \leq\epsilon_u,

or when the residual in the equation is sufficiently small (:math:`\epsilon_r`),

.. math::
         |F(u)|= |au^2+bu + c| < \epsilon_r{\thinspace .}

.. index:: single Picard iteration technique

A single Picard iteration
~~~~~~~~~~~~~~~~~~~~~~~~~

Instead of iterating until a stopping criterion is fulfilled, one may
iterate a specific number of times. Just one Picard iteration is
popular as this corresponds to the intuitive idea of approximating
a nonlinear term like :math:`(u^n)^2` by :math:`u^{n-1}u^n`. This follows
from the linearization :math:`u^{-}u^n` and the initial choice of
:math:`u^{-}=u^{n-1}` at time level :math:`t_n`. In other words, a single
Picard iteration corresponds to using the solution at
the previous time level to linearize
nonlinear terms. The resulting discretization
becomes

.. _Eq:nonlin:timediscrete:logistic:BE:Picard:1it:

.. math::
   :label: nonlin:timediscrete:logistic:BE:Picard:1it
        
        \frac{u^{n} - u^{n-1}}{\Delta t} = u^n(1 - u^{n-1}),
        
        

which is a linear algebraic equation in the unknown :math:`u^n`, and
therefore we can easily solve for :math:`u^n`, and there is no need
for any alternative notation.

We shall later refer to the strategy of taking one Picard step, or
equivalently, linearizing terms with use of the solution at the
previous time step, as the *Picard1* method. It is a widely used
approach in science and technology, but with some limitations if
:math:`\Delta t` is not sufficiently small (as will be illustrated later).


.. note::
   
   Equation :eq:`nonlin:timediscrete:logistic:BE:Picard:1it` does not
   correspond to a "pure" finite difference method where the equation
   is sampled at a point and derivatives replaced by differences (because
   the :math:`u^{n-1}` term on the right-hand side must then be :math:`u^n`). The
   best interpretation of the scheme
   :eq:`nonlin:timediscrete:logistic:BE:Picard:1it` is a Backward Euler
   difference combined with a single (perhaps insufficient) Picard
   iteration at each time level, with the value at the previous time
   level as start for the Picard iteration.




.. _nonlin:timediscrete:logistic:geometric:mean:

Linearization by a geometric mean
---------------------------------

We consider now a Crank-Nicolson discretization of
:eq:`nonlin:timediscrete:logistic:eq`. This means that the
time derivative is approximated by a centered
difference,

.. math::
         [D_t u = u(1-u)]^{n+\frac{1}{2}},

written out as

.. _Eq:nonlin:timediscrete:logistic:geometric:mean:scheme:

.. math::
   :label: nonlin:timediscrete:logistic:geometric:mean:scheme
        
        \frac{u^{n+1}-u^n}{\Delta t} = u^{n+\frac{1}{2}} -
        (u^{n+\frac{1}{2}})^2{\thinspace .}
        
        

The term :math:`u^{n+\frac{1}{2}}` is normally approximated by an arithmetic
mean,

.. math::
         u^{n+\frac{1}{2}}\approx \frac{1}{2}(u^n + u^{n+1}),

such that the scheme involves the unknown function only at the time levels
where we actually compute it.
The same arithmetic mean applied to the nonlinear term gives

.. math::
         (u^{n+\frac{1}{2}})^2\approx \frac{1}{4}(u^n + u^{n+1})^2,

which is nonlinear in the unknown :math:`u^{n+1}`.
However, using a *geometric mean* for :math:`(u^{n+\frac{1}{2}})^2`
is a way of linearizing the nonlinear term in
:eq:`nonlin:timediscrete:logistic:geometric:mean:scheme`:

.. math::
         (u^{n+\frac{1}{2}})^2\approx u^nu^{n+1}{\thinspace .}

Using an arithmetic mean on the linear :math:`u^{n+\frac{1}{2}}` term in
:eq:`nonlin:timediscrete:logistic:geometric:mean:scheme` and a geometric
mean for the second term, results in a linearized equation for the
unknown :math:`u^{n+1}`:

.. math::
         \frac{u^{n+1}-u^n}{\Delta t} =
        \frac{1}{2}(u^n + u^{n+1}) + u^nu^{n+1},

which can readily be solved:

.. math::
        
        u^{n+1} = \frac{1 + \frac{1}{2}\Delta t}{1+\Delta t u^n - \frac{1}{2}\Delta t}
        u^n{\thinspace .}

This scheme can be coded directly, and since
there is no nonlinear algebraic equation to iterate over,
we skip the simplified notation with :math:`u` for :math:`u^{n+1}`
and :math:`u^{(1)}` for :math:`u^n`. The technique with using
a geometric average is an example of transforming a nonlinear
algebraic equation to a linear one, without any need for iterations.

The geometric mean approximation is often very effective for
linearizing quadratic nonlinearities. Both the arithmetic and geometric mean
approximations have truncation errors of order :math:`\Delta t^2` and are
therefore compatible with the truncation error :math:`{\mathcal{O}(\Delta t^)}`
of the centered difference approximation for :math:`u^\prime` in the Crank-Nicolson
method.

Applying the operator notation for the means and finite differences,
the linearized Crank-Nicolson scheme for the logistic equation can be
compactly expressed as

.. math::
         [D_t u = \overline{u}^{t} + \overline{u^2}^{t,g}]^{n+\frac{1}{2}}{\thinspace .}


.. admonition:: Remark

   If we use an arithmetic instead of a geometric mean
   for the nonlinear term in
   :eq:`nonlin:timediscrete:logistic:geometric:mean:scheme`,
   we end up with a nonlinear term :math:`(u^{n+1})^2`.
   This term can be linearized as :math:`u^{-}u^{n+1}` in a Picard iteration
   approach and in particular as
   :math:`u^nu^{n+1}` in a Picard1 iteration approach.
   The latter gives a scheme almost identical to the one arising from
   a geometric mean (the difference in :math:`u^{n+1}`
   being :math:`\frac{1}{4}\Delta t u^n(u^{n+1}-u^n)\approx \frac{1}{4}\Delta t^2
   u^\prime u`, i.e., a difference of :math:`{\mathcal{O}(\Delta t^2)}`).




.. _nonlin:timediscrete:logistic:Newton:

Newton's method  (1)
--------------------

The Backward Euler scheme :eq:`nonlin:timediscrete:logistic:eq:BE`
for the logistic equation leads to a nonlinear algebraic equation
:eq:`nonlin:timediscrete:logistic:eq:F`. Now we write any nonlinear
algebraic equation in the general and compact form

.. math::
         F(u) = 0{\thinspace .}

Newton's method linearizes this equation by approximating :math:`F(u)` by
its Taylor series expansion around a computed value :math:`u^{-}`
and keeping only the linear part:

.. math::
        
        F(u) &= F(u^{-}) + F^{\prime}(u^{-})(u - u^{-}) + {\frac{1}{2}}F^{\prime\prime}(u^{-})(u-u^{-})^2
        +\cdots\\ 
        & \approx F(u^{-}) + F^{\prime}(u^{-})(u - u^{-}) = \hat F(u){\thinspace .}
        

The linear equation :math:`\hat F(u)=0` has the solution

.. math::
         u = u^{-} - \frac{F(u^{-})}{F^{\prime}(u^{-})}{\thinspace .}

Expressed with an iteration index in the unknown, Newton's method takes
on the more familiar mathematical form

.. math::
         u^{k+1} = u^k - \frac{F(u^k)}{F^{\prime}(u^k)},\quad k=0,1,\ldots

It can be shown that the error in iteration :math:`k+1` of Newton's method is
the square of the error in iteration :math:`k`, a result referred to as
*quadratic convergence*. This means that for
small errors the method converges very fast, and in particular much
faster than Picard iteration and other iteration methods.
(The proof of this result is found in most textbooks on numerical analysis.)
However, the quadratic convergence appears only if :math:`u^k` is sufficiently
close to the solution. Further away from the solution the method can
easily converge very slowly or diverge. The reader is encouraged to do
:ref:`nonlin:exer:Newton:problems1` to get a better understanding
for the behavior of the method.

Application of Newton's method to the logistic equation discretized
by the Backward Euler method is straightforward
as we have

.. math::
         F(u) = au^2 + bu + c,\quad a=\Delta t,\ b = 1-\Delta t,\ c=-u^{(1)},

and then

.. math::
         F^{\prime}(u) = 2au + b{\thinspace .}

The iteration method becomes

.. _Eq:nonlin:timediscrete:logistic:Newton:alg1:

.. math::
   :label: nonlin:timediscrete:logistic:Newton:alg1
        
        u = u^{-} + \frac{a(u^{-})^2 + bu^{-} + c}{2au^{-} + b},\quad
        u^{-}\ \leftarrow u{\thinspace .}
        
        

At each time level, we start the iteration by setting :math:`u^{-}=u^{(1)}`.
Stopping criteria as listed for the Picard iteration can be used also
for Newton's method.

An alternative mathematical form, where we write out :math:`a`, :math:`b`, and :math:`c`,
and use a time level counter :math:`n` and an iteration counter :math:`k`, takes
the form

.. _Eq:nonlin:timediscrete:logistic:Newton:alg2:

.. math::
   :label: nonlin:timediscrete:logistic:Newton:alg2
        
        u^{n,k+1} = u^{n,k} +
        \frac{\Delta t (u^{n,k})^2 + (1-\Delta t)u^{n,k} - u^{n-1}}
        {2\Delta t u^{n,k} + 1 - \Delta t},\quad u^{n,0}=u^{n-1},\quad k=0,1,\ldots
        
        

A program implementation is much closer to :eq:`nonlin:timediscrete:logistic:Newton:alg1` than to :eq:`nonlin:timediscrete:logistic:Newton:alg2`, but
the latter is better aligned with the established mathematical
notation used in the literature.

.. _nonlin:timediscrete:logistic:relaxation:

Relaxation
----------

.. index:: relaxation (nonlinear equations)

One iteration in Newton's method or
Picard iteration consists of solving a linear problem :math:`\hat F(u)=0`.
Sometimes convergence problems arise because the new solution :math:`u`
of :math:`\hat F(u)=0` is "too far away" from the previously computed
solution :math:`u^{-}`. A remedy is to introduce a relaxation, meaning that
we first solve :math:`\hat F(u^*)=0` for a suggested value :math:`u^*` and
then we take :math:`u` as a weighted mean of what we had, :math:`u^{-}`, and
what our linearized equation :math:`\hat F=0` suggests, :math:`u^*`:

.. math::
         u = \omega u^* + (1-\omega) u^{-}{\thinspace .}

The parameter :math:`\omega`
is known as a *relaxation parameter*, and a choice :math:`\omega < 1`
may prevent divergent iterations.

Relaxation in Newton's method can be directly incorporated
in the basic iteration formula:

.. _Eq:nonlin:timediscrete:logistic:relaxation:Newton:formula:

.. math::
   :label: nonlin:timediscrete:logistic:relaxation:Newton:formula
        
        u = u^{-} - \omega \frac{F(u^{-})}{F^{\prime}(u^{-})}{\thinspace .}
        
        

.. _nonlin:timediscrete:logistic:impl:

Implementation and experiments
------------------------------

The program `logistic.py <http://tinyurl.com/nm5587k/nonlin/logistic.py>`__ contains
implementations of all the methods described above.
Below is an extract of the file showing how the Picard and Newton
methods are implemented for a Backward Euler discretization of
the logistic equation.

.. @@@CODE src-nonlin/logistic.py fromto: def BE_logistic@def CN_logistic

.. code-block:: python

        def BE_logistic(u0, dt, Nt, choice='Picard',
                        eps_r=1E-3, omega=1, max_iter=1000):
            if choice == 'Picard1':
                choice = 'Picard'
                max_iter = 1
        
            u = np.zeros(Nt+1)
            iterations = []
            u[0] = u0
            for n in range(1, Nt+1):
                a = dt
                b = 1 - dt
                c = -u[n-1]
        
                if choice == 'Picard':
        
                    def F(u):
                        return a*u**2 + b*u + c
        
                    u_ = u[n-1]
                    k = 0
                    while abs(F(u_)) > eps_r and k < max_iter:
                        u_ = omega*(-c/(a*u_ + b)) + (1-omega)*u_
                        k += 1
                    u[n] = u_
                    iterations.append(k)
        
                elif choice == 'Newton':
        
                    def F(u):
                        return a*u**2 + b*u + c
        
                    def dF(u):
                        return 2*a*u + b
        
                    u_ = u[n-1]
                    k = 0
                    while abs(F(u_)) > eps_r and k < max_iter:
                        u_ = u_ - F(u_)/dF(u_)
                        k += 1
                    u[n] = u_
                    iterations.append(k)
            return u, iterations

The Crank-Nicolson method utilizing a linearization based on the
geometric mean gives a simpler algorithm:

.. code-block:: python

        def CN_logistic(u0, dt, Nt):
            u = np.zeros(Nt+1)
            u[0] = u0
            for n in range(0, Nt):
                u[n+1] = (1 + 0.5*dt)/(1 + dt*u[n] - 0.5*dt)*u[n]
            return u

We may run experiments with the model problem
:eq:`nonlin:timediscrete:logistic:eq` and the different strategies for
dealing with nonlinearities as described above. For a quite coarse
time resolution, :math:`\Delta t=0.9`, use of a tolerance :math:`\epsilon_r=0.1`
in the stopping criterion introduces an iteration error, especially in
the Picard iterations, that is visibly much larger than the
time discretization error due to a large :math:`\Delta t`. This is illustrated
by comparing the upper two plots in
Figure :ref:`nonlin:timediscrete:logistic:impl:fig:u`. The one to
the right has a stricter tolerance :math:`\epsilon = 10^{-3}`, which leads
to all the curves corresponding to Picard and Newton iteration to be
on top of each other (and no changes can be visually observed by
reducing :math:`\epsilon_r` further). The reason why Newton's method does
much better than Picard iteration in the upper left plot is that
Newton's method with one step comes far below the :math:`\epsilon_r` tolerance,
while the Picard iteration needs on average 7 iterations to bring the
residual down to :math:`\epsilon_r=10^{-1}`, which gives insufficient
accuracy in the solution of the nonlinear equation. It is obvious
that the Picard1 method gives significant errors in addition to
the time discretization unless the time step is as small as in
the lower right plot.

The *BE exact* curve corresponds to using the exact solution of the
quadratic equation at each time level, so this curve is only affected
by the Backward Euler time discretization.  The *CN gm* curve
corresponds to the theoretically more accurate Crank-Nicolson
discretization, combined with a geometric mean for linearization.
This curve appear as more accurate, especially if we take the plot in
the lower right with a small :math:`\Delta t` and an appropriately small
:math:`\epsilon_r` value as the exact curve.

When it comes to the need for iterations, Figure
:ref:`nonlin:timediscrete:logistic:impl:fig:iter` displays the number of
iterations required at each time level for Newton's method and
Picard iteration. The smaller :math:`\Delta t` is, the better starting value
we have for the iteration, and the faster the convergence is.
With :math:`\Delta t = 0.9` Picard iteration requires on average 32 iterations
per time step, but this number is dramatically reduced as :math:`\Delta t`
is reduced.

However, introducing relaxation and a parameter :math:`\omega=0.8`
immediately reduces the average of 32 to 7, indicating that for the large
:math:`\Delta t=0.9`, Picard iteration takes too long steps. An approximately optimal
value for :math:`\omega` in this case is 0.5, which results in an average of only
2 iterations! Even more dramatic impact of :math:`\omega` appears when
:math:`\Delta t = 1`: Picard iteration does not convergence in 1000 iterations,
but :math:`\omega=0.5` again brings the average number of iterations down to 2.

.. _nonlin:timediscrete:logistic:impl:fig:u:

.. figure:: logistic_u.png
   :width: 800

   *The impact of solution strategies and for four different time step lengths on the solution*

.. _nonlin:timediscrete:logistic:impl:fig:iter:

.. figure:: logistic_iter.png
   :width: 800

   *Comparison of the number of iterations at various time levels for Picard and Newton iteration*

**Remark.**
The simple Crank-Nicolson method with a geometric mean for the quadratic
nonlinearity gives visually more accurate solutions than the
Backward Euler discretization. Even with a tolerance of :math:`\epsilon_r=10^{-3}`,
all the methods for treating the nonlinearities in the Backward Euler
discretization gives graphs that cannot be distinguished. So for
accuracy in this problem, the time discretization is much more crucial
than :math:`\epsilon_r`. Ideally, one should estimate the error in the
time discretization, as the solution progresses, and set :math:`\epsilon_r`
accordingly.

.. _nonlin:ode:generic:

Generalization to a general nonlinear ODE
-----------------------------------------

Let us see how the various methods in the previous sections
can be applied to the more generic model

.. _Eq:nonlin:ode:generic:model:

.. math::
   :label: nonlin:ode:generic:model
        
        u^{\prime} = f(u, t),
        
        

where :math:`f` is a nonlinear function of :math:`u`.

Explicit time discretization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Explicit ODE methods like the Forward Euler scheme, Runge-Kutta methods,
Adams-Bashforth methods all evaluate :math:`f` at time levels where
:math:`u` is already computed, so nonlinearities in :math:`f` do not
pose any difficulties.

Backward Euler discretization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Approximating :math:`u^{\prime}` by a backward difference leads to a Backward Euler
scheme, which can be written as

.. math::
         F(u^n) = u^{n} - \Delta t\, f(u^n, t_n) - u^{n-1}=0,

or alternatively

.. math::
         F(u) = u - \Delta t\, f(u, t_n) - u^{(1)} = 0{\thinspace .}

A simple Picard iteration, not knowing anything about the nonlinear
structure of :math:`f`, must approximate :math:`f(u,t_n)` by :math:`f(u^{-},t_n)`:

.. math::
         \hat F(u) = u - \Delta t\, f(u^{-},t_n) - u^{(1)}{\thinspace .}

The iteration starts with :math:`u^{-}=u^{(1)}` and proceeds with repeating

.. math::
         u^* = \Delta t\, f(u^{-},t_n) + u^{(1)},\quad u = \omega u^* + (1-\omega)u^{-},
        \quad u^{-}\ \leftarrow\ u,

until a stopping criterion is fulfilled.


.. admonition:: Explicit vs implicit treatment of nonlinear terms

   Evaluating :math:`f` for a known :math:`u^{-}` is referred to as *explicit* treatment of
   :math:`f`, while if :math:`f(u,t)` has some structure, say :math:`f(u,t) = u^3`, parts of
   :math:`f` can involve the known :math:`u`, as in the manual linearization
   like :math:`(u^{-})^2u`, and then the treatment of :math:`f` is "more implicit"
   and "less explicit". This terminology is inspired by time discretization
   of :math:`u^{\prime}=f(u,t)`, where evaluating :math:`f` for known :math:`u` values gives
   explicit schemes, while treating :math:`f` or parts of :math:`f` implicitly,
   makes :math:`f` contribute to the unknown terms in the equation at the new
   time level.
   
   Explicit treatment of :math:`f` usually means stricter conditions on
   :math:`\Delta t` for stability of time discretization schemes. The same goes
   for iterations techniques for nonlinear algebraic equations: the more
   :math:`f` can involve unknowns to be solved for, the faster the convergence
   may be.
   
   We may say that :math:`f(u,t)=u^3` is treated explicitly if we evaluate :math:`f`
   as :math:`(u^{-})^3`, partially implicit if we linearize as :math:`(u^{-})^2u`
   and fully implicit if we represent :math:`f` by :math:`u^3`. (Of course, the
   fully implicit representation will require further linearization,
   but with :math:`f(u,t)=u^2` a fully implicit treatment is possible if
   the resulting quadratic equation is solved with a formula.)
   
   For the ODE :math:`u^{\prime}=-u^3` with :math:`f(u,t)=-u^3` and coarse
   time resolution :math:`\Delta t = 0.4`, Picard iteration with :math:`(u^{-})^2u`
   requires 8 iterations with :math:`\epsilon_r = 10^{-3}` for the first
   time step, while :math:`(u^{-})^3` leads to 22 iterations. After about 10
   time steps both approaches are down to about 2 iterations per time
   step, but this example shows a potential of treating :math:`f` more
   implicitly.
   
   A trick to treat :math:`f` implicitly in Picard iteration is to
   evaluate it as :math:`f(u^{-},t)u/u^{-}`. For a polynomial :math:`f`, :math:`f(u,t)=u^m`,
   this corresponds to :math:`(u^{-})^{m-1}u`. Sometimes this more implicit
   treatment has no effect, as with :math:`f(u,t)=exp(-u)` and :math:`f(u,t)=\ln (1+u)`,
   but with :math:`f(u,t)=sin(2(u+1))`, the :math:`f(u^{-},t)u/u^{-}` trick
   leads to 7, 9, and 11 iterations during the first three steps, while
   :math:`f(u^{-},t)` demands 17, 21, and 20 iterations.
   (Experiments can be done with the code `ODE_Picard_tricks.py <http://tinyurl.com/nm5587k/nonlin/ODE_Picard_tricks.py>`__.)




Newton's method applied to :math:`u^{\prime}=f(u,t)`
requires the computation of the derivative

.. math::
         F^{\prime}(u) = 1 - \Delta t\frac{\partial f}{\partial u}(u,t_n){\thinspace .}

Starting with the solution at the previous time level, :math:`u^{-}=u^{(1)}`,
we can just use the standard formula

.. _Eq:nonlin:ode:generic:Newton:

.. math::
   :label: nonlin:ode:generic:Newton
        
        u = u^{-} - \omega \frac{F(u^{-})}{F^{\prime}(u^{-})}
        = u^{-} - \omega \frac{u^{(1)} + \Delta t f(u^{-},t_{n})}{1 - \Delta t
        \frac{\partial}{\partial u}f(u^{-},t_n)}
        {\thinspace .}
        
        

.. The geometric mean trick cannot be used unless we know that :math:`f` has

.. a special structure with quadratic expressions in :math:`u`.

Crank-Nicolson discretization  (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The standard Crank-Nicolson scheme with arithmetic mean approximation of
:math:`f` takes the form

.. math::
         \frac{u^{n+1} - u^n}{\Delta t} = \frac{1}{2}(f(u^{n+1}, t_{n+1})
        + f(u^n, t_n)){\thinspace .}

We can write the scheme as a nonlinear algebraic equation

.. _Eq:nonlin:ode:generic:Newton2:

.. math::
   :label: nonlin:ode:generic:Newton2
        
        F(u) = u - u^{(1)} - \Delta t{\frac{1}{2}}f(u,t_{n+1}) -
        \Delta t{\frac{1}{2}}f(u^{(1)},t_{n}) = 0{\thinspace .}
        
        

A Picard iteration scheme must in general employ the linearization

.. math::
         \hat F(u) = u - u^{(1)} - \Delta t{\frac{1}{2}}f(u^{-},t_{n+1}) -
        \Delta t{\frac{1}{2}}f(u^{(1)},t_{n}),

while Newton's method can apply the general formula
:eq:`nonlin:ode:generic:Newton` with :math:`F(u)` given in
:eq:`nonlin:ode:generic:Newton2` and

.. math::
         F^{\prime}(u)= 1 - \frac{1}{2}\Delta t\frac{\partial f}{\partial u}(u,t_{n+1}){\thinspace .}

.. What about pendulum sin(u) as u/u_ sin(u_)? Check in odespy if it

.. converges faster (should be able to store the no of Newton and

.. Picard iterations in the classes and poll afterwards). It the trick

.. pays off, describe it here. Can odespy be used here? That is, can we

.. provide the linearization? No...?

.. _nonlin:ode:generic:sys:pendulum:

Systems of ODEs
---------------

We may write a system of ODEs

.. math::
        
        \frac{d}{dt}u_0(t) &= f_0(u_0(t),u_1(t),\ldots,u_N(t),t),\\ 
        \frac{d}{dt}u_1(t) &= f_1(u_0(t),u_1(t),\ldots,u_N(t),t),\\ 
        &\vdots\\ 
        \frac{d}{dt}u_m(t) &= f_m(u_0(t),u_1(t),\ldots,u_N(t),t),
        

as

.. math::
        
        u^{\prime} = f(u,t),\quad u(0)=U_0,
        

if we interpret :math:`u` as a vector :math:`u=(u_0(t),u_1(t),\ldots,u_N(t))`
and :math:`f` as a vector function with components
:math:`(f_0(u,t),f_1(u,t),\ldots,f_N(u,t))`.

Solution methods for scalar ODEs normally generalize in a
straightforward way to systems of ODEs simply by using vector
arithmetics instead of scalar arithmetics, which corresponds to
applying the scalar scheme to each component of the system.  For
example, here is a backward difference scheme applied to each
component,

.. math::
        
        \frac{u_0^n- u_0^{n-1}}{\Delta t} &= f_0(u^n,t_n),\\ 
        \frac{u_1^n- u_1^{n-1}}{\Delta t} &= f_1(u^n,t_n),\\ 
        &\vdots\\ 
        \frac{u_N^n- u_N^{n-1}}{\Delta t} &= f_N(u^n,t_n),
        

which can be written more compactly in vector form as

.. math::
         \frac{u^n- u^{n-1}}{\Delta t} = f(u^n,t_n){\thinspace .}

This is a *system of algebraic equations*,

.. math::
         u^n - \Delta t\,f(u^n,t_n) - u^{n-1}=0,

or written out

.. math::
        
        u_0^n - \Delta t\, f_0(u^n,t_n) - u_0^{n-1} &= 0,\\ 
        &\vdots\\ 
        u_N^n - \Delta t\, f_N(u^n,t_n) - u_N^{n-1} &= 0{\thinspace .}
        

As specific example, a :math:`2\times 2` system for the oscillations of a pendulum
subject to gravity and air drag reads

.. math::
        
        \dot\omega = -\sin\theta -\beta \omega |\omega|,
        

.. math::
          
        \dot\theta = \omega,
        

where :math:`\beta` is a dimensionless parameter (this is the scaled, dimensionless
version of the original, physical model). The unknown components of the
system are the
angle :math:`\theta(t)` and the angular velocity :math:`\omega(t)`.
We introduce :math:`u_0=\omega` and :math:`u_1=\theta`, which leads to

.. math::
        
        u_0^{\prime} = f_0(u,t) &= -\sin u_1 - \beta u_0|u_0|,\\ 
        u_1^{\prime} = f_1(u,t) &= u_0{\thinspace .}
        

A Crank-Nicolson scheme reads

.. math::
        
        \frac{u_0^{n+1}-u_0^{n}}{\Delta t} = -\sin u_1^{n+\frac{1}{2}}
        - \beta u_0^{n+\frac{1}{2}}|u_0^{n+\frac{1}{2}}|\nonumber
        

.. math::
          
         \approx -\sin\left(\frac{1}{2}(u_1^{n+1} + u_1n)\right)
        - \beta\frac{1}{4} (u_0^{n+1} + u_0^n)|u_0^{n+1}+u_0^n|,
        

.. math::
          
        \frac{u_1^{n+1}-u_1^n}{\Delta t} = v_0^{n+\frac{1}{2}}\approx
        \frac{1}{2} (u_0^{n+1}+u_0^n){\thinspace .}
        

This is a *coupled system* of two nonlinear algebraic equations
in two unknowns :math:`u_0^{n+1}` and :math:`u_1^{n+1}`.

Using the notation :math:`u_0` and :math:`u_1` for the unknowns :math:`u_0^{n+1}` and
:math:`u_1^{n+1}` in this system, writing :math:`u_0^{(1)}` and
:math:`u_1^{(1)}` for the previous values :math:`u_0^n` and :math:`u_1^n`, multiplying
by :math:`\Delta t` and moving the terms to the left-hand sides, gives

.. _Eq:nonlin:ode:generic:sys:pendulum:u0:

.. math::
   :label: nonlin:ode:generic:sys:pendulum:u0
        
        u_0 - u_0^{(1)} + \Delta t\,\sin\left(\frac{1}{2}(u_1 + u_1^{(1)})\right)
        + \frac{1}{4}\Delta t\beta (u_0 + u_0^{(1)})|u_0 + u_0^{(1)}| =0,
        
        
        

.. _Eq:nonlin:ode:generic:sys:pendulum:u1:

.. math::
   :label: nonlin:ode:generic:sys:pendulum:u1
          
        u_1 - u_1^{(1)} -\frac{1}{2}\Delta t(u_0 + u_0^{(1)}) =0{\thinspace .}
        
        

Obviously, we have a need for solving systems of nonlinear algebraic
equations, which is the topic of the next section.

