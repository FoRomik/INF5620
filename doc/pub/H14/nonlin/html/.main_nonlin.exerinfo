
# Information about all exercises in the file main_nonlin.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.main_nonlin.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'closing_remarks': '',
  'file': ['nonlinear_vs_linear.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:lin:vs:nonlin',
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Classify each term in the following equations as linear or nonlinear.\nAssume that $u$ is an unknown function and that\nall other symbols are known quantities.\n\n o $b^2 = 1$\n o $a+b=1$\n o $mu^{\\prime\\prime} + \\beta |u^{\\prime}|u^{\\prime} + cu = F(t)$\n o $u_t = \\dfc u_{xx}$\n o $u_{tt} = c^2\\nabla^2 u$\n o $u_t = \\nabla\\cdot(\\dfc(u)\\nabla u) + f(x,y)$\n o $u_t + f(u)_x = 0$\n o $\\u_t + \\u\\cdot\\nabla \\u = -\\nabla p + r\\nabla^2\\u$, $\\nabla\\cdot\\u = 0$\n   ($\\u$ is a vector field)\n o $u^{\\prime} = f(u,t)$\n o $\\nabla^2 u = \\lambda e^u$',
  'title': 'Determine if equations are nonlinear or not',
  'type': 'Problem',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:Newton:problems1',
  'no': 2,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'The program "`Newton_demo.py`": "http://tinyurl.com/nm5587k/nonlin/Newton_demo.py" illustrates\ngraphically each step in Newton\'s method and is run like\n\n!bc sys\nTerminal> python Newton_demo.py f dfdx x0 xmin xmax\n\n!ec\nUse this program to investigate potential\nproblems with Newton\'s method when solving $e^{-0.5x^2}\\cos (\\pi x)=0$.\nTry a starting point $x_0=0.8$ and $x_0=0.85$ and watch the different\nbehavior. Just run\n\n!bc sys\nTerminal>  python Newton_demo.py \'0.2 + exp(-0.5*x**2)*cos(pi*x)\' \\ \n           \'-x*exp(-x**2)*cos(pi*x) - pi*exp(-x**2)*sin(pi*x)\' \\ \n           0.85 -3 3\n\n!ec\nand repeat with 0.85 replaced by 0.8.',
  'title': "Experience the behavior of Newton's method",
  'type': 'Problem',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:vib:Jacobian',
  'no': 3,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Write up the system (ref{nonlin:ode:generic:sys:pendulum:u0})-(ref{nonlin:ode:generic:sys:pendulum:u1}) in the form $F(u)=0$, $F=(F_0,F_1)$, $u=(u_0,u_1)$,\nand compute the Jacobian $J_{i,j}=\\partial F_i/\\partial u_j$.',
  'title': 'Compute the Jacobian of a $2\\times 2$ system',
  'type': 'Problem',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_vib.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:vib:geometric:mean',
  'no': 4,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Rewrite the equation for $u$ as a system of two first-order ODEs, and\ndiscretize this system by a Crank-Nicolson (centered difference)\nmethod. With $v=u^\\prime$, we get a nonlinear term\n$v^{n+\\frac{1}{2}}|v^{n+\\frac{1}{2}}|$. Use a geometric\naverage for $v^{n+\\frac{1}{2}}$.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Formulate a Picard iteration method to solve the system of nonlinear\nalgebraic equations.'},
            {'aftertext': "\n# 2DO: b) Newmark scheme\n# derive it logically and connect it to the centered diff scheme\n# ma + bv|v| + s(u) = F(t), v'=a, u'=v (staggered is natural,\n# v at n+1/2 and a and u at n). Should be in vib first\n",
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Explain how to apply Newton's method to solve the nonlinear equations\nat each time level. Derive expressions for the Jacobian and the\nright-hand side in each Newton iteration."}],
  'text': "Consider a nonlinear vibration problem\n\n!bt\n\\begin{equation}\nmu^{\\prime\\prime} + bu^{\\prime}|u^{\\prime}| + s(u) = F(t),\n\\end{equation}\n\n!et\nwhere $m>0$ is a constant, $b\\geq 0$ is a constant, $s(u)$ a possibly\nnonlinear function of $u$, and $F(t)$ is a prescribed function. Such\nmodels arise from Newton's second law of motion in mechanical\nvibration problems where $s(u)$ is a spring or restoring force,\n$mu^{\\prime\\prime}$ is mass times acceleration, and\n$bu^{\\prime}|u^{\\prime}|$ models water or air drag.",
  'title': 'Solve nonlinear equations arising from a vibration ODE',
  'type': 'Problem',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['product_arith_mean.py'],
  'heading': '=====',
  'hints': ['You may explore `sympy` for carrying out the tedious calculations.\nA general Taylor series expansion of $P(t+\\frac{1}{2}\\Delta t)$ around $t$\ninvolving just a general function $P(t)$ can be\ncreated as follows:\n\n5 <<<!!CODE_BLOCK  pyshell\nThe error of the arithmetic mean, $\\frac{1}{2}(P(-\\frac{1}{2}\\Delta t)\n+ P(-\\frac{1}{2}\\Delta t))$ for $t=0$ is then\n\n6 <<<!!CODE_BLOCK  pyshell\nUse these examples to investigate the error of\n(ref{nonlin:exer:products:arith:mean:f}) and\n(ref{nonlin:exer:products:arith:mean:p}) for $n=0$. (Choosing $n=0$\nis necessary for making the expressions too complicated for `sympy`,\nbut there is of course no lack of generality by using $n=0$ rather\nthan an arbitrary $n$ - the main point is the product and addition\nof Taylor series.)'],
  'keywords': None,
  'label': 'nonlin:exer:products:arith:mean',
  'no': 5,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'In Section ref{nonlin:pdelevel:Picard:CN} we introduce alternative\narithmetic means of a product. Say the product is $P(t)Q(t)$ evaluated\nat $t=t_{n+\\frac{1}{2}}$. The exact value is\n\n!bt\n\\[ [PQ]^{n+\\frac{1}{2}} = P^{n+\\frac{1}{2}}Q^{n+\\frac{1}{2}} \\]\n\n!et\nThere are two obvious candidates for evaluating $[PQ]^{n+\\frac{1}{2}}$\nas a mean of values of $P$ and $Q$ at $t_n$ and $t_{n+1}$. Either\nwe can take the arithmetic mean of each factor $P$ and $Q$,\n\n!bt\n\\begin{equation}\n[PQ]^{n+\\frac{1}{2}} \\approx \\frac{1}{2}(P^n + P^{n+1})\\frac{1}{2}(Q^n + Q^{n+1}),\nlabel{nonlin:exer:products:arith:mean:f}\n\\end{equation}\n\n!et\nor we can take the arithmetic mean of the product $PQ$:\n\n!bt\n\\begin{equation}\n[PQ]^{n+\\frac{1}{2}} \\approx \\frac{1}{2}(P^nQ^n + P^{n+1}Q^{n+1})\\tp\nlabel{nonlin:exer:products:arith:mean:p}\n\\end{equation}\n\n!et\n\nThe arithmetic average\nof $P(t_{n+\\frac{1}{2}})$ is $\\Oof{\\Delta t^2}$:\n\n!bt\n\\[ P(t_{n+\\frac{1}{2}}) = \\frac{1}{2}(P^n + P^{n+1}) +\\Oof{\\Delta t^2}\\tp\\]\n\n!et\nA fundamental question is whether (ref{nonlin:exer:products:arith:mean:f})\nand (ref{nonlin:exer:products:arith:mean:p}) have different\norders of accuracy in $\\Delta t = t_{n+1}-t_n$. To investigate\nthis question, expand quantities at $t_{n+1}$ and $t_n$ in\nTaylor series around $t_{n+\\frac{1}{2}}$, and subtract the true\nvalue $[PQ]^{n+\\frac{1}{2}}$ from the approximations\n(ref{nonlin:exer:products:arith:mean:f}) and\n(ref{nonlin:exer:products:arith:mean:p}) to see what the\norder of the error terms are.',
  'title': 'Find the truncation error of arithmetic mean of products',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['Newton_linear.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:Newton:linear',
  'no': 6,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Suppose we have a linear system $F(u) = Au- b=0$. Apply Newton's method\nto this system, and show that the method converges in one iteration.",
  'title': "Newton's method for linear problems",
  'type': 'Problem',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_1D_coeff_discretize.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:1D:1pu2:fem',
  'no': 7,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Discretize (ref{nonlin:exer:1D:1pu2:fem:pde}) by a centered\nfinite difference method on a uniform mesh.'},
            {'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Discretize (ref{nonlin:exer:1D:1pu2:fem:pde}) by a finite\nelement method with P1 of equal length.\nUse the Trapezoidal method to compute all integrals.\nSet up the resulting matrix system in symbolic form such that the\nequations can be compared with those in a).'}],
  'text': 'We consider the problem\n\n!bt\n\\begin{equation}\n((1 + u^2)u^{\\prime})^{\\prime} = 1,\\quad x\\in (0,1),\\quad u(0)=u(1)=0\\tp\nlabel{nonlin:exer:1D:1pu2:fem:pde}\n\\end{equation}\n\n!et',
  'title': 'Discretize a 1D problem with a nonlinear coefficient',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_1D_coeff_linearize.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:1D:1pu2:PicardNewton',
  'no': 8,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Construct a Picard iteration method for (ref{nonlin:exer:1D:1pu2:PicardNewton:pde})\nwithout discretizing in space.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Apply Newton's method to (ref{nonlin:exer:1D:1pu2:PicardNewton:pde})\nwithout discretizing in space."},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Discretize (ref{nonlin:exer:1D:1pu2:PicardNewton:pde}) by a centered finite\ndifference scheme. Construct a Picard method for the resulting\nsystem of nonlinear algebraic equations.'},
            {'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Discretize (ref{nonlin:exer:1D:1pu2:PicardNewton:pde}) by a centered finite\ndifference scheme. Define the system of nonlinear algebraic equations,\ncalculate the Jacobian, and set up Newton's method for solving the system."}],
  'text': 'We have a two-point boundary value problem\n\n!bt\n\\begin{equation}\n((1 + u^2)u^{\\prime})^{\\prime} = 1,\\quad x\\in (0,1),\\quad u(0)=u(1)=0\\tp\nlabel{nonlin:exer:1D:1pu2:PicardNewton:pde}\n\\end{equation}\n\n!et',
  'title': 'Linearize a 1D problem with a nonlinear coefficient',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_1D_Bratu_fd.pdf', 'nonlin_1D_Bratu_fd.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:1D:fu:discretize:fd',
  'no': 9,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Discretize (ref{nonlin:exer:1D:fu:discretize:fd:pde}) by a\ncentered finite difference method.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Set up the nonlinear equations $F_i(u_0,u_1,\\ldots,u_{N_x})=0$\nfrom a). Calculate the associated Jacobian.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Implement a solver that can compute $u(x)$ using Newton's method.\nPlot the error as a function of $x$ in each iteration."},
            {'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Investigate whether Newton's method gives second-order convergence\nby computing\n$|| \\uex - u||/||\\uex - u^{-}||^2$\nin each iteration, where $u$ is solution in the current iteration and\n$u^{-}$ is the solution in the previous iteration."}],
  'text': 'We address the so-called Bratu problem\n\n!bt\n\\begin{equation}\nu^{\\prime\\prime} + \\lambda e^u=0,\\quad x\\in (0,1),\\quad u(0)=u(1)=0,\nlabel{nonlin:exer:1D:fu:discretize:fd:pde}\n\\end{equation}\n\n!et\nwhere $\\lambda$ is a given parameter and $u$ is a function of $x$.\nThis is a widely used model problem for studying numerical\nmethods for nonlinear differential equations.\nThe problem (ref{nonlin:exer:1D:fu:discretize:fd:pde}) has an\nexact solution\n\n!bt\n\\[ \\uex(x) = -2\\ln\\left(\\frac{\\cosh((x-\\half)\\theta/2)}{\\cosh(\\theta/4)}\\right),\\]\n\n!et\nwhere $\\theta$ solves\n\n!bt\n\\[ \\theta = \\sqrt{2\\lambda}\\cosh(\\theta/4)\\tp\\]\n\n!et\nThere are two solutions of (ref{nonlin:exer:1D:fu:discretize:fd:pde}) for\n$0<\\lambda <\\lambda_c$ and no solution for $\\lambda >\\lambda_c$.\nFor $\\lambda = \\lambda_c$ there is one unique solution. The critical\nvalue $\\lambda_c$ solves\n\n!bt\n\\[ 1 = \\sqrt{2\\lambda_c}\\frac{1}{4}\\sinh(\\theta(\\lambda_c)/4)\\tp\\]\n\n!et\nA numerical value is $\\lambda_c = 3.513830719$.',
  'title': 'Finite differences for the 1D Bratu problem',
  'type': 'Problem',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['fu_fem_int.py'],
  'heading': '=====',
  'hints': ['Introduce symbols `u_i`, `u_im1`, and `u_ip1` for $u_i$, $u_{i-1}$,\nand $u_{i+1}$, respectively, and similar symbols for $x_i$, $x_{i-1}$,\nand $x_{i+1}$. Find formulas for the basis functions on each of the\ntwo cells, make expressions for $u$ on the two cells, integrate over\neach cell, expand the answer and simplify. You can ask `sympy` for\nLaTeX code and render it either by creating a LaTeX document and\ncompiling it to a PDF document or by using\nURL: "http://latex.codecogs.com" to display LaTeX formulas in a web\npage. Here are some appropriate Python statements\nfor the latter purpose:\n\n7 <<<!!CODE_BLOCK  pycod\nThe formula is displayed by loading `tmp.html` into a web browser.'],
  'keywords': None,
  'label': 'nonlin:exer:fu:fem:int',
  'no': 10,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'idx{`latex.codecogs.com` web site}\nidx{online rendering of LaTeX formulas}\n\nWe shall investigate integrals on the form\n\n!bt\n\\begin{equation}\n\\int_0^L f(\\sum_ku_k\\basphi_k(x))\\basphi_i(x)\\dx,\nlabel{nonlin:exer:fu:fem:int:global}\n\\end{equation}\n\n!et\nwhere $\\basphi_i(x)$ are P1 finite element basis functions and $u_k$\nare unknown coefficients, more precisely the values of the unknown\nfunction $u$ at nodes $\\xno{k}$. We introduce a node numbering that\ngoes from left to right and also that all cells have\nthe same length $h$. Given $i$, the integral\nonly gets contributions from $[\\xno{i-1},\\xno{i+1}]$. On this\ninterval $\\basphi_k(x)=0$ for $k<i-1$ and $k>i+1$, so only three\nbasis functions will contribute:\n\n!bt\n\\[\n\\sum_k u_k\\basphi_k(x) = u_{i-1}\\basphi_{i-1}(x) +\nu_{i}\\basphi_{i}(x) + u_{i+1}\\basphi_{i+1}(x)\\tp\n\\]\n\n!et\nThe integral (ref{nonlin:exer:fu:fem:int:global}) now takes the\nsimplified form\n\n!bt\n\\[\n\\int_{\\xno{i-1}}^{\\xno{i+1}}\nf(u_{i-1}\\basphi_{i-1}(x) +\nu_{i}\\basphi_{i}(x) + u_{i+1}\\basphi_{i+1}(x))\\basphi_i(x)\\dx\\tp\n\\]\n\n!et\nSplit this integral in two integrals over cell L (left),\n$[\\xno{i-1},\\xno{i}]$, and cell R (right), $[\\xno{i},\\xno{i+1}]$. Over\ncell L, $u$ simplifies to $u_{i-1}\\basphi_{i-1} + u_{i}\\basphi_{i}$\n(since $\\basphi_{i+1}=0$ on this cell), and over cell R, $u$\nsimplifies to $u_{i}\\basphi_{i} + u_{i+1}\\basphi_{i+1}$.  Make a\n`sympy` program that can compute the integral and write it out as a\ndifference equation. Give the $f(u)$ formula on the command line.\nTry out $f(u)=u^2, \\sin u, \\exp u$.',
  'title': 'Integrate functions of finite element expansions',
  'type': 'Problem',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_1D_Bratu_fe.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:1D:fu:discretize:fe',
  'no': 11,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Discretize (ref{nonlin:exer:1D:fu:discretize:fe}) by a finite element\nmethod using a uniform mesh with P1 elements. Use a group\nfinite element method for the $e^u$ term.'},
            {'aftertext': '\n',
             'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Set up the nonlinear equations $F_i(u_0,u_1,\\ldots,u_{N_x})=0$\nfrom a). Calculate the associated Jacobian.'}],
  'text': 'We address the same 1D Bratu problem as described in\nProblem ref{nonlin:exer:1D:fu:discretize:fd}.',
  'title': 'Finite elements for the 1D Bratu problem',
  'type': 'Problem',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_1D_heat_FD.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:1D:heat:nonlinear:fdm',
  'no': 12,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Discretize this PDE in time using either a\nBackward Euler or Crank-Nicolson scheme.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Formulate a Picard iteration method for the time-discrete problem\n(i.e., an iteration method before discretizing in space).'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Formulate a Newton method for the time-discrete problem in b).'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Discretize the PDE by a finite difference method in space.\nDerive the matrix and right-hand side of a Picard iteration method applied\nto the space-time discretized PDE.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Derive the matrix and right-hand side of a Newton method applied\nto the discretized PDE in d).'}],
  'text': 'We address the 1D heat conduction PDE\n\n!bt\n\\[ \\varrho c(T) T_t = (k(T)T_x)_x,\\]\n\n!et\nfor $x\\in [0,L]$,\nwhere $\\varrho$ is the density of the solid material, $c(T)$ is\nthe heat capacity, $T$ is the temperature, and $k(T)$ is the\nheat conduction coefficient. $T(x,0)=I(x)$, and ends are\nsubject to a cooling law:\n\n!bt\n\\[ k(T)T_x|_{x=0} = h(T)(T-T_s),\\quad -k(T)T_x|_{x=L}=h(T)(T-T_s),\\]\n\n!et\nwhere $h(T)$ is a heat transfer coefficient and $T_s$ is the\ngiven surrounding temperature.',
  'title': 'Discretize a nonlinear 1D heat conduction PDE by finite differences',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_heat_FE_usymbols.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:dD:nonlinear:usymbols',
  'no': 13,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'The symbol $u$ has several meanings, depending on the context, as\nbriefly mentioned in Section ref{nonlin:alglevel:dD:fe}.\nGo through the derivation of the Picard iteration method in\nthat section and use different symbols for all the different\napproximations of $u$:\n\n * $\\uex(\\x,t)$ for the exact solution of the PDE problem\n * $\\uex(\\x)^n$ for the exact solution after time discretization\n * $u^n(\\x)$ for the spatially discrete solution $\\sum_jc_j\\baspsi_j$\n * $u^{n,k}$ for approximation in Picard/Newton iteration no $k$\n   to $u^n(\\x)$',
  'title': 'Use different symbols for different approximations of the solution',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_heat_FE.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:dD:heat:nonlinear:c:a',
  'no': 14,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Use a Backward Euler or Crank-Nicolson time discretization and\nderive the variational form for the spatial problem to be solved\nat each time level.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Define a Picard iteration method from the variational form at\na time level.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Derive expressions for the matrix and the right-hand side of the\nequation system that arises from applying Newton's method to\nthe variational form at a time level."},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Apply the Backward Euler or Crank-Nicolson scheme in time first.\nDerive a Newton method at the PDE level. Make a variational\nform of the resulting PDE at a time level.'}],
  'text': 'We study the multi-dimensional heat conduction PDE\n\n!bt\n\\[ \\varrho c(T) T_t = \\nabla\\cdot (k(T)\\nabla T)\\]\n\n!et\nin a spatial domain $\\Omega$, with a nonlinear Robin boundary condition\n\n!bt\n\\[ -k(T)\\frac{\\partial T}{\\partial n} = h(T)(T-T_s(t)),\\]\n\n!et\nat the boundary $\\partial\\Omega$.\nThe primary unknown is the temperature $T$, $\\varrho$ is the density\nof the solid material, $c(T)$ is the heat capacity, $k(T)$ is\nthe heat conduction, $h(T)$ is a heat transfer coefficient, and\n$T_s(T)$ is a possibly time-dependent temperature of the surroundings.',
  'title': 'Derive Picard and Newton systems from a variational form',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_1D_heat_FE.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:1D:heat:nonlinear:c:a',
  'no': 15,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'We consider the same problem as in Exercise ref{nonlin:exer:dD:heat:nonlinear:c:a}, but restricted to one space dimension: $\\Omega = [0,L]$.\nSimplify the boundary condition to $T_x=0$ (i.e., $h(T)=0$).\nUse a uniform finite element mesh of P1 elements, the group\nfinite element method, and the Trapezoidal\nrule for integration at the nodes to derive symbolic expressions for\nthe algebraic equations arising from this diffusion problem.',
  'title': 'Derive algebraic equations for nonlinear 1D heat conduction',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_differentiate.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:grad:pow:term',
  'no': 16,
  'solution': '!bt\n\\begin{align*}\n\\frac{\\partial }{\\partial c_j}|\\nabla u |^q &=\n\\frac{\\partial }{\\partial c_j}(\\nabla u\\cdot \\nabla u )^{\\tfrac{q}{2}}\n= \\frac{q}{2} (\\nabla u\\cdot \\nabla u )^{\\tfrac{q}{2}-1}\n\\frac{\\partial }{\\partial c_j}(\\nabla u\\cdot \\nabla u )\\\\ \n&=\\frac{q}{2} |\\nabla u |^{q-2}(\\frac{\\partial }{\\partial c_j}(\\nabla u)\n\\cdot \\nabla u + \\nabla u \\cdot\\frac{\\partial }{\\partial c_j}(\\nabla u))\\\\ \n&=q|\\nabla u |^{q-2}(\\nabla u \\cdot \\nabla \\frac{\\partial u}{\\partial c_j})\n=q|\\nabla u |^{q-2}(\\nabla u \\cdot \\nabla\\psi_j)\n\\end{align*}\n\n!et',
  'solution_file': None,
  'subex': [],
  'text': 'The operator $\\nabla\\cdot(\\dfc(u)\\nabla u)$ with\n$\\dfc(u) = |\\nabla u|^q$ appears in several physical problems,\nespecially flow of Non-Newtonian fluids. The expression $|\\nabla u|$\nis defined as the Eucledian norm of a vector:\n$|\\nabla u|^2 = \\nabla u \\cdot \\nabla u$.\nIn a Newton method one\nhas to carry out the differentiation $\\partial\\dfc(u)/\\partial c_j$,\nfor $u=\\sum_kc_k\\baspsi_k$. Show that\n\n!bt\n\\[ {\\partial\\over\\partial u_j} |\\nabla u|^q =\nq|\\nabla  u|^{q-2}\\nabla u\\cdot\n\\nabla\\baspsi_j\\tp \\]\n\n!et',
  'title': 'Differentiate a highly nonlinear term',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_heat_FD_CN_2D.pdf'],
  'heading': '=====',
  'hints': ['Express the Jacobian as $J_{i,j,k,r,s,t} = \\partial F_{i,j,k}/\\partial u_{r,s,t}$ and observe, as in the 2D case, that $J_{i,j,k,r,s,t}$ is very sparse:\n$J_{i,j,k,r,s,t}\\neq 0$ only for $r=i\\pm i$, $s=j\\pm 1$, and $t=k\\pm 1$\nas well as $r=i$, $s=j$, and $t=k$.'],
  'keywords': None,
  'label': 'nonlin:exer:2D:heat:nonlinear:fd',
  'no': 17,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Redo Section ref{nonlin:alglevel:dD:fd} when a Crank-Nicolson scheme\nis used to discretize the equations in time and the problem is\nformulated for three spatial dimensions.',
  'title': 'Crank-Nicolson for a nonlinear 3D diffusion equation',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonlin_sparsity_Jacobian.pdf'],
  'heading': '=====',
  'hints': ['Set up the unknowns that enter the difference equation at a\npoint $(i,j)$ in 2D or $(i,j,k)$ in 3D, and identify the\nnonzero entries of the Jacobian that can arise from such a type\nof difference equation.'],
  'keywords': None,
  'label': 'nonlin:exer:sparsity:Jacobian',
  'no': 18,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Consider a typical nonlinear Laplace term like\n$\\nabla\\cdot\\dfc(u)\\nabla u$ discretized by centered finite differences.\nExplain why the Jacobian corresponding to this term has the same\nsparsity pattern as the matrix associated with the corresponding linear\nterm $\\dfc\\nabla^2 u$.',
  'title': 'Find the sparsity of the Jacobian',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'nonlin:exer:continuation:1DnNflow',
  'no': 19,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Formulate a Picard iteration method directly for the differential\nequation problem.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Perform a finite difference discretization of the problem in\neach Picard iteration. Implement a solver that can compute $u$\non a mesh. Verify that the solver gives an exact solution for $n=1$\non a uniform mesh regardless of the cell size.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Given a sequence of decreasing $n$ values, solve the problem for each\n$n$ using the solution for the previous $n$ as initial guess for\nthe Picard iteration. This is called a continuation method.\nExperiment with $n=(1,0.6,0.2)$ and $n=(1,0.9,0.8,\\ldots,0.2)$\nand make a table of the number of Picard iterations versus $n$.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Derive a Newton method at the differential equation level and\ndiscretize the resulting linear equations in each Newton iteration\nwith the finite difference method.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Investigate if Newton's method has better convergence properties than\nPicard iteration, both in combination with a continuation method."}],
  'text': 'idx{continuation method}\n\nFlow of a pseudo-plastic power-law fluid between two flat plates can be\nmodeled by\n\n!bt\n\\[ \\frac{d}{dx}\\left(\\mu_0\\left\\vert\\frac{du}{dx}\\right\\vert^{n-1}\n\\frac{du}{dx}\\right) = -\\beta,\\quad u^{\\prime}(0)=0,\\ u(H) = 0,\\]\n\n!et\nwhere $\\beta>0$ and $\\mu_0>0$ are constants.\nA target value of $n$ may be $n=0.2$.',
  'title': 'Investigate a 1D problem with a continuation method',
  'type': 'Problem',
  'type_visible': True}]