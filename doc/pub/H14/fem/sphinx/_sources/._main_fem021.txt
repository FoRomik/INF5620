.. !split

.. _fem:sys:

Systems of differential equations
=================================

Many mathematical models involve :math:`m+1` unknown functions
governed by a system of :math:`m+1` differential equations. In abstract form
we may denote the unknowns by :math:`u^{(0)},\ldots,
u^{(m)}` and write the governing equations as

.. math::
        
        \mathcal{L}_0(u^{(0)},\ldots,u^{(m)}) &= 0,\\ 
        &\vdots\\ 
        \mathcal{L}_{m}(u^{(0)},\ldots,u^{(m)}) &= 0,
        

where :math:`\mathcal{L}_i` is some differential operator defining differential
equation number :math:`i`.

.. _fem:sys:vform:

Variational forms  (3)
----------------------

There are basically two ways of formulating a variational form
for a system of differential equations. The first method treats
each equation independently as a scalar equation, while the other
method views the total system as a vector equation with a vector function
as unknown.

Let us start with the one equation at a time approach.
We multiply equation number :math:`i` by
some test function :math:`v^{(i)}\in V^{(i)}` and integrate over the domain:

.. _Eq:fem:sys:vform:1by1a:

.. math::
   :label: fem:sys:vform:1by1a
        
        \int_\Omega \mathcal{L}^{(0)}(u^{(0)},\ldots,u^{(m)}) v^{(0)}{\, \mathrm{d}x} = 0,
        
        

.. math::
          
        \vdots
        

.. _Eq:fem:sys:vform:1by1b:

.. math::
   :label: fem:sys:vform:1by1b
          
        \int_\Omega \mathcal{L}^{(m)}(u^{(0)},\ldots,u^{(m)}) v^{(m)}{\, \mathrm{d}x} = 0
        
        {\thinspace .}
        

Terms with second-order derivatives may be integrated by parts, with
Neumann conditions inserted in boundary integrals.
Let

.. math::
         V^{(i)} = \hbox{span}\{{\psi}_0^{(i)},\ldots,{\psi}_{N_i}^{(i)}\},

such that

.. math::
         u^{(i)} = B^{(i)}(\boldsymbol{x}) + \sum_{j=0}^{N_i} c_j^{(i)} {\psi}_j^{(i)}(\boldsymbol{x}),
        

where :math:`B^{(i)}` is a boundary function to handle nonzero Dirichlet conditions.
Observe that different unknowns live in different spaces with different
basis functions and numbers of degrees of freedom.

From the :math:`m` equations in the variational forms we can derive
:math:`m` coupled systems of algebraic equations for the
:math:`\Pi_{i=0}^{m} N_i` unknown coefficients :math:`c_j^{(i)}`, :math:`j=0,\ldots,N_i`,
:math:`i=0,\ldots,m`.

The alternative method for deriving a variational form for a system of
differential equations introduces a vector of unknown functions

.. math::
         \boldsymbol{u} = (u^{(0)},\ldots,u^{(m)}),

a vector of test functions

.. math::
         \boldsymbol{v} = (u^{(0)},\ldots,u^{(m)}),

with

.. math::
         \boldsymbol{u}, \boldsymbol{v} \in  \boldsymbol{V} = V^{(0)}\times \cdots \times V^{(m)}
        {\thinspace .} 

With nonzero Dirichlet conditions, we have a vector
:math:`\boldsymbol{B} = (B^{(0)},\ldots,B^{(m)})` with boundary functions and then
it is :math:`\boldsymbol{u} - \boldsymbol{B}` that lies in :math:`\boldsymbol{V}`, not :math:`\boldsymbol{u}` itself.

The governing system of differential equations is written

.. math::
         \boldsymbol{\mathcal{L}}(\boldsymbol{u} ) = 0,

where

.. math::
         \boldsymbol{\mathcal{L}}(\boldsymbol{u} ) = (\mathcal{L}^{(0)}(\boldsymbol{u}),\ldots, \mathcal{L}^{(m)}(\boldsymbol{u}))
        {\thinspace .} 

The variational form is derived by taking the inner product of
the vector of equations and the test function vector:

.. _Eq:fem:sys:vform:inner:

.. math::
   :label: fem:sys:vform:inner
        
        \int_\Omega \boldsymbol{\mathcal{L}}(\boldsymbol{u} )\cdot\boldsymbol{v} = 0\quad\forall\boldsymbol{v}\in\boldsymbol{V}{\thinspace .}
        
        

Observe that :eq:`fem:sys:vform:inner` is one scalar equation. To derive
systems of algebraic equations for the unknown coefficients in the
expansions of the unknown functions, one chooses :math:`m` linearly
independent :math:`\boldsymbol{v}` vectors to generate :math:`m` independent variational forms
from :eq:`fem:sys:vform:inner`.  The particular choice :math:`\boldsymbol{v} =
(v^{(0)},0,\ldots,0)` recovers :eq:`fem:sys:vform:1by1a`, :math:`\boldsymbol{v} =
(0,\ldots,0,v^{(m)}` recovers :eq:`fem:sys:vform:1by1b`, and :math:`\boldsymbol{v} =
(0,\ldots,0,v^{(i)},0,\ldots,0)` recovers the variational form number
:math:`i`, :math:`\int_\Omega \mathcal{L}^{(i)} v^{(i)}{\, \mathrm{d}x} =0`, in
:eq:`fem:sys:vform:1by1a`-:eq:`fem:sys:vform:1by1b`.

.. _fem:sys:uT:ex:

A worked example
----------------

We now consider a specific system of two partial differential equations
in two space dimensions:

.. _Eq:fem:sys:wT:ex:weq:

.. math::
   :label: fem:sys:wT:ex:weq
        
        \mu \nabla^2 w = -\beta,
        
        

.. _Eq:fem:sys:wT:ex:Teq:

.. math::
   :label: fem:sys:wT:ex:Teq
          
        \kappa\nabla^2 T = - \mu ||\nabla w||^2
        {\thinspace .}
        
        

The unknown functions :math:`w(x,y)` and :math:`T(x,y)` are defined in a domain :math:`\Omega`,
while :math:`\mu`, :math:`\beta`,
and :math:`\kappa` are given constants. The norm in
:eq:`fem:sys:wT:ex:Teq` is the standard Eucledian norm:

.. math::
         ||\nabla w||^2 = \nabla w\cdot\nabla w = w_x^2 + w_y^2
        {\thinspace .} 

The boundary conditions associated with
:eq:`fem:sys:wT:ex:weq`-:eq:`fem:sys:wT:ex:Teq` are :math:`w=0` on
:math:`\partial\Omega` and :math:`T=T_0` on :math:`\partial\Omega`.
Each of the equations :eq:`fem:sys:wT:ex:weq` and :eq:`fem:sys:wT:ex:Teq`
need one condition at each point on the boundary.

The system :eq:`fem:sys:wT:ex:weq`-:eq:`fem:sys:wT:ex:Teq` arises
from fluid flow in a straight pipe, with the :math:`z` axis in the direction
of the pipe. The domain :math:`\Omega` is a cross section of the pipe, :math:`w`
is the velocity in the :math:`z` direction, :math:`\mu`
is the viscosity of the fluid, :math:`\beta` is the pressure gradient along
the pipe, :math:`T` is the temperature,
and :math:`\kappa` is the heat conduction coefficient of the
fluid. The equation :eq:`fem:sys:wT:ex:weq` comes from the Navier-Stokes
equations, and :eq:`fem:sys:wT:ex:Teq` follows from the energy equation.
The term :math:`- \mu ||\nabla w||^2` models heating of the fluid
due to internal friction.

Observe that the system :eq:`fem:sys:wT:ex:weq`-:eq:`fem:sys:wT:ex:Teq` has
only a one-way coupling: :math:`T` depends on :math:`w`, but :math:`w` does not depend on
:math:`T`, because we can solve :eq:`fem:sys:wT:ex:weq` with respect
to :math:`w` and then :eq:`fem:sys:wT:ex:Teq` with respect to :math:`T`.
Some may argue that this is not a real system of PDEs, but just two scalar
PDEs. Nevertheless, the one-way coupling
is convenient when comparing different variational forms
and different implementations.

Identical function spaces for the unknowns
------------------------------------------

Let us first apply the same function space :math:`V` for :math:`w` and :math:`T`
(or more precisely, :math:`w\in V` and :math:`T-T_0 \in V`).
With

.. math::
         V = \hbox{span}\{{\psi}_0(x,y),\ldots,{\psi}_N(x,y)\}, 

we write

.. _Eq:fem:sys:wT:ex:sum:

.. math::
   :label: fem:sys:wT:ex:sum
        
        w = \sum_{j=0}^N c^{(w)}_j {\psi}_j,\quad T = T_0 + \sum_{j=0}^N c^{(T)}_j
        {\psi}_j{\thinspace .}
        
        

Note that :math:`w` and :math:`T` in :eq:`fem:sys:wT:ex:weq`-:eq:`fem:sys:wT:ex:Teq`
denote the exact solution of the PDEs, while :math:`w` and :math:`T`
:eq:`fem:sys:wT:ex:sum` are the discrete functions that approximate
the exact solution. It should be clear from the context whether a
symbol means the exact or approximate solution, but when we need both
at the same time, we use a subscript e to denote the exact solution.

Variational form of each individual PDE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Inserting the expansions :eq:`fem:sys:wT:ex:sum`
in the governing PDEs, results in a residual in each equation,

.. _Eq:fem:sys:wT:ex:weq:R:

.. math::
   :label: fem:sys:wT:ex:weq:R
        
        R_w = \mu \nabla^2 w + \beta,
        
        

.. _Eq:fem:sys:wT:ex:Teq:R:

.. math::
   :label: fem:sys:wT:ex:Teq:R
          
        R_T = \kappa\nabla^2 T + \mu ||\nabla w||^2
        {\thinspace .}
        
        

A Galerkin method demands :math:`R_w` and :math:`R_T` do be orthogonal to :math:`V`:

.. math::
        
        \int_\Omega R_w v {\, \mathrm{d}x} &=0\quad\forall v\in V,\\ 
        \int_\Omega R_T v {\, \mathrm{d}x} &=0\quad\forall v\in V
        {\thinspace .}
        

Because of the Dirichlet conditions, :math:`v=0` on :math:`\partial\Omega`.
We integrate the Laplace terms by parts and note that the boundary terms
vanish since :math:`v=0` on :math:`\partial\Omega`:

.. _Eq:fem:sys:wT:ex:w:vf1:

.. math::
   :label: fem:sys:wT:ex:w:vf1
        
        \int_\Omega \mu \nabla w\cdot\nabla v {\, \mathrm{d}x} = \int_\Omega \beta v{\, \mathrm{d}x}
        \quad\forall v\in V,
        
        

.. _Eq:fem:sys:wT:ex:T:vf1:

.. math::
   :label: fem:sys:wT:ex:T:vf1
          
        \int_\Omega \kappa \nabla T\cdot\nabla v {\, \mathrm{d}x} = \int_\Omega \mu
        \nabla w\cdot\nabla w\, v{\, \mathrm{d}x} \quad\forall v\in V
        
        {\thinspace .}
        

Compound scalar variational form
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The alternative way of deriving the variational from is to
introduce a test vector function :math:`\boldsymbol{v}\in\boldsymbol{V} = V\times V` and take
the inner product of :math:`\boldsymbol{v}` and the residuals, integrated over the domain:

.. math::
         \int_{\Omega} (R_w, R_T)\cdot\boldsymbol{v} {\, \mathrm{d}x} = 0\quad\forall\boldsymbol{v}\in\boldsymbol{V}
        {\thinspace .} 

With :math:`\boldsymbol{v} = (v_0,v_1)` we get

.. math::
         \int_{\Omega} (R_w v_0 + R_T v_1) {\, \mathrm{d}x} = 0\quad\forall\boldsymbol{v}\in\boldsymbol{V}
        {\thinspace .} 

Integrating the Laplace terms by parts results in

.. _Eq:fem:sys:wT:ex:wT:vf2:

.. math::
   :label: fem:sys:wT:ex:wT:vf2
        
        \int_\Omega (\mu\nabla w\cdot\nabla v_0 + \kappa\nabla T\cdot\nabla v_1){\, \mathrm{d}x}
        = \int_\Omega (\beta v_0 + \mu\nabla w\cdot\nabla w\, v_1){\, \mathrm{d}x},
        \quad\forall \boldsymbol{v}\in\boldsymbol{V}
        {\thinspace .}
        
        

Choosing :math:`v_0=v` and :math:`v_1=0` gives the variational form
:eq:`fem:sys:wT:ex:w:vf1`, while :math:`v_0=0` and :math:`v_1=v` gives
:eq:`fem:sys:wT:ex:T:vf1`.

With the inner product notation, :math:`(p,q) = \int_\Omega pq{\, \mathrm{d}x}`, we
can alternatively write :eq:`fem:sys:wT:ex:w:vf1` and
:eq:`fem:sys:wT:ex:T:vf1` as

.. math::
        
         (\mu\nabla w,\nabla v) &= (\beta, v)
        \quad\forall v\in V,\\ 
        (\kappa \nabla T,\nabla v) &= (\mu\nabla w\cdot\nabla w, v)\quad\forall v\in V,
        

or since :math:`\mu` and :math:`\kappa` are considered constant,

.. _Eq:fem:sys:wT:ex:w:vf1i:

.. math::
   :label: fem:sys:wT:ex:w:vf1i
        
        \mu (\nabla w,\nabla v) = (\beta, v)
        \quad\forall v\in V,
        
        

.. _Eq:fem:sys:wT:ex:T:vf1i:

.. math::
   :label: fem:sys:wT:ex:T:vf1i
          
        \kappa(\nabla T,\nabla v) = \mu(\nabla w\cdot\nabla w, v)\quad\forall v\in V
        
        {\thinspace .}
        

Decoupled linear systems
~~~~~~~~~~~~~~~~~~~~~~~~

The linear systems governing the coefficients :math:`c_j^{(w)}` and
:math:`c_j^{(T)}`, :math:`j=0,\ldots,N`, are derived by inserting the
expansions :eq:`fem:sys:wT:ex:sum` in :eq:`fem:sys:wT:ex:w:vf1`
and :eq:`fem:sys:wT:ex:T:vf1`, and choosing :math:`v={\psi}_i` for
:math:`i=0,\ldots,N`. The result becomes

.. _Eq:fem:sys:wT:ex:linsys:w1:

.. math::
   :label: fem:sys:wT:ex:linsys:w1
        
        \sum_{j=0}^N A^{(w)}_{i,j} c^{(w)}_j = b_i^{(w)},\quad i=0,\ldots,N,
        
        

.. _Eq:fem:sys:wT:ex:linsys:T1:

.. math::
   :label: fem:sys:wT:ex:linsys:T1
          
        \sum_{j=0}^N A^{(T)}_{i,j} c^{(T)}_j = b_i^{(T)},\quad i=0,\ldots,N,
        
        

.. math::
          
        A^{(w)}_{i,j} = \mu(\nabla {\psi}_j,\nabla {\psi}_i),
        

.. math::
          
        b_i^{(w)} = (\beta, {\psi}_i),
        

.. math::
          
        A^{(T)}_{i,j} = \kappa(\nabla {\psi}_j,\nabla {\psi}_i),
        

.. math::
          
        b_i^{(T)} = \mu((\sum_j c^{(w)}_j\nabla{\psi}_j)\cdot (\sum_k
        c^{(w)}_k\nabla{\psi}_k), {\psi}_i)
        {\thinspace .}
        

It can also be instructive to write the linear systems using matrices
and vectors. Define :math:`K` as the matrix corresponding to the Laplace
operator :math:`\nabla^2`. That is, :math:`K_{i,j} = (\nabla {\psi}_j,\nabla {\psi}_i)`.
Let us introduce the vectors

.. math::
        
        b^{(w)} &= (b_0^{(w)},\ldots,b_{N}^{(w)}),\\ 
        b^{(T)} &= (b_0^{(T)},\ldots,b_{N}^{(T)}),\\ 
        c^{(w)} &= (c_0^{(w)},\ldots,c_{N}^{(w)}),\\ 
        c^{(T)} &= (c_0^{(T)},\ldots,c_{N}^{(T)}){\thinspace .}
        

The system :eq:`fem:sys:wT:ex:linsys:w1`-:eq:`fem:sys:wT:ex:linsys:T1`
can now be expressed in matrix-vector form as

.. math::
        
        \mu K c^{(w)} = b^{(w)},
        

.. math::
          
        \kappa K c^{(T)} = b^{(T)}{\thinspace .}
        

We can solve the first system for :math:`c^{(w)}`, and then
the right-hand side :math:`b^{(T)}` is known such that we can
solve the second system for :math:`c^{(T)}`.

Coupled linear systems
~~~~~~~~~~~~~~~~~~~~~~

Despite the fact that :math:`w` can be computed first, without knowing :math:`T`,
we shall now pretend that :math:`w` and :math:`T` enter a two-way coupling such
that we need to derive the
algebraic equations as *one system* for all the unknowns
:math:`c_j^{(w)}` and :math:`c_j^{(T)}`, :math:`j=0,\ldots,N`. This system is
nonlinear in :math:`c_j^{(w)}` because of the :math:`\nabla w\cdot\nabla w` product.
To remove this nonlinearity, imagine that we introduce an iteration
method where we replace :math:`\nabla w\cdot\nabla w` by
:math:`\nabla w_{-}\cdot\nabla w`, :math:`w_{-}` being the :math:`w`
computed in the previous iteration. Then the term
:math:`\nabla w_{-}\cdot\nabla w` is linear in :math:`w` since :math:`w_{-}` is
known. The total linear system becomes

.. _Eq:fem:sys:wT:ex:linsys:w2:

.. _Eq:fem:sys:wT:ex:linsys:w2:

.. math::
   :label: fem:sys:wT:ex:linsys:w2
        
        \sum_{j=0}^N A^{(w,w)}_{i,j} c^{(w)}_j + \sum_{j=0}^N A^{(w,T)}_{i,j} c^{(T)}_j
        = b_i^{(w)},\quad i=0,\ldots,N,
        
        

.. _Eq:fem:sys:wT:ex:linsys:T2:

.. _Eq:fem:sys:wT:ex:linsys:T2:

.. math::
   :label: fem:sys:wT:ex:linsys:T2
          
        \sum_{j=0}^N A^{(T,w)}_{i,j} c^{(w)}_j + \sum_{j=0}^N A^{(T,T)}_{i,j} c^{(T)}_j = b_i^{(T)},\quad i=0,\ldots,N,
        
        

.. math::
          
        A^{(w,w)}_{i,j} = \mu(\nabla {\psi}_j,{\psi}_i),
        

.. math::
          
        A^{(w,T)}_{i,j} = 0,
        

.. math::
          
        b_i^{(w)} = (\beta, {\psi}_i),
        

.. math::
          
        A^{(w,T)}_{i,j} = \mu((\nabla{\psi} w_{-})\cdot\nabla{\psi}_j), {\psi}_i),
        

.. math::
          
        A^{(T,T)}_{i,j} = \kappa(\nabla {\psi}_j,{\psi}_i),
        

.. math::
          
        b_i^{(T)} = 0
        {\thinspace .}
        

This system can alternatively be written in matrix-vector form as

.. math::
        
        \mu K c^{(w)} = 0 b^{(w)},
        

.. math::
          
        L c^{(w)} + \kappa K c^{(T)}  =0,
        

with :math:`L` as the matrix from the :math:`\nabla w_{-}\cdot\nabla` operator:
:math:`L_{i,j} = A^{(w,T)}_{i,j}`.

The matrix-vector equations are often conveniently written in block form:

.. math::
        
        \left(\begin{array}{cc}
        \mu K & 0\\ 
        L & \kappa K
        \end{array}\right)
        \left(\begin{array}{c}
        c^{(w)}\\ 
        c^{(T)}
        \end{array}\right) =
        \left(\begin{array}{c}
        b^{(w)}\\ 
        0
        \end{array}\right),
        

Note that in the general case where all unknowns enter all equations,
we have to solve the compound system
:eq:`fem:sys:wT:ex:linsys:w2`-:eq:`fem:sys:wT:ex:linsys:T2` since
then we cannot utilize the special property that
:eq:`fem:sys:wT:ex:linsys:w1` does not involve :math:`T` and can be solved
first.

When the viscosity depends on the temperature, the
:math:`\mu\nabla^2w` term must be replaced by :math:`\nabla\cdot (\mu(T)\nabla w)`,
and then :math:`T` enters the equation for :math:`w`. Now we have a two-way coupling
since both equations contain :math:`w` and :math:`T` and therefore
must be solved simultaneously
Th equation :math:`\nabla\cdot (\mu(T)\nabla w)=-\beta` is nonlinear,
and if some iteration procedure is invoked, where we use a previously
computed :math:`T_{-}` in the viscosity (:math:`\mu(T_{-})`), the coefficient is known,
and the equation involves only one unknown, :math:`w`. In that case we are
back to the one-way coupled set of PDEs.

We may also formulate our PDE system as a vector equation. To this end,
we introduce the vector of unknowns :math:`\boldsymbol{u} = (u^{(0)},u^{(1)})`,
where :math:`u^{(0)}=w` and :math:`u^{(1)}=T`. We then have

.. math::
        
        \nabla^2 \boldsymbol{u} = \left(\begin{array}{cc}
        -{\mu}^{-1}{\beta}\\ 
        -{\kappa}^{-1}\mu \nabla u^{(0)}\cdot\nabla u^{(0)}
        \end{array}\right){\thinspace .}
        

Different function spaces for the unknowns
------------------------------------------

.. index:: mixed finite elements

It is easy to generalize the previous formulation to the case where
:math:`w\in V^{(w)}` and :math:`T\in V^{(T)}`, where :math:`V^{(w)}` and :math:`V^{(T)}`
can be different spaces with different numbers of degrees of freedom.
For example, we may use quadratic basis functions for :math:`w` and linear
for :math:`T`. Approximation of the unknowns by different finite element
spaces is known as *mixed finite element methods*.

We write

.. math::
        
        V^{(w)} &= \hbox{span}\{{\psi}_0^{(w)},\ldots,{\psi}_{N_w}^{(w)}\},\\ 
        V^{(T)} &= \hbox{span}\{{\psi}_0^{(T)},\ldots,{\psi}_{N_T}^{(T)}\}
        {\thinspace .}
        

The next step is to
multiply :eq:`fem:sys:wT:ex:weq` by a test function :math:`v^{(w)}\in V^{(w)}`
and :eq:`fem:sys:wT:ex:Teq` by a :math:`v^{(T)}\in V^{(T)}`, integrate by
parts and arrive at

.. _Eq:fem:sys:wT:ex:w:vf3:

.. math::
   :label: fem:sys:wT:ex:w:vf3
        
        \int_\Omega \mu \nabla w\cdot\nabla v^{(w)} {\, \mathrm{d}x} = \int_\Omega \beta v^{(w)}{\, \mathrm{d}x}
        \quad\forall v^{(w)}\in V^{(w)},
        
        

.. _Eq:fem:sys:wT:ex:T:vf3:

.. math::
   :label: fem:sys:wT:ex:T:vf3
          
        \int_\Omega \kappa \nabla T\cdot\nabla v^{(T)} {\, \mathrm{d}x} = \int_\Omega \mu
        \nabla w\cdot\nabla w\, v^{(T)}{\, \mathrm{d}x} \quad\forall v^{(T)}\in V^{(T)}
        
        {\thinspace .}
        

The compound scalar variational formulation applies a test vector function
:math:`\boldsymbol{v} = (v^{(w)}, v^{(T)})` and reads

.. _Eq:fem:sys:wT:ex:wT:vf3:

.. math::
   :label: fem:sys:wT:ex:wT:vf3
        
        \int_\Omega (\mu\nabla w\cdot\nabla v^{(w)} +
        \kappa\nabla T\cdot\nabla v^{(T)}){\, \mathrm{d}x}
        = \int_\Omega (\beta v^{(w)} + \mu\nabla w\cdot\nabla w\, v^{(T)}){\, \mathrm{d}x},
        
        

valid :math:`\forall \boldsymbol{v}\in\boldsymbol{V} = V^{(w)}\times V^{(T)}`.

The associated linear system is similar to
:eq:`fem:sys:wT:ex:linsys:w1`-:eq:`fem:sys:wT:ex:linsys:T1`
or
:eq:`fem:sys:wT:ex:linsys:w2`-:eq:`fem:sys:wT:ex:linsys:T2`,
except that we need to distinguish between :math:`{\psi}_i^{(w)}`
and :math:`{\psi}_i^{(T)}`, and the range in the sums over :math:`j`
must match the number of degrees of freedom in the spaces :math:`V^{(w)}`
and :math:`V^{(T)}`. The formulas become

.. _Eq:fem:sys:wT:ex:linsys:w1:mixed:

.. math::
   :label: fem:sys:wT:ex:linsys:w1:mixed
        
        \sum_{j=0}^{N_w} A^{(w)}_{i,j} c^{(w)}_j = b_i^{(w)},\quad i=0,\ldots,N_w,
        
        

.. _Eq:fem:sys:wT:ex:linsys:T1:mixed:

.. math::
   :label: fem:sys:wT:ex:linsys:T1:mixed
          
        \sum_{j=0}^{N_T} A^{(T)}_{i,j} c^{(T)}_j = b_i^{(T)},\quad i=0,\ldots,N_T,
        
        

.. math::
          
        A^{(w)}_{i,j} = \mu(\nabla {\psi}_j^{(w)},{\psi}_i^{(w)}),
        

.. math::
          
        b_i^{(w)} = (\beta, {\psi}_i^{(w)}),
        

.. math::
          
        A^{(T)}_{i,j} = \kappa(\nabla {\psi}_j^{(T)},{\psi}_i^{(T)}),
        

.. math::
          
        b_i^{(T)} = \mu(\nabla w_{-}, {\psi}_i^{(T)})
        {\thinspace .}
        

In the case we formulate one compound linear system involving
both :math:`c^{(w)}_j`, :math:`j=0,\ldots,N_w`, and :math:`c^{(T)}_j`, :math:`j=0,\ldots,N_T`,
:eq:`fem:sys:wT:ex:linsys:w2`-:eq:`fem:sys:wT:ex:linsys:T2`
becomes

.. _Eq:fem:sys:wT:ex:linsys:w2:

.. _Eq:fem:sys:wT:ex:linsys:w2:

.. math::
   :label: fem:sys:wT:ex:linsys:w2
        
        \sum_{j=0}^{N_w} A^{(w,w)}_{i,j} c^{(w)}_j + \sum_{j=0}^{N_T} A^{(w,T)}_{i,j} c^{(T)}_j
        = b_i^{(w)},\quad i=0,\ldots,N_w,
        
        

.. _Eq:fem:sys:wT:ex:linsys:T2:

.. _Eq:fem:sys:wT:ex:linsys:T2:

.. math::
   :label: fem:sys:wT:ex:linsys:T2
          
        \sum_{j=0}^{N_w} A^{(T,w)}_{i,j} c^{(w)}_j + \sum_{j=0}^{N_T} A^{(T,T)}_{i,j} c^{(T)}_j = b_i^{(T)},\quad i=0,\ldots,N_T,
        
        

.. math::
          
        A^{(w,w)}_{i,j} = \mu(\nabla {\psi}_j^{(w)},{\psi}_i^{(w)}),
        

.. math::
          
        A^{(w,T)}_{i,j} = 0,
        

.. math::
          
        b_i^{(w)} = (\beta, {\psi}_i^{(w)}),
        

.. math::
          
        A^{(w,T)}_{i,j} = \mu (\nabla w_{-}\cdot\nabla{\psi}_j^{(w)}), {\psi}_i^{(T)}),
        

.. math::
          
        A^{(T,T)}_{i,j} = \kappa(\nabla {\psi}_j^{(T)},{\psi}_i^{(T)}),
        

.. math::
          
        b_i^{(T)} = 0
        {\thinspace .}
        

The corresponding block form

.. math::
        
        \left(\begin{array}{cc}
        \mu K^{(w)} & 0\\ 
        L & \kappa K^{(T)}
        \end{array}\right)
        \left(\begin{array}{c}
        c^{(w)}\\ 
        c^{(T)}
        \end{array}\right) =
        \left(\begin{array}{c}
        b^{(w)}\\ 
        0
        \end{array}\right),
        

has square and rectangular block matrices: :math:`K^{(w)}` is :math:`N_w\times N_w`,
:math:`K^{(T)}` is :math:`N_T\times N_T`, while :math:`L` is :math:`N_T\times N_w`,

Computations in 1D
------------------

.. 2DO

.. show analytical solution in [0,H]

.. use global polynomials (x^i(H-x)), exact sol

.. compute uncoupled and coupled discrete systems, N=4

.. note: coupled can use exact w_{-}

.. P1-P1, n elements, 2 elements as special case

.. uncoupled and coupled (can use exercises for variants)

.. P1 for w, P2 for T or P4 for T

.. similar computations for circle can be done as project

.. extensions to time-dep versions in projects

.. any geophysical applications? flowing ice sheet ("half channel") and

.. temp gradient through, check with Jed

.. the time-dependent system can be introduced in diffusion and

.. a finite difference scheme can be devised

We can reduce the system :eq:`fem:sys:wT:ex:weq`-:eq:`fem:sys:wT:ex:Teq`
to one space dimension, which corresponds to flow in a channel between
two flat plates. Alternatively, one may consider flow in a circular
pipe, introduce cylindrical coordinates, and utilize the radial symmetry
to reduce the equations to a one-dimensional problem in the radial
coordinate. The former model becomes

.. _Eq:fem:sys:wT:ex1D:weq:

.. math::
   :label: fem:sys:wT:ex1D:weq
        
        \mu w_{xx} = -\beta,
        
        

.. _Eq:fem:sys:wT:ex1D:Teq:

.. math::
   :label: fem:sys:wT:ex1D:Teq
          
        \kappa T_{xx} = - \mu w_x^2,
        
        

while the model in the radial coordinate :math:`r` reads

.. _Eq:fem:sys:wT:ex1Dr:weq:

.. math::
   :label: fem:sys:wT:ex1Dr:weq
        
        \mu\frac{1}{r}\frac{d}{dr}\left( r\frac{dw}{dr}\right) = -\beta,
        
        

.. _Eq:fem:sys:wT:ex1Dr:Teq:

.. math::
   :label: fem:sys:wT:ex1Dr:Teq
          
        \kappa \frac{1}{r}\frac{d}{dr}\left( r\frac{dT}{dr}\right) = - \mu \left(
        \frac{dw}{dr}\right)^2
        {\thinspace .}
        
        

The domain for :eq:`fem:sys:wT:ex1D:weq`-:eq:`fem:sys:wT:ex1D:Teq`
is :math:`\Omega = [0,H]`, with boundary conditions :math:`w(0)=w(H)=0` and
:math:`T(0)=T(H)=T_0`. For
:eq:`fem:sys:wT:ex1Dr:weq`-:eq:`fem:sys:wT:ex1Dr:Teq` the domain
is :math:`[0,R]` (:math:`R` being the radius of the pipe) and the boundary
conditions are :math:`du/dr = dT/dr =0` for :math:`r=0`, :math:`u(R)=0`, and :math:`T(R)=T_0`.

.. 2DO

**Calculations to be continued...**

