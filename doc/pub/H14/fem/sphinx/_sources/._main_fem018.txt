.. !split

.. _fem:deq:2D:varform:

Variational formulations in 2D and 3D
=====================================

The major difference between deriving variational formulations in 2D and 3D
compared to 1D is the rule for integrating by parts.
A typical second-order term in a PDE may be written in dimension-independent
notation as

.. math::
         \nabla^2 u \quad\hbox{or}\quad \nabla\cdot\left( a(\boldsymbol{x})\nabla u\right)
        {\thinspace .}
        

The explicit forms in a 2D problem become

.. math::
         \nabla^2 u = \nabla\cdot\nabla u =
        \frac{\partial^2 u}{\partial x^2} +
        \frac{\partial^2 u}{\partial y^2},
        

and

.. math::
        
        \nabla\cdot\left( a(\boldsymbol{x})\nabla u\right) =
        \frac{\partial}{\partial x}\left( a(x,y)\frac{\partial u}{\partial x}\right) +
        \frac{\partial}{\partial y}\left( a(x,y)\frac{\partial u}{\partial y}\right)
        {\thinspace .}
        

We shall continue with the latter operator as the form arises from
just setting :math:`a=1`.

The general rule for integrating by parts is often referred to as
`Green's first identity <http://en.wikipedia.org/wiki/Green's_identities>`__:

.. _Eq:fem:deq:2D:int:by:parts:

.. math::
   :label: fem:deq:2D:int:by:parts
        
        -\int_{\Omega} \nabla\cdot (a(\boldsymbol{x})\nabla u) v{\, \mathrm{d}x} =
        \int_{\Omega} a(\boldsymbol{x})\nabla u\cdot\nabla v {\, \mathrm{d}x} -
        \int_{\partial\Omega} a\frac{\partial u}{\partial n} v {\, \mathrm{d}s},
        
        

where :math:`\partial\Omega` is the boundary of :math:`\Omega` and
:math:`\partial u/\partial n = \boldsymbol{n}\cdot\nabla u` is the derivative
of :math:`u` in the outward normal direction, :math:`\boldsymbol{n}` being an outward
unit normal to :math:`\partial\Omega`. The integrals :math:`\int_\Omega (){\, \mathrm{d}x}` are
area integrals in 2D and volume integrals in 3D, while
:math:`\int_{\partial\Omega} (){\, \mathrm{d}s}` is a line integral in 2D and a surface
integral in 3D.

Let us divide the boundary into two parts:

 * :math:`\partial\Omega_N`, where we have Neumann conditions
   :math:`-a\frac{\partial u}{\partial n} = g`, and

 * :math:`\partial\Omega_D`, where we have Dirichlet conditions
   :math:`u = u_0`.

The test functions :math:`v` are required to vanish on :math:`\partial\Omega_D`.

**Example.**

Here is a quite general, stationary, linear PDE arising in many problems:

.. math::
        
        \boldsymbol{v}\cdot\nabla u + \alpha u = \nabla\cdot\left( a\nabla u\right) + f,
        \quad\boldsymbol{x}\in\Omega,
        

.. math::
          
        u = u_0,\quad\boldsymbol{x}\in\partial\Omega_D,
        

.. math::
          
        -a\frac{\partial u}{\partial n} = g,\quad\boldsymbol{x}\in\partial\Omega_N
        {\thinspace .}
        

The vector field :math:`\boldsymbol{v}` and the scalar functions :math:`a`, :math:`\alpha`, :math:`f`, :math:`u_0`, and
:math:`g` may vary with the spatial coordinate :math:`\boldsymbol{x}` and must be known.

Such a second-order PDE needs exactly one boundary condition at each
point of the boundary, so :math:`\partial\Omega_N\cup\partial\Omega_D`
must be the complete boundary :math:`\partial\Omega`.

Assume that the boundary function :math:`u_0(\boldsymbol{x})` is defined for all :math:`\boldsymbol{x}\in\Omega`.
The unknown function can then be expanded as

.. math::
         u = B + \sum_{j\in{\mathcal{I}_s}} c_j{\psi}_j,\quad B = u_0 {\thinspace .} 

The variational formula is obtained from Galerkin's method, which
technically implies multiplying the PDE by a test
function :math:`v` and integrating over :math:`\Omega`:

.. math::
        
        \int_{\Omega} (\boldsymbol{v}\cdot\nabla u + \alpha u)v{\, \mathrm{d}x} =
        \int_{\Omega} \nabla\cdot\left( a\nabla u\right){\, \mathrm{d}x} + \int_{\Omega}fv {\, \mathrm{d}x}
        {\thinspace .}
        

The second-order term is integrated by parts, according to

.. math::
        
        \int_{\Omega} \nabla\cdot\left( a\nabla u\right)v {\, \mathrm{d}x} =
        -\int_{\Omega} a\nabla u\cdot\nabla v{\, \mathrm{d}x}
        + \int_{\partial\Omega} a\frac{\partial u}{\partial n} v{\, \mathrm{d}s}
        {\thinspace .}
        

The variational form now reads

.. math::
        
        \int_{\Omega} (\boldsymbol{v}\cdot\nabla u + \alpha u)v{\, \mathrm{d}x} =
        -\int_{\Omega} a\nabla u\cdot\nabla v{\, \mathrm{d}x}
        + \int_{\partial\Omega} a\frac{\partial u}{\partial n} v{\, \mathrm{d}s}
        + \int_{\Omega} fv {\, \mathrm{d}x}
        {\thinspace .}
        

The boundary term can be developed further by noticing that :math:`v\neq 0`
only on :math:`\partial\Omega_N`,

.. math::
         \int_{\partial\Omega} a\frac{\partial u}{\partial n} v{\, \mathrm{d}s}
        = \int_{\partial\Omega_N} a\frac{\partial u}{\partial n} v{\, \mathrm{d}s},
        

and that on :math:`\partial\Omega_N`, we have the condition
:math:`a\frac{\partial u}{\partial n}=-g`, so the term becomes

.. math::
        
        -\int_{\partial\Omega_N} gv{\, \mathrm{d}s}{\thinspace .}
        

The variational form is then

.. math::
        
        \int_{\Omega} (\boldsymbol{v}\cdot\nabla u + \alpha u)v{\, \mathrm{d}x} =
        -\int_{\Omega} a\nabla u\cdot\nabla v {\, \mathrm{d}x}
        - \int_{\partial\Omega_N} g v{\, \mathrm{d}s}
        + \int_{\Omega} fv {\, \mathrm{d}x}
        {\thinspace .}
        

Instead of using the integral signs we may use the inner product
notation:

.. math::
        
        (\boldsymbol{v}\cdot\nabla u, v) + (\alpha u,v) =
        - (a\nabla u,\nabla v) - (g,v)_{N} + (f,v)
        {\thinspace .}
        

The subscript :math:`\,{}_N` in :math:`(g,v)_{N}` is a notation for a line or surface
integral over :math:`\partial\Omega_N`.

Inserting the :math:`u` expansion results in

.. math::
        
        \sum_{j\in{\mathcal{I}_s}} ((\boldsymbol{v}\cdot\nabla {\psi}_j, {\psi}_i) &+ (\alpha {\psi}_j ,{\psi}_i) + (a\nabla {\psi}_j,\nabla {\psi}_i))c_j = \\ 
        & (g,{\psi}_i)_{N} + (f,{\psi}_i) -
        (\boldsymbol{v}\cdot\nabla u_0, {\psi}_i) + (\alpha u_0 ,{\psi}_i) +
        (a\nabla u_0,\nabla {\psi}_i)
        {\thinspace .}
        

This is a linear system with matrix entries

.. math::
        
        A_{i,j} = (\boldsymbol{v}\cdot\nabla {\psi}_j, {\psi}_i) + (\alpha {\psi}_j ,{\psi}_i) + (a\nabla {\psi}_j,\nabla {\psi}_i)
        

and right-hand side entries

.. math::
        
        b_i = (g,{\psi}_i)_{N} + (f,{\psi}_i) -
        (\boldsymbol{v}\cdot\nabla u_0, {\psi}_i) + (\alpha u_0 ,{\psi}_i) +
        (a\nabla u_0,\nabla {\psi}_i),
        

for :math:`i,j\in{\mathcal{I}_s}`.

In the finite element method, we usually express :math:`u_0` in terms of
basis functions and restrict :math:`i` and :math:`j` to run over the degrees of
freedom that are not prescribed as Dirichlet conditions.
However, we can also keep all the :math:`c_j`, :math:`j\in{\mathcal{I}_s}`, as unknowns
drop the :math:`u_0` in the expansion for :math:`u`, and incorporate all the
known :math:`c_j` values in the linear system. This has been explained
in detail in the 1D case.

Transformation to a reference cell in 2D and 3D
-----------------------------------------------

We consider an integral of the type

.. math::
        
        \int_{{\Omega}^{(e)}} a(\boldsymbol{x})\nabla{\varphi}_i\cdot\nabla{\varphi}_j{\, \mathrm{d}x},
        

where the :math:`{\varphi}_i` functions are finite element basis functions in
2D or 3D, defined in the physical domain.
Suppose we want to calculate this integral over a reference cell,
denoted by :math:`\tilde\Omega^r`, in a coordinate system with coordinates
:math:`\boldsymbol{X} = (X_0, X_1)` (2D) or :math:`\boldsymbol{X} = (X_0, X_1, X_2)` (3D).
The mapping between a point :math:`\boldsymbol{X}` in the reference coordinate system  and
the corresponding point :math:`\boldsymbol{x}` in the physical coordinate system is
given by a vector relation :math:`\boldsymbol{x}(\boldsymbol{X})`.
The corresponding Jacobian, :math:`J`, of this mapping has entries

.. math::
         J_{i,j}=\frac{\partial x_j}{\partial X_i}{\thinspace .} 

The change of variables requires :math:`{\, \mathrm{d}x}` to be replaced by :math:`\det J{\, \mathrm{d}X}`.
The derivatives in the :math:`\nabla` operator in the variational form are
with respect to :math:`\boldsymbol{x}`, which we may denote by :math:`\nabla_{\boldsymbol{x}}`.
The :math:`{\varphi}_i(\boldsymbol{x})` functions in the integral
are replaced by local basis functions :math:`{\tilde{\varphi}}_r(\boldsymbol{X})` so
the integral features :math:`\nabla_{\boldsymbol{x}}{\tilde{\varphi}}_r(\boldsymbol{X})`. We readily have
:math:`\nabla_{\boldsymbol{X}}{\tilde{\varphi}}_r(\boldsymbol{X})` from formulas for the basis functions in
the reference cell, but
the desired quantity :math:`\nabla_{\boldsymbol{x}}{\tilde{\varphi}}_r(\boldsymbol{X})` requires some efforts
to compute. All the details are provided below.

Let :math:`i=q(e,r)` and consider two space dimensions. By the chain rule,

.. math::
        
        \frac{\partial {\tilde{\varphi}}_r}{\partial X} =
        \frac{\partial {\varphi}_i}{\partial X} =
        \frac{\partial {\varphi}_i}{\partial x}\frac{\partial x}{\partial X} +
        \frac{\partial {\varphi}_i}{\partial y}\frac{\partial y}{\partial X},
        

and

.. math::
        
        \frac{\partial {\tilde{\varphi}}_r}{\partial Y} =
        \frac{\partial {\varphi}_i}{\partial Y} =
        \frac{\partial {\varphi}_i}{\partial x}\frac{\partial x}{\partial Y} +
        \frac{\partial {\varphi}_i}{\partial y}\frac{\partial y}{\partial Y}
        {\thinspace .}
        

We can write these two equations as a vector equation

.. math::
        
        \left[\begin{array}{c}
        \frac{\partial {\tilde{\varphi}}_r}{\partial X}\\ 
        \frac{\partial {\tilde{\varphi}}_r}{\partial Y}
        \end{array}\right]
        =
        \left[\begin{array}{cc}
        \frac{\partial x}{\partial X} & \frac{\partial y}{\partial X}\\ 
        \frac{\partial x}{\partial Y} & \frac{\partial y}{\partial Y}
        \end{array}\right]
        \left[\begin{array}{c}
        \frac{\partial {\varphi}_i}{\partial x}\\ 
        \frac{\partial {\varphi}_i}{\partial y}
        \end{array}\right]
        

Identifying

.. math::
         \nabla_{\boldsymbol{X}}{\tilde{\varphi}}_r = \left[\begin{array}{c}
        \frac{\partial {\tilde{\varphi}}_r}{\partial X}\\ 
        \frac{\partial {\tilde{\varphi}}_r}{\partial Y}
        \end{array}\right],
        \quad
        J =
        \left[\begin{array}{cc}
        \frac{\partial x}{\partial X} & \frac{\partial y}{\partial X}\\ 
        \frac{\partial x}{\partial Y} & \frac{\partial y}{\partial Y}
        \end{array}\right],
        \quad
        \nabla_{\boldsymbol{x}}{\varphi}_r =
        \left[\begin{array}{c}
        \frac{\partial {\varphi}_i}{\partial x}\\ 
        \frac{\partial {\varphi}_i}{\partial y}
        \end{array}\right],
        

we have the relation

.. math::
         \nabla_{\boldsymbol{X}}{\tilde{\varphi}}_r = J\cdot\nabla_{\boldsymbol{x}}{\varphi}_i,

which we can solve with respect to :math:`\nabla_{\boldsymbol{x}}{\varphi}_i`:

.. math::
        
        \nabla_{\boldsymbol{x}}{\varphi}_i = J^{-1}\cdot\nabla_{\boldsymbol{X}}{\tilde{\varphi}}_r{\thinspace .}
        

On the reference cell, :math:`{\varphi}_i(\boldsymbol{x}) = {\tilde{\varphi}}_r(\boldsymbol{X})`, so

.. math::
        
        \nabla_{\boldsymbol{x}}{\tilde{\varphi}}_r(\boldsymbol{X}) = J^{-1}(\boldsymbol{X})\cdot\nabla_{\boldsymbol{X}}{\tilde{\varphi}}_r(\boldsymbol{X}){\thinspace .}
        

This means that we have the following transformation of the
integral in the physical domain to its counterpart over the reference cell:

.. math::
        
        \int_{\Omega}^{(e)} a(\boldsymbol{x})\nabla_{\boldsymbol{x}}{\varphi}_i\cdot\nabla_{\boldsymbol{x}}{\varphi}_j{\, \mathrm{d}x}
        \int_{\tilde\Omega^r} a(\boldsymbol{x}(\boldsymbol{X}))(J^{-1}\cdot\nabla_{\boldsymbol{X}}{\tilde{\varphi}}_r)\cdot
        (J^{-1}\cdot\nabla{\tilde{\varphi}}_s)\det J{\, \mathrm{d}X}
        

Numerical integration  (2)
--------------------------

Integrals are normally computed by numerical integration rules.
For multi-dimensional cells, various families of rules exist.
All of them are similar to what is shown in 1D:
:math:`\int f {\, \mathrm{d}x}\approx \sum_jw_if(\boldsymbol{x}_j)`, where :math:`w_j` are weights and
:math:`\boldsymbol{x}_j` are corresponding points.

The file `numint.py <http://tinyurl.com/nm5587k/fem/numint.py>`__ contains the functions
``quadrature_for_triangles(n)`` and ``quadrature_for_tetrahedra(n)``,
which returns lists of points and weights corresponding to integration
rules with ``n`` points over the reference triangle
with vertices :math:`(0,0)`, :math:`(1,0)`, :math:`(0,1)`, and the reference tetrahedron
with vertices :math:`(0,0,0)`, :math:`(1,0,0)`, :math:`(0,1,0)`, :math:`(0,0,1)`,
respectively. For example, the first two rules for integration over
a triangle have 1 and 3 points:

.. code-block:: ipy

        >>> import numint
        >>> x, w = numint.quadrature_for_triangles(num_points=1)
        >>> x
        [(0.3333333333333333, 0.3333333333333333)]
        >>> w
        [0.5]
        >>> x, w = numint.quadrature_for_triangles(num_points=3)
        >>> x
        [(0.16666666666666666, 0.16666666666666666),
         (0.66666666666666666, 0.16666666666666666),
         (0.16666666666666666, 0.66666666666666666)]
        >>> w
        [0.16666666666666666, 0.16666666666666666, 0.16666666666666666]

Rules with 1, 3, 4, and 7 points over the triangle will exactly integrate
polynomials of degree 1, 2, 3, and 4, respectively.
In 3D, rules with 1, 4, 5, and 11 points over the tetrahedron will
exactly integrate polynomials of degree 1, 2, 3, and 4, respectively.

Convenient formulas for P1 elements in 2D
-----------------------------------------

We shall now provide some formulas for piecewise linear :math:`{\varphi}_i` functions
and their integrals *in the physical coordinate system*.
These formulas make it convenient to compute with P1 elements without
the need to work in the reference coordinate system and deal with mappings
and Jacobians.
A lot of computational and algorithmic details are hidden by this approach.

Let :math:`\Omega^{(e)}` be cell number :math:`e`, and let the three vertices
have global vertex numbers :math:`I`, :math:`J`, and :math:`K`.
The corresponding coordinates are
:math:`(x_{I},y_{I})`, :math:`(x_{J},y_{J})`, and :math:`(x_{K},y_{K})`.
The basis function :math:`{\varphi}_I` over :math:`\Omega^{(e)}` have the explicit
formula

.. _Eq:fem:approx:fe:2D:phi:I:

.. math::
   :label: fem:approx:fe:2D:phi:I
        
        {\varphi}_I (x,y) = \frac{1}{2}\Delta \left( \alpha_I + \beta_Ix
        + \gamma_Iy\right),
        
        

where

.. _Eq:fem:approx:fe:2D:phi:alpha:I:

.. math::
   :label: fem:approx:fe:2D:phi:alpha:I
        
        \alpha_I = x_{J}y_{K} - x_{K}y_{J},
        
        

.. _Eq:fem:approx:fe:2D:phi:beta:I:

.. math::
   :label: fem:approx:fe:2D:phi:beta:I
          
        \beta_I = y_{J} - y_{K},
        
        

.. _Eq:fem:approx:fe:2D:phi:gamma:I:

.. math::
   :label: fem:approx:fe:2D:phi:gamma:I
          
        \gamma_I = x_{K} - x_{J},
        
        

.. math::
          
        2\Delta = \det\left(\begin{array}{rrr}
        1  x_{I}  y_{I} 
        

.. math::
          
        1  x_{J}  y_{J} 
        

.. _Eq:fem:approx:fe:2D:phi:Delta:

.. math::
   :label: fem:approx:fe:2D:phi:Delta
          
        1  x_{K}  y_{K} \end{array}\right)
        {\thinspace .}
        
        

The quantity :math:`\Delta` is the area of the cell.

The following formula is often convenient when computing element matrices
and vectors:

.. _Eq:fem:approx:fe:2D:phi:integral:

.. math::
   :label: fem:approx:fe:2D:phi:integral
        
        \int_{\Omega^{(e)}} {\varphi}_I^{p}{\varphi}_J^{q}{\varphi}_K^{r} dx dy =
        {p!q!r!\over (p+q+r+2)!}2\Delta
        
        {\thinspace .}
        

(Note that the :math:`q` in this formula is not to be mixed with the :math:`q(e,r)`
mapping of degrees of freedom.)

As an example, the element matrix entry
:math:`\int_{\Omega^{(e)}} {\varphi}_I{\varphi}_J{\, \mathrm{d}x}`
can be computed by setting
:math:`p=q=1` and :math:`r=0`, when :math:`I\neq J`, yielding :math:`\Delta/12`, and
:math:`p=2` and :math:`q=r=0`, when :math:`I=J`, resulting in :math:`\Delta/6`.
We collect these numbers in a local element matrix:

.. math::
        
        \frac{\Delta}{12}
        \left[\begin{array}{ccc}
        2 & 1 & 1\\ 
        1 & 2 & 1\\ 
        1 & 1 & 2
        \end{array}\right]
        

The common element matrix entry :math:`\int_{\Omega^{(e)}} \nabla{\varphi}_I\cdot\nabla{\varphi}_J{\, \mathrm{d}x}`, arising from a Laplace term :math:`\nabla^2u`, can also easily be
computed by the formulas above. We have

.. math::
         \nabla{\varphi}_I\cdot\nabla{\varphi}_J =
        \frac{\Delta^2}{4}(\beta_I\beta_J + \gamma_I\gamma_J) = \hbox{const},

so that the element matrix entry becomes
:math:`\frac{1}{4}\Delta^3(\beta_I\beta_J + \gamma_I\gamma_J)`.

From an implementational point of view, one will work with local vertex
numbers :math:`r=0,1,2`, parameterize the coefficients in the basis
functions by :math:`r`, and look up vertex coordinates through :math:`q(e,r)`.

Similar formulas exist for integration of P1 elements in 3D.

