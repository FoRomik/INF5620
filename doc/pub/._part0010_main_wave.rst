.. !split


.. _wave:app:exer:

Exercises  (4)
==============



.. --- begin exercise ---


.. _wave:app:exer:string:discont:

Exercise 11: Simulate waves on a non-homogeneous string
-------------------------------------------------------

Simulate waves on a string that consists of two materials with
different density. The tension in the string is constant, but the
density has a jump at the boundary between the materials.
Experiment
with different sizes of the jump to derive a couple of demonstrations
that visualizes the effect on the waves of having a two-material
string.

.. --- begin hint in exercise ---


*Hint.* the section :ref:`wave:app:string`
explains how the density enters the mathematical model. Modify the
``wave1D_u0_sv.py`` code to incorporate the tension and a function
specifying the density.

.. --- end hint in exercise ---

Filename: ``wave1D_u0_sv_discont.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:string:damping:

Exercise 12: Simulate damped waves on a string
----------------------------------------------

Formulate a mathematical model for damped waves on a string.
Use data from the section :ref:`wave:pde1:guitar:data`, and
tune the damping parameter so that the string is very close to
the rest state after 15 s. Make a movie of the wave motion.
Filename: ``wave1D_u0_sv_damping.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:rod:

Exercise 13: Simulate elastic waves in a rod
--------------------------------------------

A hammer hits the end of an elastic rod. The exercise is to simulate
the resulting wave motion using the model :eq:`wave:app:elastic:rod:eq`
from the section :ref:`wave:app:elastic:rod`. Let the rod have length
:math:`L` and let the boundary :math:`x=L` be stress free so that :math:`\sigma_{xx}=0`,
implying that :math:`\partial u/\partial x=0`. The left end :math:`x=0` is
subject to a strong stress pulse (the hammer), modeled as


.. math::
         \sigma_{xx}(t) = \left\lbrace\begin{array}{ll}
        S,& 0 < t \leq t_s,\\ 
        0, & t > t_s
        \end{array}\right.
        

The corresponding condition on :math:`u` becomes :math:`u_x= S/E`
for :math:`t\leq t_s` and zero afterwards (recall that
:math:`\sigma_{xx} = Eu_x`). This is a non-homogeneous
Neumann condition, and you will need to approximate this condition
and combine it with the scheme (the ideas and manipulations follow
closely the handling of a non-zero initial condition
:math:`u_t=V` in wave PDEs or the corresponding
second-order ODEs for vibrations).
Filename: ``wave_rod.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:pulse1D:analysis:

Exercise 14: Explain why numerical noise occurs
-----------------------------------------------

The experiments performed in :ref:`wave:app:exer:pulse1D` shows
considerable numerical noise in the form of non-physical waves,
especially for :math:`s_f=4` and the plug pulse or the half a "cosinehat"
pulse. The noise is much less visible for a Gaussian pulse. Run the
case with the plug and half a "cosinehat" pulses for :math:`s_f=1`, :math:`C=0.9,
0.25`, and :math:`N_x=40,80,160`. Use the numerical dispersion relation to
explain the observations.
Filename: ``pulse1D_analysis.pdf``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:pulse1D:harmonic:

Exercise 15: Investigate harmonic averaging in a 1D model
---------------------------------------------------------

Will harmonic averaging of the wave velocity give better numerical
results for the case :math:`s_f=4` in :ref:`wave:app:exer:pulse1D`?
Filenames: ``pulse1D_harmonic.pdf``, ``pulse1D_harmonic.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:exer:3D:f77:cy:efficiency:

Exercise 16: Test the efficiency of compiled loops in 3D
--------------------------------------------------------

Extend the ``wave2D_u0.py`` code and the Cython, Fortran, and C versions to 3D.
Set up an efficiency experiment to determine the relative efficiency of
pure scalar Python code, vectorized code, Cython-compiled loops,
Fortran-compiled loops, and C-compiled loops.
Normalize the CPU time for each mesh by the fastest version.
Filename: ``wave3D_u0.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:tsunami1D:

Exercise 17: Earthquake-generated tsunami in a 1D model
-------------------------------------------------------

A subsea earthquake leads to an immediate lift of the surface, see
Figure :ref:`wave:app:fig:1D:tsunami:flat`. The initial surface shape :math:`I(x)` is symmetric
around :math:`x=0` and will split into two tsunamis, one traveling to the right
and one to the left, as depicted in Figure :ref:`wave:app:fig:1D:tsunami:2waves`.
Since the water surface will remain symmetric with respect to :math:`x=0`, given that
the outgoing wave to the left does not come back due to reflection,
we insert a boundary :math:`x=0` and impose a symmetry condition there: :math:`\partial\eta\ 
\partial x =0`, where :math:`\eta(x,t)` is the elevation of the water surface.
We are not interested in what happens with the right-going wave after
it hits the right boundary, so whether we impose
:math:`\eta =0` or :math:`\partial\eta /\partial x=0` at that boundary is not of importance.

The shape of the initial surface can be taken as a
Gaussian function,


.. math::
        
        I(x;I_0,I_a,I_m,I_s) =
        I_0 + I_a\exp{\left(-\left(\frac{x-I_m}{I_s}\right)^2\right)},
        

with :math:`I_m=0` reflecting the location of the peak of :math:`I(x)` and
:math:`I_s` being a measure of the width of the function :math:`I(x)`
(:math:`I_s` is :math:`\sqrt{2}` times the standard deviation of the familiar
normal distribution curve).

Set up the relevant one-dimensional, linear, wave equation for :math:`\eta`,
assuming long waves of small amplitude in comparison with the depth,
as described in the section :ref:`wave:app:sw:2D`. Import the ``viz`` method
from the ``wave1D.py`` program and make a call to it to solve the
present tsunami problem.  The constant speed of the right-going wave is
:math:`c=\sqrt{gH}` and use this quantity to determine a suitable time :math:`T`
for when the wave hits the right boundary and the simulation is to be
stopped. An alternative is to check in ``plot_u`` if :math:`u[-2]` is
significantly different from 0 and then return ``True`` to stop
the simulation.


.. _wave:app:fig:1D:tsunami:flat:

.. figure:: fig-wave/earthquake_tsunami_flat.png
   :width: 800

   *Sketch of initial water surface due to a subsea earthquake*



.. _wave:app:fig:1D:tsunami:2waves:

.. figure:: fig-wave/earthquake_tsunami_2waves.png
   :width: 800

   *An initial surface elevation is split into two waves*

Filename: ``tsunami1D_flat.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:tsunami1D:radiation:

Exercise 18: Implement an open boundary condition
-------------------------------------------------


.. index:: radiation condition


.. index:: open boundary condition


To enable the right-going wave in :ref:`wave:app:exer:tsunami1D`
to leave the computational domain and travel undisturbed through
the boundary, one can in a one-dimensional problem impose the
following condition, called a *radiation condition* or
*open boundary condition*:


.. math::
   :label: wave:app:exer:tsunami1D:radiation:eq
        
        \frac{\partial\eta}{\partial t} + c\frac{\partial\eta}{\partial x} = 0,
        
        

at the right boundary :math:`x=x_R`. The parameter :math:`c` is the wave velocity,
which for the model in :ref:`wave:app:exer:tsunami1D`
is :math:`c=\sqrt{gH(x_R)}`.

Show that :eq:`wave:app:exer:tsunami1D:radiation:eq` accepts
a solution :math:`\eta = g_R(x-ct)`, but not :math:`\eta = g_L(x+ct)`. This means
that :eq:`wave:app:exer:tsunami1D:radiation:eq` will allow any
right-going wave :math:`g_R(x-ct)` pass through the boundary.

The condition :eq:`wave:app:exer:tsunami1D:radiation:eq` can be
discretized by centered differences at the spatial end point :math:`i=N_x`,
corresponding to :math:`x=x_R`:


.. math::
   :label: wave:app:exer:tsunami1D:radiation:eq:op
        
        [D_{2t}\eta + cD_{2x}\eta =0]^n_{N_x}
        
        \thinspace .
        

Eliminate the fictitious value :math:`\eta_{N_x+1}^n` by using
the discrete equation at the same point :math:`(n,N_x)`.
The equation for the first step, :math:`\eta_i^1`, is in principal affected,
but we can then use the condition :math:`\eta^1_{N_x}=0` since the wave
has not yet reached the right boundary.

Modify the ``solver`` function in the ``wave1D.py`` program to
incorporate the condition :eq:`wave:app:exer:tsunami1D:radiation:eq:op`.
Demonstrate that the tsunami travels through the domain and out of
the right boundary without leaving any reflections behind.
Make a nose test for checking that after a certain time :math:`T`, the surface is
flat.

*Remark 1.* The condition :eq:`wave:app:exer:tsunami1D:radiation:eq`
works perfectly in 1D when :math:`c` is known. In 2D and 3D, however, the
condition reads :math:`\eta_t + c_x\eta_x + c_y\eta_y=0`, where :math:`c_x` and
:math:`c_y` are the wave speeds in the :math:`x` and :math:`y` directions, and estimating
these components (i.e., the direction of the wave) is often
challenging. Other methods are normally used in 2D and 3D to
let waves move out of a computational domain.

*Remark 2.* A radiation or open boundary condition at the left
boundary takes the same form as :eq:`wave:app:exer:tsunami1D:radiation:eq`,
except that there is a minus sign in front of the :math:`c\eta_x`
term. One can easily show that with this sign, the condition accepts
left-going waves of the form :math:`\eta = g_L(x+ct)`.
Filename: ``wave1D_Ropen.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:tsunami1D:hill:

Exercise 19: Earthquake-generated tsunami over a subsea hill
------------------------------------------------------------

We consider the same problem as in :ref:`wave:app:exer:tsunami1D`, but now there is a hill at the sea
bottom, see Figure :ref:`wave:app:fig:1D:tsunami:hill`. The wave speed
:math:`c=\sqrt{gH(x)} = \sqrt{g(H_0-B(x))}` will then be reduced in the
shallow water above the hill.


.. _wave:app:fig:1D:tsunami:hill:

.. figure:: fig-wave/earthquake_tsunami_hill.png
   :width: 800

   *Sketch of an earthquake-generated tsunami passing over a subsea hill*


One possible form of the
hill is a Gaussian function,


.. math::
   :label: wave:app:exer:tsunami1D:hill:Gauss
        
        B(x;B_0,B_a,B_m,B_s) =
        B_0 + B_a\exp{\left(-\left(\frac{x-B_m}{B_s}\right)^2\right)},
        
        

but many other shapes are also possible, e.g., a "cosine hat" where


.. math::
   :label: wave:app:exer:tsunami1D:hill:cohat
        
        B(x; B_0, B_a, B_m, B_s) = B_0 + B_a\cos{\left( \pi\frac{x-B_m}{2B_s}\right)},
        
        

when :math:`x\in [B_m - B_s, B_m + B_s]` while :math:`B=B_0` outside this
interval.

Also an abrupt construction may be tried:

.. math::
   :label: wave:app:exer:tsunami1D:hill:box
        
        B(x; B_0, B_a, B_m, B_s) = B_0 + B_a,
        
        

for :math:`x\in [B_m - B_s, B_m + B_s]` while :math:`B=B_0` outside this
interval.


Visualize both the bottom topography and the
water surface elevation (this requires modifying ``plot_u``).
Allow for a flexible choice of bottom shape,
:eq:`wave:app:exer:tsunami1D:hill:Gauss`,
:eq:`wave:app:exer:tsunami1D:hill:cohat`,
:eq:`wave:app:exer:tsunami1D:hill:box`, or :math:`B(x)=B_0` (flat)
and see if the waves become
qualitatively different. Also investigate the amount of numerical
noise that is triggered by rapid changes in the bottom function
and a small water gap at the top of the hill, and how this noise
varies with the mesh resolution :math:`\Delta x`.
Use either the open boundary condition from
:ref:`wave:app:exer:tsunami1D:radiation`, or set :math:`\eta =0` at
the right boundary and stop the simulation when the wave hits this
boundary.
Filename: ``tsunami1D_hill.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:wave2D:Neumann:

Exercise 20: Implement Neumann conditions in 2D
-----------------------------------------------

Modify the `wave2D_u0.py </wave2D_u0/wave2D_u0.py>`_
program, which solves the 2D wave equation :math:`u_{tt}=c^2(u_{xx}+u_{yy})`
with constant wave velocity :math:`c` and :math:`u=0` on the boundary, to have
Neumann boundary conditions: :math:`\partial u/\partial n=0`.
Include both scalar code (for debugging and reference) and
vectorized code (for speed).

To test the code, use :math:`u=1.2` as solution (:math:`I(x,y)=1.2`, :math:`V=f=0`, and
:math:`c` arbitrary), which should be exactly reproduced with any mesh
as long as the stability criterion is satisfied.
Another test is to use the plug-shaped pulse
in the ``pulse`` function from the section :ref:`wave:pde2:software`
and the `wave1D_dn_vc.py <http://tinyurl.com/jvzzcfn/wave/wave1D_dn_vc.py>`_
program. This pulse
is exactly propagated in 1D if :math:`c\Delta t/\Delta x=1`. Check
that also the 2D program can propagate this pulse exactly
in :math:`x` direction (:math:`c\Delta t/\Delta x=1`, :math:`\Delta y` arbitrary)
and :math:`y` direction (:math:`c\Delta t/\Delta y=1`, :math:`\Delta x` arbitrary).
Filename: ``wave2D_n.py``.

.. --- end exercise ---





.. --- begin exercise ---


Exercise 21: Implement a convergence test for a 2D code
-------------------------------------------------------

Use the following manufactured solution to verify a 2D code
for :math:`u_{tt}=c^2(u_{xx}+u_{yy})` in the spatial domain
:math:`[0,L_x]\times [0,L_y]`, with :math:`\partial u/\partial n` on the boundary
(cf. :ref:`wave:app:exer:wave2D:Neumann`):


.. math::
   :label: wave:app:exer:standing:waves
        
        {u_{\small\mbox{e}}}(x,y,t)=\cos(m_xx\pi/L_x)\cos(m_yy\pi/L_y)\cos (\omega t),
        
        

Here, :math:`m_x` and :math:`m_y` are freely chosen integers such that
the wave lengths in the :math:`x` and :math:`y` directions become :math:`2L_x/m_x` and
:math:`2L_y/m_y`, respectively. The parameter :math:`\omega` is calculated
by inserting :eq:`wave:app:exer:standing:waves` in the wave equation.
The solution
:eq:`wave:app:exer:standing:waves` is a *standing wave*
with :math:`\partial u/\partial n=0`.
This :math:`{u_{\small\mbox{e}}}` is not an exact solution of the discrete equations so the
test must be based on empirical analysis of the convergence.
The error :math:`E` is assumed to behave like


.. math::
        
        E = C_t\Delta t^2 + C_x\Delta x^2 + C_y\Delta y^2,
        

for some constants :math:`C_t`, :math:`C_x`, and :math:`C_y`.
Choose :math:`\Delta t=F_th`, :math:`\Delta x =F_xh`, and :math:`\Delta y=F_yh`, where
:math:`h` is a common discretization parameter to be varied (:math:`h\rightarrow 0`)
and :math:`F_t`, :math:`F_x`, and :math:`F_y` are freely chosen constant factors
compatible with the stability criterion in 2D. The error can then
be expressed as


.. math::
        
        E = Ch^2,
        

where :math:`C=C_xF_t^2 + C_yF_x^2 + C_tF_t^2`.
Perform experiments with decreasing :math:`h`, compute :math:`E`, and verify that
:math:`E/h^2` is approximately constant.
Filename: ``wave2D_n2.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:tsunami2D:hill:

Exercise 22: Earthquake-generated tsunami over a 3D hill
--------------------------------------------------------

This exercise extends :ref:`wave:app:exer:tsunami1D:hill`
to a three-dimensional wave phenomenon, governed by the 2D PDE
:eq:`wave:app:sw:2D:eta:2ndoeq`. We assume that the earthquake
arise from a fault along the line :math:`x=0` in the :math:`xy`-plane so that
the initial lift of the surface can be taken as :math:`I(x)` in
:ref:`wave:app:exer:tsunami1D:hill`. That is, a plan wave is
propagating to the right, but will experience bending because of
the bottom.

The bottom shape is now a function of :math:`x` and :math:`y`.
An "elliptic" Gauss function in two dimensions, with its peak
at :math:`(B_{mx}, B_{my})`, generalizes
:eq:`wave:app:exer:tsunami1D:hill:Gauss`:


.. math::
   :label: wave:app:exer:tsunami2D:hill:Gauss
        
        B(x;B_0,B_a,B_{mx}, B_{my} ,B_s, b) =
        B_0 + B_a\exp{\left(-\left(\frac{x-B_{mx}}{B_s}\right)^2
        -\left(\frac{y-B_{my}}{bB_s}\right)^2\right)},
        
        

where :math:`b` is a scaling parameter: :math:`b=1` gives a circular Gaussian
function with circular contour lines, while :math:`b\neq 1` gives an elliptic
shape with elliptic contour lines.

The "cosine hat" :eq:`wave:app:exer:tsunami1D:hill:cohat` can also be
generalized to


.. math::
   :label: wave:app:exer:tsunami2D:hill:cohat
        
        B(x; B_0, B_a, B_{mx}, B_{my}, B_s) =
        B_0 + B_a\cos{\left( \pi\frac{x-B_{mx}}{2B_s}\right)}
        \cos{\left( \pi\frac{y-B_{my}}{2B_s}\right)},
        
        

when :math:`0 \leq \sqrt{x^2+y^2} \leq B_s` and :math:`B=B_0` outside this circle.

A box-shaped obstacle means that

.. math::
   :label: wave:app:exer:tsunami2D:hill:box
        
        B(x; B_0, B_a, B_m, B_s, b) = B_0 + B_a
        
        

for :math:`x` and :math:`y` inside a rectangle

.. math::
         B_{mx}-B_s \leq  x \leq B_{mx} + B_s,\quad
        B_{my}-bB_s \leq  y \leq B_{my} + bB_s,
        

and :math:`B=B_0` outside this rectangle.
The :math:`b` parameter controls the rectangular shape of the cross section of
the box.

Note that the initial condition and the listed bottom shapes are
symmetric around the line :math:`y=B_{my}`. We therefore expect the
surface elevation also to be symmetric with respect to this line.
This means that we can halve the computational domain by working
with  :math:`[0,L_x]\times [0, B_{my}]`. Along the upper boundary, :math:`y=B_{my}`,
we must impose the symmetry condition :math:`\partial \eta/\partial n=0`.
Such a symmetry condition (:math:`-\eta_x=0`)
is also needed at the :math:`x=0` boundary because
the initial condition has a symmetry here. At the lower boundary
:math:`y=0` we also set a Neumann condition (which becomes :math:`-\eta_y=0`).
At the right boundary :math:`x=L_x`
one can either implement a radiation (or open boundary) condition
as in :ref:`wave:app:exer:tsunami1D:radiation` or just set
:math:`\eta = 0` or use a reflecting condition :math:`\partial\eta/\partial n
=\eta_x =0`.

Visualize the surface elevation.  Investigate how different hill shapes,
different sizes of the water gap above the hill, and different
resolutions :math:`\Delta x` and :math:`\Delta t` influence
the numerical quality of the solution.
Filename: ``tsunami2D_hill.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:tsunami2D:hill:compiled:

Exercise 23: Implement loops in compiled languages
--------------------------------------------------

Extend the program from :ref:`wave:app:exer:tsunami2D:hill` such
that the loops over mesh points, inside the time loop, are
implemented in compiled languages.
Consider implementations in
Cython, Fortran via ``f2py``, C via Cython, C via ``f2py``, C/C++ via Instant,
and C/C++ via ``scipy.weave``.
Perform efficiency experiments to investigate the relative performance
of the various implementations. It is often advantageous to normalize
CPU times by the fastest method on a given mesh.
Filename: ``tsunami3D_hill_compiled.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:tsunami2D:hill:compiled2:

Exercise 24: Write a complete program in Fortran or C
-----------------------------------------------------

As an extension of :ref:`wave:app:exer:tsunami2D:hill:compiled2`,
write the whole ``tsunami3D_hill.py`` code in Fortran, C, or C++ to check
if there is more to be won with respect to efficiency in large-scale
problems. This exercise will also illustrate the difference in
program development with Fortran/C/C++ and Python.
Filename: ``tsunami3D_hill.f``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:tsunami:hill:viz:matplotlib:

Exercise 25: Investigate Matplotlib for visualization
-----------------------------------------------------

Play with native Matplotlib code for visualizing 2D
solutions of the wave equation with variable wave velocity.
See if there
are effective ways to visualize both the solution and the wave
velocity.
Filename: ``tsunami2D_hill_mpl.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:tsunami:hill:viz:packages:

Exercise 26: Investigate visualization packages
-----------------------------------------------

Explore one or more of the programs below
for visualizing solutions of 2D or 3D wave equations with variable
wave velocity. Try to visualize
both the solution and the wave velocity in the same plot.

  * `Mayavi <http://code.enthought.com/projects/mayavi/>`_

  * `Paraview <http://www.paraview.org/>`_

  * `OpenDX <http://www.opendx.org/>`_

Filename: ``tsunami2D_hill_mayavi.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:tsunami:hill:harmonic:

Exercise 27: Investigate harmonic vs arithmetic mean
----------------------------------------------------

In :ref:`wave:app:exer:tsunami1D:hill`, investigate if
there is significant difference between the harmonic mean
:eq:`wave:pde2:var:c:mean:harmonic` and the standard
arithmetic mean :eq:`wave:pde2:var:c:mean:arithmetic`.
Use extreme cases for the investigations where the subsea hill is
close to the flat surface. Pay particular attention to the
box-shaped obstruction :eq:`wave:app:exer:tsunami1D:hill:box` since
it has discontinuities.

Repeat the investigations for the case of a box-shaped obstruction
in the 2D model from :ref:`wave:app:exer:tsunami2D:hill`.

*Remark.* With a small gap between the obstruction and the free surface,
and with abrupt changes in the bottom shape, the model PDE does not
necessarily describe the wave motion in an accurate or qualitatively correct
way.
Filename: ``tsunami2D_hill_harmonic.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:seismic2D:

Exercise 28: Simulate seismic waves in 2D
-----------------------------------------

The goal of this exercise is to simulate seismic waves using the
PDE model :eq:`wave:app:acoustic:seismic:accoustic1a` in a
2D :math:`xz` domain with geological layers.
Introduce :math:`m` horizontal layers of thickness :math:`h_i`, :math:`i=0,\ldots,m-1`.
Inside layer number :math:`i` we have a vertical wave velocity :math:`c_{z,i}`
and a horizontal wave velocity :math:`c_{h,i}`. Make a program
for simulating such 2D waves. Test it on a case with 3 layers where


.. math::
         c_{z,0}=c_{z,1}=c_{z,2},\quad c_{h,0}=c_{h,2},\quad c_{h,1} \ll c_{h,0}
        \thinspace .
        

Let :math:`s` be a localized point source at the middle of the Earth's surface
(the upper boundary)
and investigate how the resulting wave travels through the medium.
The source can be a localized Gaussian peak that oscillates in
time for some time interval.
Place the boundaries far enough from the expanding wave so that the
boundary conditions do not disturb the wave. Then the type of
boundary condition does not matter, except that we physically need
to have :math:`p=p_0`, where :math:`p_0` is the atmospheric pressure,
at the upper boundary.
Filename: ``seismic2D.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:acoustics:

Project 29: Modeling 3D acoustic waves in a room
------------------------------------------------

The equation for sound waves in air is derived in the section :ref:`wave:app:sound`
and reads


.. math::
         p_{tt} = c^2\nabla^2 p,

where :math:`p(x,y,z,t)` is the pressure and :math:`c`
is the speed of sound, taken as 340 m/s.

.. air at a room temperature 20 C, :math:`p_0` is reference pressure in the

.. air, typically 1 atm (approximately :math:`10^5` Pa), and :math:`\varrho_0` is

.. the density of air, taken as :math:`1.225\mbox{ kg/m}^3`.

However, sound is absorbed in the air due to relaxation of molecules
in the gas. A model for simple relaxation, valid for gases consisting
only of one type of molecules, is a term :math:`c^2\tau_s\nabla^2 p_t` in
the PDE, where :math:`\tau_s` is the relaxation time. If we generate sound
from, e.g., a loudspeaker in the room, this sound source must also
be added to the governing equation.

The PDE with the mentioned type of damping and source then becomes


.. math::
        
        p_tt = c^2\nabla^p + c^2\tau_s\nabla^2 p_t + f,
        

where :math:`f(x,y,z,t)` is the source term.

The walls can absorb some sound. A possible model is to have a "wall layer"
(thicker than the physical wall)
outside the room where :math:`c` is changed such that some of the wave energy
is reflected and some is absorbed in the wall. The absorption of
energy can be taken care of by adding a damping term :math:`bp_t` in
the equation:


.. math::
        
        p_tt + bp_t = c^2\nabla^p + c^2\tau_s\nabla^2 p_t + f{\thinspace .}
        

Typically, :math:`b=0` in the room and :math:`b>0` in the wall. A discontinuity in :math:`b`
or :math:`c` will give rise to reflections. It can be wise to use a constant
:math:`c` in the wall to control reflections because of the discontinuity between
:math:`c` in the air and in the wall, while :math:`b` is gradually increased
as we go into the wall to avoid reflections because of rapid changes in :math:`b`.
At the outer boundary of the wall the condition :math:`p=0` or :math:`\partial p/\partial n=0` can be imposed. The waves should anyway be approximately dampened
to :math:`p=0` this far out in the wall layer.

There are two strategies for discretizing the :math:`\nabla^2 p_t` term: using
a center difference between times :math:`n+1` and :math:`n-1` (if the equation is
sampled at level :math:`n`), or use a one-sided difference based on levels :math:`n`
and :math:`n-1`. The latter has the advantage of not leading to any equation system,
while the former is second-order accurate as the scheme for the
simple wave equation :math:`p_tt = c^2\nabla^2 p`. To avoid an equation system,
go for the one-sided difference such that the overall scheme becomes
explicit and only of first order in time.

Develop a 3D solver for the specified PDE and introduce a wall layer.
Test the solver with the method of manufactured solutions. Make some
demonstrations where the wall reflects and absorbs the waves (reflection
because of discontinuity in :math:`b` and absorption because of growing :math:`b`).
Experiment with the impact of the :math:`\tau_s` parameter.
Filename: ``acoustics.py``.

.. --- end exercise ---





.. --- begin exercise ---


.. _wave:app:exer:advec1D:

Project 30: Solve a 1D transport equation
-----------------------------------------

We shall study the wave equation


.. math::
   :label: wave:app:exer:advec1D:ueq
        
        u_t + cu_x = 0,\quad x\in (0,L],\ t\in (0, T],
        
        

with initial condition


.. math::
        
        u(x,0) = I(x),\quad x\in [0,L],
        

and *one* periodic boundary condition


.. math::
        
        u(0,t) = u(L,t)
        \thinspace .
        

This boundary condition means that what goes out of the domain at :math:`x=L`
comes in at :math:`x=0`. Roughly speaking,
we need only one boundary condition because of
the spatial derivative is of first order only.

*Physical interpretation.* The parameter :math:`c` can be constant or variable, :math:`c=c(x)`. The
equation :eq:`wave:app:exer:advec1D:ueq` arises in *transport*
problems where a quantity :math:`u`, which could be temperature or
concentration of some contaminant, is transported with the velocity
:math:`c` of a fluid. In addition to the transport imposed by "travelling with
the fluid", :math:`u` may also be transported by diffusion (such as
heat conduction or Fickian diffusion), but we have in
the model :math:`u_t + cu_x` assumed that diffusion effects are negligible,
which they often are.


A widely used numerical scheme for :eq:`wave:app:exer:advec1D:ueq`
applies a forward difference in time and a backward difference in
space when :math:`c>0`:


.. math::
   :label: wave:app:exer:advec1D:u:upwind
        
        [D_t^+ u + cD_x^-u = 0]_i^n
        
        \thinspace .
        

For :math:`c<0` we use a forward difference in space: :math:`[cD_x^+u]_i^n`.







We shall hereafter assume that :math:`=c(x)>0`.




To compute :eq:`wave:app:exer:advec1D:u:avar:sol` we need to integrate
:math:`1/c` to obtain :math:`C` and then compute the inverse of :math:`C`.

The inverse function computation can be easily done if we first think
discretely. Say we have some function :math:`y=g(x)` and seeks its inverse.
Plotting :math:`(x_i,y_i)`, where :math:`y_i=g(x_i)` for some mesh points :math:`x_i`,
displays :math:`g` as a function of :math:`x`.
The inverse function is simply :math:`x` as a function of :math:`g`, i.e., the
curve with points :math:`(y_i,x_i)`. We can therefore quickly compute points
at the curve of the inverse function. One way of extending these
points to a continuous function is to assume a linear variation
(known as linear interpolation)
between the points (which actually means to draw straight lines between
the points, exactly as done by a plotting program).

The function ``wrap2callable`` in ``scitools.std`` can take a set of points
and return a continuous function that corresponds to linear
variation between the points. The computation of the inverse of a
function :math:`g` on :math:`[0,L]` can then be done by


.. code-block:: python

        def inverse(g, domain, resolution=101):
            x = linspace(domain[0], domain[L], resolution)
            y = g(x)
            from scitools.std import wrap2callable
            g_inverse = wrap2callable((y, x))
            return g_inverse


To compute :math:`C(x)` we need to integrate :math:`1/c`, which can be done by
a Trapezoidal rule. Suppose we have computed :math:`C(x_i)` and need
to compute :math:`C(x_{i+1})`. Using the Trapezoidal rule with :math:`m` subintervals
over the integration domain :math:`[x_i,x_{i+1}]` gives


.. math::
   :label: wave:app:exer:advec1D:C:recursion
        
        C(x_{i+1}) = C(x_i) + \int_{x_i}^{x_{i+1}} \frac{dx}{c}
        \approx h\left(
        \frac{1}{2}\frac{1}{c(x_i)} + \frac{1}{2}\frac{1}{c(x_{i+1})}
        + \sum_{j=1}^{m-1} \frac{1}{c(x_i + jh)}\right),
        
        

where :math:`h=(x_{i+1}-x_i)/m` is the length of the subintervals used
for the integral over :math:`[x_i,x_{i+1}]`.
We observe that :eq:`wave:app:exer:advec1D:C:recursion` is a
*difference equation* which we can solve by repeatedly
applying :eq:`wave:app:exer:advec1D:C:recursion` for
:math:`i=0,1,\ldots,N_x-1` if a mesh :math:`x_0,x_,\ldots,x_{N_x}` is prescribed.
Note that :math:`C(0)=0`.





.. Idea: one thing at a time: no f2py intro for du/dn, just u=0 to make it

.. simple


.. 1D open boundary cond, try u=0 and du/dn=0 combination too

.. 1D correction terms


.. migrate to compiled: idea is to keep it very simple (u=0 cond), or maybe

.. do it in 1D? No, better in 2D, but have f(x,y) as an array (no callback)

.. 2D

.. 2D code simple, u=0, constant coeff

.. 2D visualization with mayavi2, matplotlib, gnuplot (scitools), + mpeg/avi

.. 2D code vectorized

.. 2D code cython

.. 2D code f2py

.. 2D code instant


.. Exer: f2py w/callback to Python for f and inlet U_0


.. 3D

.. 3D code vectorized

.. 3D code cython

.. main point: visualization with paraview or similar


.. apps:

.. shallow water, 1D and 2D

.. string

.. pipe

.. 3D acoustic

.. elastic in the ground, div u

.. blood 1D



*a)* Show that under the assumption of :math:`a=\hbox{const}`,


.. math::
   :label: wave:app:exer:advec1D:uexact
        
        u(x,t) = I(x - ct)
        
        

fulfills the PDE as well as the initial and boundary condition
(provided :math:`I(0)=I(L)`).

*b)* Set up a computational algorithm and implement it in a function.
Assume :math:`a` is constant and positive.

*c)* Test implementation by using the remarkable property that
the numerical solution is exact at the mesh points if
:math:`\Delta t = c^{-1}\Delta x`.

*d)* Make a movie comparing the numerical and exact solution for the
following two choices of initial conditions:


.. math::
   :label: wave:app:exer:advec1D:I:sin
        
         I(x) = \left\lbrack\sin\left(\pi\frac{x}{L}\right)\right\rbrack^{2n}
        
        

where :math:`n` is an integer, typically :math:`n=5`,
and


.. math::
   :label: wave:app:exer:advec1D:I:gauss
        
        I(x) = \exp{\left( -\frac{(x-L/2)^2}{2\sigma2}\right)} \thinspace .
        
        

Choose :math:`\Delta t = c^{-1}\Delta x, 0.9c^{-1}\Delta x, 0.5c^{-1}\Delta x`.

*e)* The performance of the suggested numerical scheme can be investigated
by analyzing the numerical dispersion relation.
Analytically, we have that the *Fourier component*


.. math::
         u(x,t) = e^{i(kx-\omega t)},

is a solution of the PDE if :math:`\omega = kc`. This is the *analytical
dispersion relation*. A complete solution of the PDE can be built by
adding up such Fourier components with different amplitudes, where the
initial condition :math:`I` determines the amplitudes. The solution :math:`u` is
then represented by a Fourier series.

A similar discrete Fourier component at :math:`(x_p,t_n)` is


.. math::
         u_p^q = e^{i(kp\Delta x -\tilde\omega n\Delta t)},

where in general :math:`\tilde\omega` is a function of :math:`k`, :math:`\Delta t`, and
:math:`\Delta x`, and differs from the exact :math:`\omega =kc`.

Insert the discrete Fourier component in the numerical scheme and
derive an expression for :math:`\tilde\omega`, i.e.,
the discrete dispersion relation. Show in particular that if
the :math:`\Delta t/(c\Delta x)=1`, the discrete solution coincides with the
exact solution at the mesh points, regardless of the mesh resolution (!).
Show that if the stability condition


.. math::
         \frac{\Delta t}{c\Delta x}\leq 1,

the discrete Fourier component cannot grow (i.e., :math:`\tilde\omega` is real).

*f)* Write a test for your implementation where you try to use information
from the numerical dispersion relation.

*g)* Set up a computational algorithm for the variable
coefficient case and implement it in a function.
Make a test that the function works for constant :math:`a`.

*h)* It can be shown that
for an observer moving with velocity :math:`c(x)`, :math:`u` is constant.
This can be used to derive an exact solution when :math:`a` varies
with :math:`x`. Show first that


.. math::
   :label: wave:app:exer:advec1D:u:avar:sol
        
        u(x,t) = f(C(x) - t),
        
        

where


.. math::
         C'(x) = \frac{1}{c(x)},

is a solution of :eq:`wave:app:exer:advec1D:ueq` for any
differentiable function :math:`f`.


.. --- begin solution of exercise ---

*Solution.* Let :math:`\xi = C(x) - t`.
We have that

.. math::
         u_t = f'(\xi)(-1),

while

.. math::
         u_x = f'(\xi)C'(x) = f'(\xi)\frac{1}{c(x)},

implying that :math:`au_x = f'(\xi)`. Then we have :math:`u_t + cu_x= -f'(\xi) +
f'(\xi) = 0`.

.. --- end solution of exercise ---


*i)* Use the initial condition to show that an exact solution is


.. math::
         u(x,t) = I(C^{-1}(C(x)-t)),

with :math:`C^{-1}` being the inverse function of :math:`C = \int c^{1}dx`.
Since :math:`C(x)` is an integral :math:`\int_0^x (1/c)dx`,
:math:`C(x)` is monotonically increasing and there exists hence an
inverse function :math:`C^{-1}` with values in :math:`[0,L]`.


.. --- begin solution of exercise ---

*Solution.* In general we have :math:`u(x,t) = f(C(x)-t)` and the solution is
of this form with :math:`f(\xi)=I(C^{-1}(\xi))`.
Moreover, at :math:`t=0` we have
:math:`I(C^{-1}(C(x)))=I(x)`, which is the required initial condition.

.. --- end solution of exercise ---


*j)* Implement a function for computing :math:`C(x_i)` and one for computing
:math:`C^{-1}(x)` for any :math:`x`. Use these two functions for computing
the exact solution :math:`I(C^{-1}(C(x)-t))`.
End up with a function ``u_exact_variable_c(x, n, c, I)`` that returns
the value of :math:`I(C^{-1}(C(x)-t_n))`.

*k)* Make movies showing a comparison of the numerical and exact solutions
for the two initial conditions
:eq:`wave:app:exer:advec1D:I:sin` and :eq:`wave:app:exer:advec1D:I:gauss`.
Choose :math:`\Delta t = \Delta x /\max_{0,L} c(x)`
and the velocity of the medium as

1. :math:`c(x) = 1 + \epsilon\sin(k\pi x/L)`, :math:`\epsilon <1`,

2. :math:`c(x) = 1 + I(x)`, where :math:`I` is given by
   :eq:`wave:app:exer:advec1D:I:sin` or :eq:`wave:app:exer:advec1D:I:gauss`.

The PDE :math:`u_t + cu_x=0` expresses that the initial condition :math:`I(x)`
is transported with velocity :math:`c(x)`.

Filename: ``advec1D.py``.

.. --- end exercise ---


