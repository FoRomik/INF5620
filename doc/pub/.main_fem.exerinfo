
# Information about all exercises in the file main_fem.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.main_fem.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'closing_remarks': '',
  'file': ['linalg1'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:exer:linalg1',
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Look up the topic of *vector space* in your favorite linear algebra\nbook or search for the term at Wikipedia.\nProve that vectors in the plane $(a,b)$ form a vector space\nby showing that all the axioms of a vector space\nare satisfied. Similarly,\nprove that all linear functions of the form $ax+b$ constitute a vector space,\n$a,b\\in\\Real$.\n\nOn the contrary,\nshow that all quadratic functions of the form $1 + ax^2 + bx$ *do not*\nconstitute a vector space.',
  'title': 'Linear algebra refresher I',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['linalg2'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:exer:linalg2',
  'no': 2,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'As an extension of Exercise ref{fem:approx:exer:linalg1}, check out\nthe topic of *inner product spaces*. Suggest a possible inner product\nfor the space of all linear functions of the form $ax+b$, $a,b\\in\\Real$.\nShow that this inner product satisfies the\ngeneral requirements of an inner product in a vector space.',
  'title': 'Linear algebra refresher II',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['vec111_approx'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:exer:vec:3Dby2D',
  'no': 3,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Given $\\f = (1,1,1)$ in $\\Real^3$, find the best approximation vector\n$\\u$ in the plane spanned by the unit vectors $(1,0)$ and $(0,1)$.\nRepeat the calculations using the vectors $(2,1)$ and $(1,2)$.',
  'title': 'Approximate a three-dimensional vector in a plane',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['sin_powers.py'],
  'heading': '=====',
  'hints': ['One can make a loop over $k$ and call the `least_squares` and\n`comparison_plot` from the `approx1D` module.'],
  'keywords': None,
  'label': 'fem:approx:exer:sin:powers',
  'no': 4,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Let $V$ be a function space with basis functions\n$x^{2i+1}$, $i=0,1,\\ldots,N$.\nFind the best approximation to $f(x)=\\sin(x)$ among all functions in $V$,\nusing $N=8$ for a domain that includes more and more half-periods of\nthe sine function: $\\Omega = [0, k\\pi/2]$, $k=2,3,\\ldots,12$.\nHow does a Taylor series of $\\sin(x)$ around $x$ up to degree 9\nbehave for the largest domain?',
  'title': 'Approximate the sine function by power functions',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['tanh_sines_approx1.py'],
  'heading': '=====',
  'hints': ['One may naively call the `least_squares_orth` and `comparison_plot`\nfrom the `approx1D` module in a loop and extend the basis with\none new element in each pass. This approach\nimplies a lot of recomputations.\nA more efficient strategy is to let `least_squares_orth`\ncompute with only one basis function at a time and accumulate\nthe corresponding `u` in the total solution.'],
  'keywords': None,
  'label': 'fem:approx:exer:tanh:sine1',
  'no': 5,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Find the best approximation of $f(x) = \\tanh (s(x-\\pi))$ on\n$[0, 2\\pi]$ in the space $V$ with basis\n$\\basphi_i(x) = sin((2i+1)x)$, $i\\in\\If$.\nMake a movie showing how $u=\\sum_{j\\in\\If}c_j\\basphi_j(x)$\napproximates $f(x)$ as $N$ grows. Choose $s$ such that $f$ is\nsteep ($s=20$ may be appropriate).',
  'title': 'Approximate a steep function by sines',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['Fourier_approx.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:exer:Fourier',
  'no': 6,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Given a function $f(x)$ on an interval $[0,L]$, find the formula\nfor the coefficients of the Fourier series of $f$:\n\n!bt\n\\begin{equation*} f(x) = a_0 + \\sum_{j=1}^\\infty a_j\\cos \\left(j\\frac{\\pi x}{L}\\right)\n+ \\sum_{j=1}^\\infty b_j\\sin \\left(j\\frac{\\pi x}{L}\\right)\\thinspace . \\end{equation*}\n\n!et\n\nLet an infinite-dimensional vector space $V$ have the basis functions\n$\\cos j\\frac{\\pi x}{L}$ for $j=0,1,\\dots,\\infty$ and\n$\\sin j\\frac{\\pi x}{L}$ for $j=1,\\dots,\\infty$.  Show that the least squares\napproximation method from Section ref{fem:approx:global} leads to a\nlinear system whose solution coincides with the standard formulas for\nthe coefficients in a Fourier series of $f(x)$ (see also\nSection ref{fem:approx:global:Fourier}). You may choose\n\n!bt\n\\begin{equation*} \\basphi_{2i} = \\cos\\left( i\\frac{\\pi}{L}x\\right),\\quad\n\\basphi_{2i+1} = \\sin\\left( i\\frac{\\pi}{L}x\\right),\\end{equation*}\n\n!et\nfor $i=0,1,\\ldots,N\\rightarrow\\infty$.\n\nChoose $f(x) = \\tanh(s(x-\\half))$ on $\\Omega=[0,1]$, which is\na smooth function, but with considerable steepness around $x=1/2$\nas $s$ grows in size.\nCalculate the coefficients in the Fourier expansion by\nsolving the linear system, arising from the least squares or Galerkin\nmethods, by hand. Plot\nsome truncated versions of the series together with $f(x)$ to show how\nthe series expansion converges for $s=10$ and $s=100$.',
  'title': 'Fourier series as a least squares approximation',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['tanh_Lagrange.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:exer:tanh',
  'no': 7,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Use interpolation/collocation with uniformly distributed\npoints and Chebychev nodes to approximate\n\n!bt\n\\begin{equation*} f(x) = -\\tanh(s(x-\\half))\\end{equation*}\n\n!et\nby Lagrange polynomials for $s=10,100$ and $N=3,6,9,11$.\nMake separate plots of the approximation for each combination of\n$s$, point type (Chebyshev or uniform), and $N$.',
  'title': 'Approximate a steep function by Lagrange polynomials',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['fe_numberings.py.'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:fe:exer:defmesh',
  'no': 8,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': '# This exercise applies element/node terminology!\n\nConsider a domain $\\Omega =[0,2]$ divided into the three elements\n$[0,1]$, $[1,1.2]$, and $[1.2,2]$, with two nodes in each element\n(P1 elements).\nSet up the list of coordinates and nodes (`nodes`) and the\nnumbers of the nodes that belong to each element (`elements`) in\ntwo cases: 1) nodes and elements numbered from left to right, and 2)\nnodes and elements numbered from right to left.\n\nThereafter, subdivide the element $[1.2,2]$ into two new equal-sized elements.\nAdd the new node and the two new elements to the data structures created above,\nand try to minimize the modifications.',
  'title': 'Define finite element meshes',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['fe_sparsity_pattern.pdf'],
  'heading': '=====',
  'hints': ['A matrix entry $(i,j)$ is nonzero if $i$ and $j$ are nodes in the\nsame element.'],
  'keywords': None,
  'label': 'fem:approx:fe:exer:defmesh:sparsity',
  'no': 9,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Exercise ref{fem:approx:fe:exer:defmesh} describes a element mesh\nwith a total of five elements, but with two different element and\nnode orderings. For each of the two orderings,\nmake a $5\\times 5$ matrix and fill in the entries that will be nonzero.',
  'title': 'Construct matrix sparsity patterns',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['sin_approx_P1.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:fe:exer:Asinwt:symbolic',
  'no': 10,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Find formulas for the coefficient matrix and right-hand side\nwhen approximating $f(x) = sin (x)$ on\n$\\Omega=[0, \\pi]$ by two P1 elements of size $\\pi/2$.\nSolve the system and compare $u(\\pi/2$ with\nthe exact value 1.\n\n# Hint: wolframalpha or sympy can help with (1-x)*sin(a*x+b),\n# which is the integral\n# that arises on the right-hand side.\n\n#solution:\n#from fe_approx1D_numint import *\n#c = approximate(sm.sin(x), symbolic=True, d=1, n_e=2, numint=None,\n#                Omega=[0,sm.pi])\n#print sm.simplify(c[1,0].subs('h', sm.pi/2))",
  'title': 'Perform symbolic finite element computations',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['tanh_fe_P1P2_approx.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:exer:tanh',
  'no': 11,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Given\n\n!bt\n\\begin{equation*} f(x) = \\tanh(s(x-\\half))\\end{equation*}\n\n!et\nuse the Galerkin or least squares method with finite elements to find\nan approximate function $u(x)$. Choose $s=40$ and try\n$n_e=4,8,16$ P1 elements and\n$n_e=2,4,8$ P2 elements.\nIntegrate $f\\basphi_i$ numerically.',
  'title': 'Approximate a steep function by P1 and P2 elements',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['tanh_fe_P3P4_approx.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:exer:tanh2',
  'no': 12,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Solve Exercise ref{fem:approx:exer:tanh} using $n_e=1,2,4$ P3 and P4\nelements. How will a collocation/interpolation method work in\nthis case with the same number of nodes?',
  'title': 'Approximate a $\\tanh$ function by P3 and P4 elements',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['Asinwt_interpolation_error.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:fe:exer:Asinwt:interpol:error',
  'no': 13,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'A fundamental question is how accurate the finite element approximation\nis in terms of the cell length $h$ and the degree $d$ of the basis\nfunctions. We can investigate this empirically by choosing an $f$\nfunction, say $f(x) = A\\sin (\\omega x)$ on\n$\\Omega=[0, 2\\pi/\\omega]$, and compute the approximation error\nfor a series of $h$ and $d$ values. The theory predicts that the\nerror should behave as $h^{d+1}$. Use experiments to verify this\nasymptotic behavior (i.e., for small enough $h$).',
  'title': 'Investigate the approximation errors in finite elements',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['Heaviside_approx_P1P2.py.'],
  'heading': '=====',
  'hints': ['This $f$ can also be expressed in terms of the Heaviside function $H(x)$:\n$f(x) = H(x-\\halfi)$.\nTherefore, $f$ can be defined by\n\n41 <<<!!CODE_BLOCK  pycod\nmaking the `approximate` function in the\n`fe_approx1D.py` module an obvious candidate to solve the\nproblem. However, `sympy` does not handle symbolic integration\nwith this particular integrand, and the `approximate` function faces a problem\nwhen converting `f` to a Python function (for plotting) since\n`Heaviside` is not an available function in `numpy`. It is better to make\nspecial-purpose code for this case or perform all\ncalculations by hand.'],
  'keywords': None,
  'label': 'fem:approx:fe:exer:Heaviside',
  'no': 14,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Approximate the step function\n\n!bt\n\\begin{equation*} f(x) = \\left\\lbrace\\begin{array}{ll}\n1 & x < \\halfi,\\\\ \n2 & x \\geq \\halfi\n\\end{array}\\right.\n\\end{equation*}\n\n!et\nby 2, 4, and 8 P1 and P2 elements. Compare\napproximations visually.',
  'title': 'Approximate a step function by finite elements',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['approx2D_lsorth_sin.py'],
  'heading': '=====',
  'hints': ['Get ideas from the function `least_squares_orth` in\nSection ref{fem:approx:global:orth} and\nfile "`approx1D.py`": "http://tinyurl.com/jvzzcfn/fem/fe_approx1D.py".'],
  'keywords': None,
  'label': 'fem:approx:fe:exer:2Dsines:symbolic',
  'no': 15,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Assume we have basis functions $\\basphi_i(x,y)$ in 2D that are\northogonal\nsuch that $(\\basphi_i,\\basphi_j)=0$ when $i\\neq j$.\nThe function `least_squares` in the\nfile "`approx2D.py`": "http://tinyurl.com/jvzzcfn/fem/fe_approx2D.py" will then spend much time on computing off-diagonal terms\nin the coefficient matrix that we know are zero.\nTo speed up the computations, make a\nversion `least_squares_orth` that utilizes the orthogonality among the\nbasis functions. Apply the function to approximate\n\n!bt\n\\[ f(x,y) = x(1-x)y(1-y)e^{-x-y}\\]\n\n!et\non $\\Omega = [0,1]\\times [0,1]$ via basis functions\n\n!bt\n\\[ \\basphi_i(x,y) = \\sin (p\\pi x)\\sin(q\\pi y),\\quad i=q N_x + p\n\\thinspace .\n\\]\n\n!et',
  'title': '2D approximation with orthogonal functions',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['fe_trapez.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:approx:fe:exer:1D:trapez',
  'no': 16,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Consider approximation of some $f(x)$ on an interval $\\Omega$ using\nthe least squares or Galerkin methods with P1 elements. Derive\nthe element matrix and vector using the\nTrapezoidal rule (ref{fem:approx:fe:numint1:trapez}) for calculating\nintegrals on the reference element. Assemble the contributions, assuming\na uniform cell partitioning, and show that the resulting linear system\nhas the form $c_i=f(\\xno{i})$ for $i\\in\\If$.\n\n\n\n# 2DO\n# Must illustrate how to make weak form of continuous problem and\n# discretize. Do that in time-dependent problems too.\n\n# Maybe <,> \\langle, \\rangle as inner product\n\n# Must say something about error estimates!\n\n\n# no (au')', have (\\alpha u')' - it solves all the problems with a and a(.,.)",
  'title': 'Use the Trapezoidal rule and P1 elements',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['cable_sin'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:tension:cable',
  'no': 17,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "A hanging cable of length $L$\nwith significant tension has a downward deflection $w(x)$\ngoverned by\n\nSolve\n!bt\n\\[\nT w''(x) = \\ell(x),\n\\]\n\n!et\nwhere $T$ is the tension in the cable\nand $\\ell(x)$ the load per unit length.\nThe cable is fixed at $x=0$ and $x=L$ so the boundary conditions become\n$T(0)=T(L)=0$. We assume a constant load $\\ell(x)=\\hbox{const}$.\n\nThe solution is expected to be symmetric around $x=L/2$. Formulating\nthe problem for $x\\in [0,L/2]$ and then scaling it, results in\nthe scaled problem for the dimensionless vertical deflection $u$:\n\n!bt\n\\[\nu'' = 1,\\quad x\\in (0,1),\\quad u(0)=0,\\ u'(1)=0\\thinspace\n\\]\n\n!et\nIntroduce the function space spanned by $\\basphi_i=\\sin ((i+1)\\pi x/2)$,\n$i=1,\\ldots,N$.\nUse a Galerkin and a least squares method to find the coefficients\n$c_j$ in $u(x)=\\sum_j c_j\\basphi_j$. Find how fast the coefficients\ndecrease in magnitude by looking at $c_j/c_{j-1}$.\nFind the error in the maximum deflection at $x=1$ when only one\nbasis function is used ($N=0$).\n\nWhat happens if we choose basis functions\n$\\basphi_i=\\sin ((i+1)\\pi x)$?",
  'title': 'Compute the deflection of a cable with sine functions',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['cable_integr_by_parts'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:intg:parts',
  'no': 18,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Consider the Galerkin method for the problem involving $u$\nin Exercise ref{fem:deq:exer:tension:cable}.\nShow that the formulas for $c_j$ are independent of whether we perform\nintegration by parts or not.',
  'title': 'Check integration by parts',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['cable_2P1'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:intg:parts',
  'no': 19,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Solve the problem for $u$ in Exercise ref{fem:deq:exer:tension:cable}\nusing two P1 linear elements.',
  'title': 'Compute the deflection of a cable with 2 P1 elements',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['cable_1P2'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:intg:parts',
  'no': 20,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Solve the problem for $u$ in Exercise ref{fem:deq:exer:tension:cable}\nusing one P2 element with quadratic basis functions.',
  'title': 'Compute the deflection of a cable with 1 P2 element',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['cable_discont_load'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:intg:parts',
  'no': 21,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Use $\\basphi_i = \\sin((i+1)\\pi x)$, $i=0,\\ldots,N$ and the Galerkin method\nwithout integration by parts. Derive a formula\nfor $c_j$ in the solution expansion $u=\\sum_j c_j\\basphi_j$.\nPlot how fast the coefficients $c_j$ tend to zero (on a log scale).'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Solve the problem with P1 finite elements.\nPlot the solution for $n_e=2,4,8$ elements.'}],
  'text': "We consider the deflection of a tension cable as described in\nExercise ref{fem:deq:exer:tension:cable}. Now the load is\n\n!bt\n\\[ \\ell (x) =\\left\\lbrace\\begin{array}{ll}\n\\ell_1, & x <L/2,\\\\ \n\\ell_2, & x \\geq L/2\n\\end{array}\\right.\\quad x\\in [0,L]\n\\thinspace .\n\\]\n\n!et\nThis load is not symmetric\nwith respect to the midpoint $x=L/2$ so the solution loses its symmetry\nand we must solve the scaled problem\n\n!bt\n\\[ u'' =\\left\\lbrace\\begin{array}{ll}\n1, & x <1/2,\\\\ \n0, & x \\geq 1/2\n\\end{array}\\right.\n\\quad x\\in (0,1),\\quad u(0)=0,\\ u(1)=0\n\\thinspace .\\]\n\n!et",
  'title': 'Compute the deflection of a cable with a step load',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': None,
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:Aub:essbc:equiv',
  'no': 22,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Incorporation of Dirichlet conditions can either be done by\nintroducing an expansion $u(x)=U_0\\basphi_0 + U_N\\basphi_N + \\sum_{j=1}^{N-1}\nc_j\\basphi_j$ and considering $c_1,\\dots,c_{N-1}$ as unknowns, *or*\none can assemble the matrix system with $u(x)=\\sum_{j=0}^{N}\nc_j\\basphi_j$ and afterwards replace the rows corresponding to known\n$c_j$ values by the boundary conditions.\nThe purpose of this exercise is to show the equivalence of these two\napproaches.\n\nConsider the system (ref{fem:deq:1D:ex1:Ab:glob})\nmodified for the boundary value $u(L)=D$, as explained in\nSection ref{fem:deq:1D:fem:essBC:Bfunc}, and the system\n(ref{fem:deq:1D:ex1:Ab:glob3}), where all $c_i$, $i\\in\\If$, are\ninvolved. Show that eliminating $c_1$ and $c_N$ from\n(ref{fem:deq:1D:ex1:Ab:glob3}) results in the other system\n(ref{fem:deq:1D:ex1:Ab:glob}).',
  'title': 'Show equivalence between linear systems',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['nonuniform_P1.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:1D:mesh:nonuniform',
  'no': 23,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Derive the linear system for the problem $-u''=2$ on $[0,1]$,\nwith $u(0)=0$ and $u(1)=1$, using P1 elements and a *non-uniform*\nmesh. The vertices have coordinates $\\xno{0}=0 < \\xno{1} <\\cdots < \\xno{N}=1$,\nand the length of cell number $e$ is $h_e = \\xno{e+1} -\\xno{e}$.\n\nIt is of interest to compare the discrete equations for the finite element\nmethod in a non-uniform mesh with the corresponding discrete equations\narising from a finite difference method. Repeat the reasoning for\nthe finite difference formula $u''(x_i) \\approx [D_x D_x u]_i$ and\nuse it to find a natural discretization of $u''(x_i)$ on a non-uniform\nmesh.",
  'title': 'Compute with a non-uniform mesh',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['convdiff1D_P1'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:1D:gen:problem1',
  'no': 24,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Find the analytical solution to this problem.\n(Introduce $w=u'$, solve the first-order differential equation for $w(x)$,\nand integrate once more.)"},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Derive the variational form of this problem.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Introduce a finite element mesh with uniform partitioning.\nUse P1 elements and compute the element matrix and vector for\na general element.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Incorporate the boundary conditions and\nassemble the element contributions.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Identify the resulting linear system as a finite difference discretization\nof the differential equation using\n\n!bt\n\\[ [D_{2x}u = \\epsilon D_xD_x u]_i \\thinspace . \\]\n\n!et'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Compute the numerical solution and plot it together with the exact solution\nfor a mesh with 20 elements and\n$\\epsilon=0.1, 0.01$.'}],
  'text': "The following scaled 1D problem is a very simple, yet relevant, model\nfor convective transport in fluids:\n\n!bt\n\\begin{equation}\nu' = \\epsilon u'' ,\\quad u(0)=0,\\ u(1)=1,\\ x\\in [0,1]\n\\thinspace .\n\\end{equation}\n\n!et\n\n\n\n\n\n\n\n# Could have shooting method as a project",
  'title': 'Solve a 1D finite element problem by hand',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['radial_Poisson1D_P1.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:1D:Poisson:polar',
  'no': 25,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Derive a variational form of (ref{fem:deq:exer:1D:Poisson:polar:eq})\nby integrating over the whole disk, or posed equivalently: use\na weighting function $2\\pi r v(r)$ and integrate $r$ from $0$ to $R$.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Use a uniform mesh partition with P1 elements and show what the\nresulting set of equations becomes. Integrate the matrix entries\nexact by hand, but use a Trapezoidal rule to integrate the $f$ term.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': "Explain that a natural\nfinite difference method applied to (ref{fem:deq:exer:1D:Poisson:polar:eq})\ngives\n\n!bt\n\\[\n\\frac{1}{r_i}\\frac{1}{h^2}\\left( r_{i+\\half}(u_{i+1}-u_i) -\nr_{i-\\half}(u_{i}-u_{i-1})\\right) = f_i,\\quad i=rh\n\\thinspace .\n\\]\n\n!et\n\nFor $i=0$ the factor $1/r_i$ seemingly becomes problematic. One must always\nhave $u'(0)=0$, because of the radial symmetry, which implies\n$u_{-1}=u_1$, if we allow introduction of a fictitious value $u_{-1}$.\nUsing this $u_{-1}$ in the difference equation for $i=0$ gives\n\n!bt\n\\[\n\\frac{1}{r_0}\\frac{1}{h^2}\\left( r_{\\half}(u_{1}-u_0) -\nr_{-\\half}(u_{0}-u_{1})\\right) =\n\\frac{1}{r_0}\\frac{1}{2h^2}\\left( (r_0 + r_1)(u_{1}-u_0) -\n(r_{-1} + r_0)(u_{0}-u_{1})\\right) \\approx\n2(u_1-u_0),\n\\]\n\n!et\nif we use $r_{-1}+r_1\\approx 2r_0$.\n\nSet up the complete set of equations for the finite difference method\nand compare to the finite element method in case a Trapezoidal rule\nis used to integrate the $f$ term in the latter method."}],
  'text': "We consider the Poisson problem in a disk with radius $R$ with\nDirichlet conditions at the boundary.\nGiven that the solution is radially symmetric and hence dependent only on\nthe radial coordinate ($r=\\sqrt{x^2+y^2}$), we can reduce the problem\nto a 1D Poisson equation\n\n!bt\n\\begin{equation}\n-\\frac{1}{r}\\frac{d}{dr}\\left( r\\frac{du}{dr}\\right) = f(r),\\quad r\\in (0,R),\\ \nu'(0)=0,\\ u(R)=U_R\n\\thinspace .\nlabel{fem:deq:exer:1D:Poisson:polar:eq}\n\\end{equation}\n\n!et",
  'title': 'Compare finite elements and differences for a radially symmetric Poisson equation',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['atan1D_P1.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:1D:gen:problem2',
  'no': 26,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Consider the problem\n!bt\n\\begin{equation}\n-\\frac{d}{dx}\\left( a(x)\\frac{du}{dx}\\right) + \\gamma u = f(x),\n\\quad x\\in\\Omega=[0,L],\\quad u(0)=\\alpha,\\ u'(L)=\\beta\\thinspace .\nlabel{fem:deq:1D:model4}\n\\end{equation}\n\n!et\nWe choose $a(x)=1+x^2$. Then\n!bt\n\\begin{equation} u(x) = \\alpha + \\beta(1+L^2)\\tan^{-1}(x),\n\\end{equation}\n\n!et\nis an exact solution if $f(x) = \\gamma u$.\n\nDerive a variational formulation and compute general expressions for the\nelement matrix and vector in an arbitrary element, using P1 elements\nand a uniform partitioning of $[0,L]$. The right-hand side\nintegral is challenging and can be computed by a numerical integration\nrule. The Trapezoidal rule (ref{fem:approx:fe:numint1:trapez})\ngives particularly simple expressions.",
  'title': 'Compute with variable coefficients and P1 elements by hand',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['torsion_sin_xy.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'fem:deq:exer:2D:torsion:xy:sin',
  'no': 27,
  'solution': '',
  'solution_file': None,
  'subex': [{'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'We consider the basis\n$\\basphi_{p,q}(x,y) = \\sin((p+1)\\pi x)\\sin (q\\pi y)$, $p,q=0,\\ldots,n$.\nThese basis functions fulfill the Dirichlet condition.\nUse a Galerkin method and $n=0$.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'The basis function involving sine functions are orthogonal.\nUse this property in the Galerkin method\nto derive the coefficients $c_{p,q}$ in a\nformula $u=\\sum_p\\sum_q c_{p,q}\\basphi_{p,q}(x,y)$.'},
            {'answer': '',
             'file': None,
             'hints': [],
             'solution': '',
             'text': 'Another possible basis is\n$\\basphi_i(x,y) = (x(1-x)y(1-y))^{i+1}$, $i=0,\\ldots,N$.\nUse the Galerkin method to compute the solution for $N=0$.\nWhich choice of a single basis function is best,\n$u\\sim x(1-x)y(1-y)$ or $u\\sim \\sin(\\pi x)\\sin(\\pi y)$?\nIn order to answer the question,\nit is necessary to search the web or the literature for an accurate\nestimate of the maximum $u$ value at $x=y=1/2$.'}],
  'text': 'The classical problem of applying a torque to the ends of a rod\ncan be modeled by a Poisson equation defined in the cross section $\\Omega$:\n\n!bt\n\\[ -\\nabla^2 u = 2,\\quad (x,y)\\in\\Omega,\\]\n\n!et\nwith $u=0$ on $\\partial\\Omega$. Exactly the same problem arises for\nthe deflection of a membrane with shape $\\Omega$ under a constant load.\n\nFor a circular cross section one can readily\nfind an analytical solution. For a rectangular cross section the analytical\napproach ends up with a sine series. The idea in this exercise is to\nuse a single basis function to obtain an approximate answer.\n\nWe assume for simplicity that the cross section is the unit square:\n$\\Omega = [0,1]\\times [0,1]$.',
  'title': 'Solve a 2D Poisson equation using polynomials and sines',
  'type': 'Exercise',
  'type_visible': True}]