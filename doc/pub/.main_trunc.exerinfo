
# Information about all exercises in the file main_trunc.do.txt.
# The information can be loaded into a Python list of dicts by
#
# f = open('.main_trunc.exerinfo', 'r')
# exer = eval(f.read())
#
[{'answer': '',
  'closing_remarks': '',
  'file': ['trunc_weighted_mean.pdf'],
  'heading': '=====',
  'hints': ['Expand $\\uex^{n+1}$ and $\\uex^n$ around $t_{n+\\theta}$.'],
  'keywords': None,
  'label': 'trunc:exer:theta:avg',
  'no': 1,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Derive the truncation error of the weighted mean in\n(ref{trunc:table:avg:theta:eq})-(ref{trunc:table:avg:theta}).',
  'title': 'Truncation error of a weighted mean',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_theta_avg.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:theta:avg2',
  'no': 2,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'We consider the weighted mean\n!bt\n\\[ \\uex(t_n) \\approx \\theta \\uex^{n+1} + (1-\\theta)\\uex^n\\tp  \\]\n\n!et\nChoose some specific function for $\\uex(t)$ and compute the error in\nthis approximation for a sequence of decreasing $\\Delta t =\nt_{n+1}-t_n$ and for $\\theta = 0, 0.25, 0.5, 0.75, 1$.  Assuming that\nthe error equals $C\\Delta t^r$, for some constants $C$ and $r$,\ncompute $r$ for the two smallest $\\Delta t$ values for each choice of\n$\\theta$ and compare with the truncation error\n(ref{trunc:table:avg:theta:eq})-(ref{trunc:table:avg:theta}).',
  'title': 'Simulate the error of a weighted mean',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_backward_2level.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:decay:bw2',
  'no': 3,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Set up a numerical experiment as explained in\nSection ref{trunc:decay:estimate:R} for verifying the formulas\n(ref{trunc:table:fd1:bw2:eq})-(ref{trunc:table:fd1:bw2}).',
  'title': 'Verify a truncation error formula',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_decay_BE.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:decay:BE',
  'no': 4,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Derive the truncation error of the Backward Euler scheme for\nthe decay ODE $u'=-au$ with constant $a$. Extend the analysis to\ncover the variable-coefficient case $u'=-a(t)u + b(t)$.",
  'title': 'Truncation error of the Backward Euler scheme',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_decay_BNCN.py'],
  'heading': '=====',
  'hints': ['In the Backward Euler scheme, the truncation error can be estimated\nat mesh points $n=1,\\ldots,N$, while the truncation error must\nbe estimated at midpoints $t_{n+\\frac{1}{2}}$, $n=0,\\ldots,N-1$ for\nthe Crank-Nicolson scheme. The `truncation_error(dt, N)`\nfunction to be supplied to the `estimate` function needs to\ncarefully implement these details and return the right `t` array\nsuch that `t[i]` is the time point corresponding to the quantities\n`R[i]` and `R_a[i]`.'],
  'keywords': None,
  'label': 'trunc:exer:decay:estimate',
  'no': 5,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Use the ideas and tools from Section ref{trunc:decay:estimate:R} to\nestimate the rate of the truncation error of the Backward Euler\nand Crank-Nicolson schemes applied to the exponential decay\nmodel $u'=-au$, $u(0)=I$.",
  'title': 'Empirical estimation of truncation errors',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_decay_BE_corr.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:decay:corr:BE',
  'no': 6,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Consider the model $u'=-au$, $u(0)=I$. Use the ideas of\nSection ref{trunc:decay:corr} to add a correction term to the ODE\nsuch that the Backward Euler scheme applied to the perturbed ODE\nproblem is of second order in $\\Delta t$. Find the amplification\nfactor.\n\n# with u''=a^u, the BE scheme probably leads to a 2nd-order Pade\n# approximation of exp(-p)",
  'title': 'Correction term for a Backward Euler scheme',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_decay_corr_verify.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:decay:corr:verify',
  'no': 7,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'The program "`decay_convrate.py`": "http://tinyurl.com/jvzzcfn/decay/decay_convrate.py"\nsolves $u\'=-au$, $u(0)=I$, by the $\\theta$-rule and computes\nconvergence rates. Copy this file and\nadjust $a$ in the `solver` function such that it incorporates\ncorrection terms. Run the program to verify that the error from the Forward\nand Backward Euler schemes with perturbed $a$ is\n$\\Oof{\\Delta t^2}$, while the error arising from the Crank-Nicolson\nscheme with perturbed $a$ is $\\Oof{\\Delta t^4}$.',
  'title': 'Verify the effect of correction terms',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_decay_CN_vc.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:decay:varcoeff:CN',
  'no': 8,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "The variable-coefficient ODE $u'=-a(t)u+b(t)$ can be discretized\nin two different ways by the Crank-Nicolson scheme, depending on\nwhether we use averages for $a$ and $b$ or compute them at\nthe midpoint $t_{n+\\frac{1}{2}}$:\n\n!bt\n\\begin{equation}\n\\lbrack D_t u   = -a\\overline{u}^t + b \\rbrack^{n+\\frac{1}{2}},\n\\end{equation}\n\n!et\n\n!bt\n\\begin{equation}  \n\\lbrack D_t u   = \\overline{-au+b}^t \\rbrack^{n+\\frac{1}{2}}\n\\tp\n\\end{equation}\n\n!et\nCompute the truncation error in both cases.",
  'title': 'Truncation error of the Crank-Nicolson scheme',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_nonlinear_ODE.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:decay:nonlin:BEFE',
  'no': 9,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Consider the general nonlinear first-order scalar ODE\n!bt\n\\[ u'(t) = f(u(t), t)\n\\tp\n\\]\n\n!et\nShow that the truncation error in the Forward Euler scheme,\n!bt\n\\[ [D_t^+ u = f(u,t)]^n,\\]\n\n!et\nand in the Backward Euler scheme,\n!bt\n\\[ [D_t^- u = f(u,t)]^n,\\]\n\n!et\nboth are of first order, regardless of what $f$ is.\n\nShowing the order of the truncation error in the Crank-Nicolson scheme,\n!bt\n\\[ [D_t u = f(u,t)]^{n+\\frac{1}{2}}, \\]\n\n!et\nis somewhat more involved: Taylor expand $\\uex^n$, $\\uex^{n+1}$,\n$f(\\uex^n, t_n)$, and $f(\\uex^{n+1}, t_{n+1})$ around $t_{n+\\frac{1}{2}}$,\nand use that\n!bt\n\\[ \\frac{df}{dt} = \\frac{\\partial f}{\\partial u}u' + \\frac{\\partial f}{\\partial t}\n\\tp  \\]\n\n!et\nCheck that the derived truncation error is consistent with previous\nresults for the case $f(u,t)=-au$.",
  'title': "Truncation error of $u'=f(u,t)$",
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_d2u.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:DtDtu',
  'no': 10,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Derive the truncation error of the finite difference approximation\n(ref{trunc:table:fd2:center:eq})-(ref{trunc:table:fd2:center}) to\nthe second-order derivative.',
  'title': 'Truncation error of $[D_t D_tu]^n$',
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_vib_ic_fw.py'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:vib:ic:fw',
  'no': 11,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': 'Section ref{trunc:vib:undamped} describes two ways of discretizing\nthe initial conditon $u\'(0)=V$ for a vibration model\n$u\'\'+\\omega^2u=0$: a centered difference $[D_{2t}u=V]^0$ or\na forward difference $[D_t^+u=V]^0$.\nThe program "`vib_undamped.py`": "http://tinyurl.com/jvzzcfn/vib/vib_undamped.py"\nsolves $u\'\'+\\omega^2u=0$ with $[D_{2t}u=0]^0$ and features\na function `convergence_rates` for computing the order of the\nerror in the numerical solution. Modify this program such\nthat it applies the forward difference $[D_t^+u=0]^0$ and\nreport how this simpler and more convenient approximation impacts\nthe overall convergence rate of the scheme.',
  'title': "Investigate the impact of approximating $u'(0)$",
  'type': 'Exercise',
  'type_visible': True},
 {'answer': '',
  'closing_remarks': '',
  'file': ['trunc_vib_bw_damping.pdf'],
  'heading': '=====',
  'hints': [],
  'keywords': None,
  'label': 'trunc:exer:vib:fbw',
  'no': 12,
  'solution': '',
  'solution_file': None,
  'subex': [],
  'text': "Consider the ODE\n\n!bt\n\\[ mu'' + \\beta |u'|u' + s(u) = F(t)\\tp\\]\n\n!et\nThe term $|u'|u'$ quickly gives rise to nonlinearities and complicates\nthe scheme. Why not simply apply a backward difference to this term\nsuch that it only involves known values? That is, we propose to solve\n\n!bt\n\\[ [mD_tD_tu + \\beta |D_t^-u|D_t^-u + s(u) = F]^n\\tp\\]\n\n!et\nDrop the absolute value for simplicity and find the truncation error\nof the scheme.\nPerform numerical experiments with the scheme and compared with the one\nbased on centered differences. Can you illustrate the accuracy loss\nvisually in real computations, or is the asymptotic analysis here\nmainly of theoretical interest?",
  'title': 'Investigate the accuracy of a simplified scheme',
  'type': 'Exercise',
  'type_visible': True}]