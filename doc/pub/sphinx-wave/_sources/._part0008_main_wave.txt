.. !split


.. _wave:app:spherical:

Spherical waves
---------------

Spherically symmetric three-dimensional
waves propagate in the radial direction :math:`r` only so that
:math:`u = u(r,t)`. The fully three-dimensional wave equation


.. math::
         \frac{\partial^2u}{\partial t^2}=\nabla\cdot (c^2\nabla u) + f 

then reduces to the spherically symmetric wave equation


.. math::
        
        \frac{\partial^2u}{\partial t^2}=\frac{1}{r^2}\frac{\partial}{\partial r}
        \left(c^2(r)r^2\frac{\partial u}{\partial t}\right)
        + f(r,t),\quad r\in (0,R),\ t>0
        \thinspace .
        

One can easily show
that the function :math:`v(r,t) = ru(r,t)` fulfills a standard wave equation
in Cartesian coordinates if :math:`c` is constant. To this end, insert :math:`u=v/r` in


.. math::
         \frac{1}{r^2}\frac{\partial}{\partial r}
        \left(c^2(r)r^2\frac{\partial u}{\partial t}\right) 

to obtain


.. math::
         r\left(\frac{d c^2}{dr}\frac{\partial v}{\partial r} +
        c^2\frac{\partial^2 v}{\partial r^2}\right) - \frac{d c^2}{dr}v
        \thinspace .
        

The two terms in the parenthesis can be combined to

.. math::
         r\frac{\partial}{\partial r}\left( c^2\frac{\partial v}{\partial r}\right),
        

which is recognized as the variable-coefficient Laplace operator in
one Cartesian coordinate. The spherically symmetric wave equation in
terms of :math:`v(r,t)` now becomes


.. math::
        
        \frac{\partial^2v}{\partial t^2}=
        \frac{\partial}{\partial r}
        \left(c^2(r)\frac{\partial v}{\partial r}\right)
        -\frac{1}{r}\frac{d c^2}{dr}v + rf(r,t),\quad r\in (0,R),\ t>0
        \thinspace .
        

In the case of constant wave velocity :math:`c`, this equation reduces to
the wave equation in a single Cartesian coordinate called :math:`r`:


.. math::
   :label: wave:app:rsymm:Cart
        
        \frac{\partial^2v}{\partial t^2}=
        c^2 \frac{\partial^2 v}{\partial r^2}
        + rf(r,t),\quad r\in (0,R),\ t>0
        \thinspace .
        
        

That is, any program for solving the one-dimensional wave equation
in a Cartesian coordinate system can be used to
solve :eq:`wave:app:rsymm:Cart`, provided the source term is
multiplied by the coordinate, and that we divide the Cartesian mesh
solution by :math:`r` to get the spherically symmetric solution.
Moreover, if :math:`r=0` is included in the
domain, spherical symmetry demands that :math:`\partial u/\partial r=0` at
:math:`r=0`, which means that


.. math::
         \frac{\partial u}{\partial r} = \frac{1}{r^2}\left(
        r\frac{\partial v}{\partial r} - v\right) = 0,\quad r=0,
        

implying :math:`v(0,t)=0` as a necessary condition. For practical applications,
we exclude :math:`r=0` from the domain and assume that some boundary
condition is assigned at :math:`r=\epsilon`, for some :math:`\epsilon >0`.


.. _wave:app:sw:2D:

The linear shallow water equations
----------------------------------

The next example considers water waves whose wavelengths are much
lager than the depth and whose wave amplitudes are small. This class
of waves may be generated by catastrophic geophysical events, such as
earthquakes at the sea bottom, landslides moving into water, or
underwater slides (or a combination, as earthquakes frequently release
avalanches of masses). For example, a subsea earthquake will normally
have an extension of many kilometers but lift the water only a few
meters. The wave length will have a size dictated by the earthquake
area, which is much lager than the water depth, and compared to this
wave length, an amplitude of a few meters is very small.
The water is essentially a thin film, and mathematically we can average
the problem in the vertical direction and approximate the 3D
wave phenomenon by 2D PDEs. Instead of a moving water domain in three
space dimensions, we get a horizontal 2D domain with an unknown function
for the surface elevation and the water depth as a variable coefficient
in the PDEs.

Let :math:`\eta(x,y,t)` be the elevation of
the water surface, :math:`H(x,y)` the water depth corresponding to a flat
surface (:math:`\eta =0`), :math:`u(x,y,t)` and :math:`v(x,y,t)` the
depth-averaged horizontal velocities of the water. Mass and momentum
balance of the water volume give rise to the PDEs involving these
quantities:


.. math::
   :label: wave:app:sw:2D:eeq
        
        \eta_t = - (Hu)_x - (Hv)_x
        
        



.. math::
   :label: wave:app:sw:2D:ueq
          
        u_t = -g\eta_x,
        
        



.. math::
   :label: wave:app:sw:2D:veq
          
        v_t = -g\eta_y,
        
        

where :math:`g` is the acceleration of gravity. Equation :eq:`wave:app:sw:2D:eeq`
corresponds to mass balance while the other two are derived from momentum
balance (Newton's second law).

The initial conditions associated with
:eq:`wave:app:sw:2D:eeq`-:eq:`wave:app:sw:2D:veq` are :math:`\eta`, :math:`u`,
and :math:`v` prescribed at :math:`t=0`. A common condition is to have some water
elevation :math:`\eta =I(x,y)` and assume that the surface is at rest:
:math:`u=v=0`. A subsea earthquake usually means a sufficiently rapid motion
of the bottom and the water volume to say that the bottom
deformation is mirrored at the water surface as an initial lift :math:`I(x,y)`
and that :math:`u=v=0`.

Boundary conditions may be :math:`\eta` prescribed for incoming, known
waves, or zero normal velocity at reflecting boundaries (steep
mountains, for instance): :math:`un_x + vn_y =0`, where :math:`(n_x,n_y)` is the
outward unit normal to the boundary.  More sophisticated boundary
conditions are needed when waves run up at the shore, and at open
boundaries where we want the waves to leave the computational domain
undisturbed.

Equations :eq:`wave:app:sw:2D:eeq`, :eq:`wave:app:sw:2D:ueq`, and
:eq:`wave:app:sw:2D:veq` can be transformed to a standard, linear
wave equation. First, multiply :eq:`wave:app:sw:2D:ueq` and
:eq:`wave:app:sw:2D:veq` by :math:`H`, differentiate :eq:`wave:app:sw:2D:ueq`)
with respect to :math:`x` and :eq:`wave:app:sw:2D:veq` with respect to :math:`y`.
Second, differentiate :eq:`wave:app:sw:2D:eeq` with respect to :math:`t`
and use that :math:`(Hu)_{xt}=(Hu_t)_x` and :math:`(Hv)_{yt}=(Hv_t)_y` when :math:`H`
is independent of :math:`t`. Third, eliminate :math:`(Hu_t)_x` and :math:`(Hv_t)_y`
with the aid of the other two differentiated equations. These manipulations
results in a standard, linear wave equation for :math:`\eta`:


.. math::
   :label: wave:app:sw:2D:eta:2ndoeq
        
        \eta_{tt} = (gH\eta_x)_x + (gH\eta_y)_y = \nabla\cdot (gH\nabla\eta)
        
        \thinspace .
        



In the case we have an initial non-flat water surface at rest, the
initial conditions become :math:`\eta =I(x,y)` and :math:`\eta_t=0`.
The latter follows from :eq:`wave:app:sw:2D:eeq` if :math:`u=v=0`, or
simply from the fact that the vertical velocity of the surface
is :math:`\eta_t`, which is zero for a surface at rest.

The system :eq:`wave:app:sw:2D:eeq`-:eq:`wave:app:sw:2D:veq`
can be extended to handle a time-varying bottom topography, which is
relevant for modeling long waves generated by underwater slides.
In such cases the water depth function :math:`H` is also a function of :math:`t`,
due to the moving slide,
and one must add a time-derivative term :math:`H_t` to the left-hand side
of :eq:`wave:app:sw:2D:eeq`. A moving bottom is best described by
introducing :math:`z=H_0` as the still-water level, :math:`z=B(x,y,t)` as
the time- and space-varying bottom topography, so that :math:`H=H_0-B(x,y,t)`.
In the elimination of :math:`u` and :math:`v` one may assume that the dependence of
:math:`H` on :math:`t` can be neglected in the terms :math:`(Hu)_{xt}` and :math:`(Hv)_{yt}`.
We then end up with a source term in :eq:`wave:app:sw:2D:eta:2ndoeq`,
because of the moving (accelerating) bottom:


.. math::
   :label: wave:app:sw:2D:eta:2ndoeq:Ht
        
        \eta_{tt} = \nabla\cdot(gH\nabla\eta) + B_{tt}
        
        \thinspace .
        


The reduction of :eq:`wave:app:sw:2D:eta:2ndoeq:Ht` to 1D, for long waves
in a straight channel, or for approximately plane waves in the ocean, is
trivial by assuming no change in :math:`y` direction (:math:`\partial/\partial y=0`):


.. math::
   :label: wave:app:sw:1D:eta:2ndoeq:Ht
        
        \eta_t = (gH\eta_x)_x + B_{tt}
        
        \thinspace .
        


Wind drag on the surface
~~~~~~~~~~~~~~~~~~~~~~~~

Surface waves are influenced by the drag of the wind, and if the
wind velocity some meters above the surface is :math:`(U,V)`,
the wind drag gives contributions
:math:`C_V\sqrt{U^2+V^2}U` and :math:`C_V\sqrt{U^2+V^2}V` to
:eq:`wave:app:sw:2D:ueq` and :eq:`wave:app:sw:2D:veq`, respectively,
on the right-hand sides.

Bottom drag
~~~~~~~~~~~

The waves will experience a drag from the bottom, often roughly modeled
by a term similar to the wind drag:
:math:`C_B\sqrt{u^2+v^2}u` on the right-hand side of :eq:`wave:app:sw:2D:ueq` and
:math:`C_B\sqrt{u^2+v^2}v` on the right-hand side of :eq:`wave:app:sw:2D:veq`.
Note that in this case the PDEs :eq:`wave:app:sw:2D:ueq` and
:eq:`wave:app:sw:2D:veq` become nonlinear and the elimination of :math:`u` and :math:`v`
to arrive at a 2nd-order wave equation for :math:`\eta` is not possible anymore.

Effect of the Earth's rotation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Long geophysical waves will often be affected by the rotation of the
Earth because of the Coriolis force. This force gives rise to a
term :math:`fv` on the right-hand side of :eq:`wave:app:sw:2D:ueq` and
:math:`-fu` on the right-hand side of :eq:`wave:app:sw:2D:veq`.
Also in this case one cannot eliminate :math:`u` and :math:`v` to work with a single
equation for :math:`\eta`. The Coriolis parameter is :math:`f=2\Omega\sin\phi`,
where :math:`\Omega` is the angular velocity of the earth and :math:`\phi` is
the latitude.



