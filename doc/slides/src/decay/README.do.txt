TITLE: The Source Code of the Slides from the Course INF5620: Numerical Methods for PDEs
AUTHOR: Hans Petter Langtangen
DATE: today

# Mako variables to hold URLs
<%
# Python code goes here
decay_slides = "http://hplgit.github.io/INF5620/doc/pub/"
%>

======= How to compile the slides =======

===== Doconce =====

The slides are written in "Doconce":
"https://hplgit.github.io/doconce" syntax and you need the "Doconce
software": "https://github.com/hplgit/doconce" to compile the slides
to LaTeX (and from there to PDF), HTML, Sphinx, various HTML5 formats,
Markdown, IPython notebook, or whatever format is supported by
Doconce.

You may look at "some slides":
"http://hplgit.github.io/teamods/doconce/scientific_writing_reveal.html"
that motivate for Doconce and demonstrates the basic syntax.
A primary advantage of Doconce is that it fixes some of the
problems that HTML/MathJax has with slides in HTML format.

To learn Doconce, browse the tutorial and get to know the manual.  The
"main web page for Doconce":
"http://hplgit.github.io/doconce/doc/web/index.html" is a starting
point.

===== How to edit =====

The slides for a topic with nickname `name` are in
`name/lec-name/*.do.txt`.  Invoke a `.do.txt` (Doconce) file in an
editor like Emacs or Vim and just edit the ASCII text. The beginning
of a slides is recognized by `!split`, usually followed by a heading.

When you edit slides, go through the slides in the relevant formats
and check if you need to shuffle material from one slide to the next,
or split a slide in two, if the slide gets too long. This is, in principle,
only a problem with LaTeX Beamer because the slide is then truncated and
nobody can read what does not fit in the visible slides. All other
formats have the possibility to scroll the slide.

===== Compile =====

The script `../make_lectures.sh` runs the necessary Doconce commands to
produce slides in various formats:

  * "LaTeX Beamer": "${decay_slides}/lecture_decay-beamer.pdf"
  * HTML5: "deck.js": "${decay_slides}/lecture_decay-deck.html" ,
    "reveal.js": "${decay_slides}/lecture_decay-reveal.html"
  * HTML: "one large page": "${decay_slides}/lecture_decay-1.html"
    and "one page per slide": "${decay_slides}/lecture_decay.html"
  * HTML: "solarized style, one large page": "${decay_slides}/lecture_decay-solarized.html"
  * "LaTeX PDF": "${decay_slides}/lecture_decay-4print.pdf"
    document with the text of all slides (for printing)

Handouts based on Beamer is supported, but not included. It remains to
see if handouts of Beamer slides are inferior or superior to the
LaTeX PDF or the HTML file, etc.

The makefile is run like

!bc sys
Terminal> sh ../make_lectures.sh lecture_decay.do.txt
!ec
if `lecture_decay.do.txt` is the name of the Doconce file that defines
the whole document with lectures.

The resulting documents have different names:

 * LaTeX Beamer: `lecture_decay-beamer.pdf`
 * LaTeX PDF for printing: `lecture_decay-4print.pdf`
 * HTML5 reveal.js: `lecture_decay-reveal.html`
 * HTML5 deck.js: `lecture_decay-deck.html`
 * HTML one big file: `lecture_decay-1.html`
 * HTML one slide per file: `lecture_decay.html`
   (this is the first slide, the rest are in `._part*.html`)
 * HTML solarized style: `lecture_decay-solarized.html`

Other styles are very easy to experiment with in the `make_lectures.sh`
script (basically change command-line arguments and/or use HTML templates
or other LaTeX styles). If you need to hack the files generated from
Doconce, e.g., insert something special in the Beamer slides, then
I highly recommend to use the Doconce commands
`doconce replace` (verbatim replace) or `doconce subst` (regex
substitution), or tailored code, in the compile script such that
all editing of autogenerated files are automated.

===== Structure of the documents =====

Suppose the nickname of the set of lectures for a given topic is `decay`.
The main steering file for the lectures is then `lectures_decay.do.txt`.
It basically includes a set of Mako variables (in `../mako_code.txt`)
and a set of files in `lec-decay` with different units of lectures.
It is the files `lec-decay/*.do.txt` that a lecturer wants to edit.
Everything else is generated from this Doconce source.

The Mako variables are used parameterize addresses to web sites used
in the documents. For example, these lectures refers to GitHub
repositories with very long URLs. These have been shortened, but
all details of the URLs are put in Mako variables and used in the
program. This makes the lectures independent of where a lot of
resources for the course are put on the web.

Contact the author at "hpl@simula.no": "mailto:hpl@simula.no" in case of problems!

===== How to clean the directory =====

The `../make_lectures.sh` script makes *a lot* of files that you may want
to remove. The script `../clean.sh` can be run for this purpose.
