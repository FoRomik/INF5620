
!split
======= Performing scientific experiments =======
label{decay:experiments}

idx{numerical experiments} idx{scientific experiments}

Goal: explore the behavior of a numerical
method for a differential equation and show how scientific experiments
can be set up and reported.

Tasks:

  * Write scripts to automate experiments
  * Generate scientific reports from scripts

Tools to learn:

  * `os.system` for running other programs
  * `subprocess` for running other programs and extracting the output
  * List comprehensions
  * Formats for scientific reports: HTML w/MathJax, LaTeX, Sphinx, Doconce


!split
===== Model problem and numerical solution method =====

Problem:

!bt
\begin{equation}
u'(t) = -au(t),\quad u(0)=I,\ 0< t \leq T,
label{decay:experiments:model}
\end{equation}
!et

Solution method ($\theta$-rule):

!bt
\[
u^{n+1} = \frac{1 - (1-\theta) a\Delta t}{1 + \theta a\Delta t}u^n,
\quad u^0=I\thinspace .
\]
!et

!split
===== Plan for the experiments =====

 * Plot $u^n$ against $\uex = Ie^{-at}$ for
   various choices of the parameters
   $I$, $a$, $\Delta t$, and $\theta$
 * How does the discrete solution compare with the exact solution
   when $\Delta t$ is varied and $\theta=0,0.5,1$?
 * Use the "`decay_mod.py`": "${src_decay}/decay_mod.py" module (little modification of the plotting, see "`experiments/decay_mod.py`": "${src_decay}/experiments/decay_mod.py")
 * Make separate program for running (automating) the experiments (*script*)
    o `python decay_mod.py --I 1 --a 2 --makeplot --T 5 --dt 0.5 0.25 0.1 0.05`
    o Combine generated figures `FE_*.png`, `BE_*.png`, and `CN_*.png`
      to new figures with multiple plots
    o Run script as `python decay_exper0.py 0.5 0.25 0.1 0.05` ($\Delta t$ values on the command line)

!split
===== Typical plot summarizing the results =====

FIGURE: [fig-decay/BE4a.png, width=800, frac=1.1]

!split
===== Script code =====

Typical *script* (small administering program) for running the experiments:

@@@CODE src-decay/experiments/decay_exper0.py

Complete program: "`experiments/decay_exper0.py`":
"${src_decay}/experiments/decay_exper0.py".

!split
===== Comments to the code =====

idx{Unix wildcard notation}
idx{`os.system`}

Many useful constructs in the previous script:

 * `[float(arg) for arg in sys.argv[1:]]` builds a list of real numbers
   from all the command-line arguments
 * `failure = os.system(cmd)` runs an operating system command
   (e.g., another program)
 * `sys.exit(1)` aborts the program
 * `['%s_%s.png' % (method, dt) for dt in dt_values]` builds a list of
   filenames from a list of numbers (`dt_values`)
 * All `montage` commands for creating composite figures are stored in a
   list and thereafter executed in a loop
 * `glob.glob('*_*.png')` returns a list of the names of all files in the
   current folder where the filename matches the *Unix wildcard notation*
   `*_*.png` (meaning "any text, underscore, any text, and then `.png`")
 * `os.remove(filename)` removes the file with name `filename`


!split
===== Interpreting output from other programs =====

In `decay_exper0.py` we run a program (`os.system`) and
want to grab the output, e.g.,

!bc sys
Terminal> python decay_plot_mpl.py
0.0   0.40:    2.105E-01
0.0   0.04:    1.449E-02
0.5   0.40:    3.362E-02
0.5   0.04:    1.887E-04
1.0   0.40:    1.030E-01
1.0   0.04:    1.382E-02
!ec

Tasks:

  * read the output from the `decay_mod.py` program
  * interpret this output and store the $E$ values in arrays for each
    $\theta$ value
  * plot $E$ versus $\Delta t$, for each $\theta$, in a log-log plot

!split
===== Code for grabbing output from another program =====

idx{`subprocess` (Python module)}
idx{`Popen` (in `subprocess` module)}

Use the `subprocess` module to grab output:

@@@CODE src-decay/experiments/decay_exper1.py fromto: from subprocess@errors =

!split
===== Code for interpreting the grabbed output =====

 * Run through the `output` string, line by line
 * If the current line prints $\theta$, $\Delta t$, and $E$,
   split the line into these three pieces and store the data
 * Store data in a dictionary `errors` with keys `dt` and
   the three $\theta$ values

!bc pycod
errors = {'dt': dt_values, 1: [], 0: [], 0.5: []}
for line in output.splitlines():
    words = line.split()
    if words[0] in ('0.0', '0.5', '1.0'):  # line with E?
        # typical line: 0.0   1.25:    7.463E+00
        theta = float(words[0])
        E = float(words[2])
        errors[theta].append(E)
!ec

Next: plot $E$ versus $\Delta t$ for $\theta=0,0.5,1$

Complete program: "`experiments/decay_exper1.py`":
"${src_decay}/experiments/decay_exper1.py".
Fine recipe for

  * how to run other programs
  * how to extract and interpret output from other programs
  * how to automate many manual steps in creating simulations and figures

!split
===== Making a report =====
label{decay:exper:report}

 * Scientific investigations are best documented in a report!
 * "A sample report": "http://hplgit.github.com/INF5620/doc/writing_reports/sphinx-cloud/"
 * How can we write such a report?
 * First problem: what format should I write in?
 * "Plain HTML": "http://hplgit.github.com/INF5620/doc/writing_reports/report_html.html", generated by "`decay_exper1_html.py`": "${src_decay}/experiments/decay_exper1_html.py"
 * "HTML with MathJax": "http://hplgit.github.com/INF5620/doc/writing_reports/report_html_mathjax.html", generated by "`decay_exper1_mathjax.py`": "${src_decay}/experiments/decay_exper1_html.py"
 * "LaTeX PDF": "http://hplgit.github.com/INF5620/doc/writing_reports/report.pdf", based on "LaTeX source": "http://hplgit.github.com/INF5620/doc/writing_reports/report.tex.html"
 * "Sphinx HTML": "http://hplgit.github.com/INF5620/doc/writing_reports/sphinx-cloud/index.html", based on "reStructuredText": "http://hplgit.github.com/INF5620/doc/writing_reports/report_sphinx.rst.html"
 * Markdown, MediaWiki, ...
 * "Doconce": "https://github.com/hplgit/doconce" can generate LaTeX, HTML w/MathJax, Sphinx, Markdown, MediaWiki, ... ("Doconce source": "http://hplgit.github.com/INF5620/doc/writing_reports/report.do.txt.html" for the examples above, and Python program for "generating the Doconce source": "${src_decay}/experiments/decay_exper1_do.py")
 * "Examples on different report formats": "http://hplgit.github.com/INF5620/doc/writing_reports/"

!split
===== Publishing a complete project =====
label{decay:exper:github}

 * Make folder (directory) tree
 * Keep track of all files via a *version control system* (Mercurial, Git, ...)
 * Publish as private or public repository
 * Utilize Bitbucket, Googlecode, GitHub, or similar
 * See the "intro to such tools": "http://hplgit.github.com/teamods/bitgit/html/"

