#TITLE: INF5620 Numerical Solution of Partial Differential Equations

# #ifdef EXAM
===== Exam =====

Out of 18 candidates who took the exam, 7 got A, 6 got B, 2 got C, and
all three PhD students passed. The exceptional result of A and B for
16 out of 18 is first of all due to extensive and very successful
preparations - and perhaps a small component of luck in that 11 of the
A and B candidates presented Problem 2 or 3 (!).  The die was not
completely fair in the 18 trials as we had Problem 4 twice, Problem 1
once, Problem 5 once, and Problem 6 three times.
# #endif

===== Important links =====

 * "Summary of lectures": "lectures.html" (updated before and after each lecture)
 * "Course notes and slides from lectures": "notes.html"

===== News =====

 * _Sep 23_: The "2nd compulsory exercise": "oblig2.html" is published.
 * _Sep 23_: More updates of the "wave equation notes and slides": "notes.html" are published.
 * _Sep 23_: Exercises for Sep 25 and week 40:
   * "Exercise 1": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0002_main_wave.html#exercise-1-simulate-a-standing-wave" (visualize errors in a standing wave)
   * "Exercise 14": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0010_main_wave.html#exercise-14-simulate-waves-on-a-non-homogeneous-string" (waves on a non-homogeneous string)
   * "Exercise 7": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0003_main_wave.html#problem-7-explore-symmetry-boundary-conditions" (symmetry boundary conditions)
   * "Exercise 8": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0003_main_wave.html#exercise-8-send-pulse-waves-through-a-layered-medium" (numerical noise due to discontinuous wave velocity)
   * "Exercise 6": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0003_main_wave.html#exercise-6-find-the-analytical-solution-to-a-damped-wave-equation" (solve a damped wave equation analytically)
   * "Exercise 20": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0010_main_wave.html#problem-20-implement-open-boundary-conditions" (open boundary conditions)
   * "Exercise 17": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0010_main_wave.html#exercise-17-simulate-spherical-waves"
 * _Sep 19_: Material on solving wave equations is released.
 * _Sep 18_: Feedback on the first compulsory exercise is
    sent out as pull requests on Bitbucket and GitHub (just accept it).
    If you have not received a pull request, send an email to
    hpl@simula.no, and/or follow link to forked repo and read the
    feedback file there.
 * _Sep 16_: Joakim Bø has gone through the files handed in for
   the first compulsory exercise. The feedback will be sent as
   pull requests (just accept the request - only a new file will
   be added to your repo).
 * _Sep 4 and 5:_ Performed some minor edits of the text and data in
   "Exercise 24": "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/main_decay.html#exercise-24-make-a-program-for-vertical-motion-in-a-fluid"
   and "Project 1": "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/main_decay.html#project-1-simulate-parachuting". (If you have already done the
   compulsory project you do not need to pay attention to these edits.)
 * _Sep 4:_ "Text and slides": "notes.html" for *Finite difference methods
   for vibration problems* are published.
 * _Sep 2/4:_ The problem lab is on Monday, and Wednesday has 2 h
   ordinary lectures (only this week). Joakim leads the Monday session.
 * _Aug 29:_ How can you install all needed software in INF5620 on
   your machine?

  * Alternative 1: Run a full graphical Ubuntu platform in a VMWare
    Fusion machine. We have detailed "instructions": "http://hplgit.github.io/teamods/ubuntu/vmware/index.html". You will then have to
    install a "list of packages recommended for INF5620": "software_packages.html" which on Ubuntu are installed by an "installation script": "https://raw.github.com/hplgit/vagrantbox/master/doc/src/vagrant/src-vagrant/install_rich.sh".
  * Alternative 2: Run Ubuntu as a Vagrant box in a terminal window.
    This box comes with all INF5620 software.
    "Instructions": "vagrant_inf5620.html" are in an untested and
    preliminary state.
  * Alternative 3: Do a manual installation according to
    a "list of packages recommended for INF5620": "software_packages.html".

 * _Aug 26:_ The "background.pdf" file contained some embarrassing typos
   that are now corrected.
 * _Aug 26:_ Bitbucket or GitHub for INF5620 work?
  * Main disadvantage of GitHub: You have to apply for a "student plan with free private repos": "https://github.com/edu"
  * Main advantage of Bitbucket: You can have an unlimited number of
    private repos with up to 5 collaborators (probably sufficient for INF5620).
  * Main advantage of GitHub: You can have repo-specific web pages
    (probably not important in INF5620).
  * Main disadvantage of Bitbucket: You cannot have repo-specific web pages.
 * _Aug 26:_ The compulsory exercises are reformulated to be more precise,
   and they also contain an extra question (check the links below) on how
   to construct an exact linear solution of the discrete equations.
 * First compulsory exercise: either "Exercise 24": "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/main_decay.html#exercise-24-make-a-program-for-vertical-motion-in-a-fluid" or "Project 1": "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/main_decay.html#project-1-simulate-parachuting". Deadline: Sep 9.
 * Here are the rules for compulsory exercises/projects in INF5620, H13:

  * Deliver files as part of a private "repository at GitHub or Bitbucket": "http://hplgit.github.com/teamods/bitgit/html/index.html".
  * Work in groups of two or individually.
  * Use *one* private repo for *all* exercises/projects in INF5620 this
    semester. If you work in a group, collaborate with one common repo.
  * Add read access for `hplbit` in the private repo
    on Bitbucket or `hplgit` on GitHub. (This will automatically notify
    the lecturer about the repo.)
  * Write your (the owner's) full name in a `README*` file in top directory.
  * Include collaborators in the `README` file in
    or write their names as a comment in the various files if the names
    differ between the projects.
  * Hans Petter will fork your repo. He or Joakim Bø will go through
    the relevant files and create a new file with comments. The student
    will get a pull request with the changes in the repo. Normally,
    just accepting the pull request brings the comment file into your repo.
    Make sure you use the file names given in the exercises.
* Teaching 2013 in room Postscript in Ole-Johan Dahls hus:
   * Mondays 10.15-12.00: Lectures.
   * Wednedays 08.15-09.00: Problem lab.
   * Wednedays 09.15-10.00: Exercises and/or lectures.

===== Homework =====
 * _Sep 23_: Exercises for Sep 25 and week 40:
   * "Exercise 1": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0002_main_wave.html#exercise-1-simulate-a-standing-wave" (visualize errors in a standing wave)
   * "Exercise 14": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0010_main_wave.html#exercise-14-simulate-waves-on-a-non-homogeneous-string" (waves on a non-homogeneous string)
   * "Exercise 7": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0003_main_wave.html#problem-7-explore-symmetry-boundary-conditions" (symmetry boundary conditions)
   * "Exercise 8": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0003_main_wave.html#exercise-8-send-pulse-waves-through-a-layered-medium" (numerical noise due to discontinuous wave velocity)
   * "Exercise 6": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0003_main_wave.html#exercise-6-find-the-analytical-solution-to-a-damped-wave-equation" (solve a damped wave equation analytically)
   * "Exercise 20": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0010_main_wave.html#problem-20-implement-open-boundary-conditions" (open boundary conditions)
   * "Exercise 17": "http://hplgit.github.io/INF5620/doc/pub/sphinx-wave/._part0010_main_wave.html#exercise-17-simulate-spherical-waves"
 * _Sep 11:_
   In the lab we go through the "Leapfrog scheme": "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/._part0007_main_decay.html#problem-22-implement-and-investigate-the-leapfrog-scheme", and "how to increase the accuracy
   of an oscillating solution":
   "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/._part0000_main_vib.html#exercise-2-improve-the-accuracy-by-adjusting-the-frequency".
 * _Sep 9:_
   Vibration ODE exercises:
   "Problem 1": "http://hplgit.github.io/INF5620/doc/pub/sphinx-vib/._part0000_main_vib.html#problem-1-use-linear-quadratic-functions-for-verification",
   "Exercise 1": "http://hplgit.github.io/INF5620/doc/pub/sphinx-vib/._part0000_main_vib.html#exercise-1-show-linear-growth-of-the-phase-with-time".
 * _Aug 28:_ Same as Aug 21, but create repo at GitHub or Bitbucket too.
 * _Aug 21:_ Those with weak background in finite
   difference computing and Python programming, or those who need a
   refresher and want to start with something simple, read about "Newton's law of cooling": "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/._part0008_main_decay.html#newton-s-law-of-cooling" and do Exercises "1-3": "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/._part0005_main_decay.html#exercise-1-derive-schemes-for-newton-s-law-of-cooling". Those who want more challenges can start with the first compulsory exercise, which is *either* "Exercise 24": "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/main_decay.html#exercise-24-make-a-program-for-vertical-motion-in-a-fluid" or "Project 1": "http://hplgit.github.io/INF5620/doc/pub/sphinx-decay/main_decay.html#project-1-simulate-parachuting" (deadline: Sep 9).

===== Principal resources =====

 * "About the course": "about.html"
 * "Summary of lectures": "lectures.html" (updated before and after each lecture)
 * "Preliminary course notes and slides from lectures": "notes.html"
 * Test of your background for the course: "PDF": "background.pdf", "HTML": "background.html"
 * Download files for the course from "GitHub": "http://hplgit.github.com/INF5620/doc/web/git/index.html": `git clone https://github.com/hplgit/INF5620.git`; update frequently: `cd INF5620; git pull origin master` (do not fork and send pull requests for typos or errors in programs as the `INF5620` files are automatically processed from another source of files)
 * Principal lecturer: "Hans Petter Langtangen": "http://simula.no/~hpl/", `hpl at simula.no`, phone: 99 53 20 21
 * Teaching assistant: Joakim Bø: `joakim.bo at mn.uio.no`

# * "Old textbook for INF5620": "http://simula.no/~hpl/INF5620/books/Langtangen_TCSE1.pdf" (outdated)


===== Other resources =====

 * How to install all needed software in INF5620 on
   your machine:

  * Alternative 1: Run a full graphical Ubuntu platform in a VMWare
    Fusion machine (or another virtual machine like VirtualBox or VMWare Player. We have detailed "instructions": "http://hplgit.github.io/teamods/ubuntu/vmware/index.html". You will then have to
    install a "list of packages recommended for INF5620": "software_packages.html" which on Ubuntu are installed by an "installation script": "https://raw.github.com/hplgit/vagrantbox/master/doc/src/vagrant/src-vagrant/install_rich.sh".
  * Alternative 2: Run Ubuntu as a Vagrant box in a terminal window.
    This box comes with all INF5620 software.
    "Instructions": "vagrant_inf5620.html" are still in an untested and
    preliminary state.
  * Alternative 3: Do a manual installation according to
    a "list of packages recommended for INF5620": "software_packages.html".

 * "FEniCS tutorial": "http://simula.no/~hpl/homepage/fenics-tutorial/release-1.0/index.html"
 * How to use GitHub or Bitbucket for project work: "HTML for online viewing": "http://hplgit.github.com/teamods/bitgit/html/index.html", "PDF for printing": "http://hplgit.github.com/teamods/bitgit/Langtangen_bitgit_4print.pdf"
 * Scientific computing with Python:
   * "A worked example on basic scientific computing with Python": "http://hplgit.github.com/teamods/bumpy/html/vibcase.html" (vehicle on bumpy road)
   * "Python Scientific Lecture Notes": "http://scipy-lectures.github.com/index.html"
   * "SciPy cookbook": "http://www.scipy.org/Cookbook"
   * "NumPy manual": "http://docs.scipy.org/doc/numpy/"
   * "SciPy documentation": "http://docs.scipy.org/doc/scipy/reference/"
   * "SciKits: add-on packages to SciPy": "http://scikits.appspot.com/scikits"
 * Symbolic computing:
   * "Short intro to SymPy": "http://scipy-lectures.github.com/advanced/sympy.html"
   * "SymPy tutorial at SciPy 2013": "http://conference.scipy.org/scipy2013/tutorial_detail.php?id=101"
   * "Official SymPy tutorial": "http://docs.sympy.org/dev/tutorial.html"
   * "SymPy quick examples": "https://github.com/sympy/sympy/wiki/Quick-examples"
   * "SymPy FAQ": "https://github.com/sympy/sympy/wiki/Faq"
   * "Sage documentation": "http://www.sagemath.org/doc/reference/index.html"
   * "SymPy vs Sage": "https://github.com/sympy/sympy/wiki/SymPy-vs.-Sage"
 * "Examples on writing scientific reports": "http://hplgit.github.com/INF5620/doc/writing_reports/index.html"
 * "Sphinx quick reference": "http://people.ee.ethz.ch/~creller/web/tricks/reST.html"
 * "Ultra-quick Unix need-to-know": "http://www.ifi.uio.no/~inf1100/QuickUnix.html"
 * "Ultra-quick Emacs need-to-know": "http://www.ifi.uio.no/~inf1100/QuickEmacs.html"


# "Machine learning in Python": "http://scikit-learn.org/stable/"

# * "Exam 2011": "..."

