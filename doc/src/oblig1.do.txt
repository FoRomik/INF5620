#TITLE: First compulsory project in INF5620


======= Project: 2D wave equation =======

===== Mathematical problem =====

The project addresses the two-dimensional, standard, linear wave equation,
with damping,
!bt
\[ \frac{\partial^2 u}{\partial t^2} + b\frac{\partial u}{\partial t} =
\frac{\partial}{\partial x}\left( q (x,y)
\frac{\partial u}{\partial x}\right) +
\frac{\partial}{\partial y}\left( q (x,y)
\frac{\partial u}{\partial y}\right) + f(x,y,t),
\]
!et
and with boundary condition
!bt
\[ \frac{\partial u}{\partial n} = 0,\]
!et
in a rectangular spatial domain $[0,L_x]\times [0,L_y]$.
The initial conditions are $u(x,y,0)=I(x,y)$ and $u_t(x,y,0)=V(x,y)$.

===== Discretization =====

Derive the discrete set of equations to be implemented in a program:

  * the general scheme for computing $u_{i,j}^{n+1}$ at interior
    spatial mesh points,
  * the modified scheme at boundary points (or use the interior
    scheme also at the boundary with extra ghost cells),
  * the modified scheme for the first step at interior points,
  * the modified scheme for the first step at boundary points.

===== Implementation =====

Modify the "`wave2D_u0.py`":
"https://github.com/hplgit/INF5620/blob/gh-pages/src/wave/wave2D_u0.py"
program, which solves the 2D wave equation
with constant wave velocity and $u=0$ on the boundary, to the
present problem. You will need to include both scalar (pointwise)
computation of the scheme for debugging and reference as well as a
vectorized version for speed.

===== Verification =====

=== Constant solution ===

Construct a test case with constant solution, say $u=1.2$,
and make sure this constant is reproduced by the program.

=== Exact 1D solution ===

A simple 1D square or plug wave,
# #if FORMAT in ("latex","pdflatex")
!bt
\[
I(x,y) = \left\lbrace\begin{array}{ll}
2, & x<L_x/5,\\ 0, & x\geq L_x/5
\end{array}\right.
\]
!et
# #else
$I(x,y)=2$ for $x$ less than some value and $I=0$ otherwise
# #endif
should when $c\Delta t/\Delta x=1$ propagate with exact plug shape
and amplitude 1 through the domain for any $\Delta y$. This verification
simulates an exact discrete solution of the 1D wave equation in a 2D
program. The plug can be set up to propagate in $y$ direction too
(choose $c\Delta t/\Delta y=1$). A pure 1D version of the plug pulse
is available
in the program "`wave1D_dn_vc.py`":
"https://github.com/hplgit/INF5620/blob/gh-pages/src/wave/wave1D_dn_vc.py"
in the `pulse` function.

=== Standing wave ===

Test the program with a manufactured solution, ideally with
$\partial u/\partial n=0$ at the boundary. One possible
choice for constant $q$ is

!bt
\begin{equation}
u(x,y,t)=\exp{(-bt)}\cos(m_xx\pi/L_x)\cos(m_yy\pi/L_y)\cos (\omega t)
label{wave:app:exer:standing:waves}
\end{equation}
!et
for arbitrary integers $m_x$ and $m_y$ and
a suitable choice of $\omega$. The wave lengths in the $x$ and $y$ directions
are $2L_x/m_x$ and $2L_y/m_y$, respectively.
This solution is a *standing wave*
with $\partial u/\partial n=0$.
Since the given $u$ is not an exact solution of the discrete equations, the
test must be based on empirical analysis of the convergence.
The error $E$ is assumed to behave like

!bt
\[
E = C_t\Delta t^2 + C_x\Delta x^2 + C_y\Delta y^2,
\]
!et
for some constants $C_t$, $C_x$, and $C_y$.
Choose $\Delta t=F_th$, $\Delta x =F_xh$, and $\Delta y=F_yh$, where
$h$ is a common discretization parameter to be varied ($h\rightarrow 0$)
and $F_t$, $F_x$, and $F_y$ are freely chosen constant factors
compatible with the stability criterion in 2D. The error can then
be expressed as

!bt
\[
E = Ch^2,
\]
!et
where $C=C_xF_t^2 + C_yF_x^2 + C_tF_t^2$.
Perform experiments with decreasing $h$, compute $E$, and verify that
$E/h^2$ is approximately constant.


=== Manufactured solution ===

Choose some $q(x,y)\neq 0$ and find $f(x,y,t)$ such that
(ref{wave:app:exer:standing:waves}) is a solution to the problem.
Find corresponding $I$ and $V$, and make a convergence test to see
that we have the expected second-order convergence.

===== Suggested application =====

One possible application of the program is to simulate an
earthquake-generated tsunami as described in "Exercise 18": "../pub/main_wave.html#{wave:app:exer:tsunami2D:hill}".
For such waves, $q(x,y)=gH(x,y)$, where $g$
is the acceleration of gravity and $H(x,y)$ is the water depth when
the surface is flat.

Different groups can choose different extensions of this application.
Suggestions are listed below, but groups are free to come up with
their own ideas.

=== Effect of various hill shapes ===

How does the smoothness of the subsea hill influence the numerical quality
of the solution? In particular, if $q$ is discontinuous, as in an
approximation of a very steep hill, does this give more numerical
noise than a Gaussian hill shape? Does a small water gap at the
top of the hill give numerical problems? When $q$ is discontinuous,
will a harmonic averaging of $q$ give better results than the arithemetic
average?
Use fast 1D simulations to gain initial insight into these questions.

=== Visualization ===

Create some fancy 3D visualization of the water waves *and* the subsea hill.
Try to make the hill transparent. Suitable tools are

  * "Mayavi": "http://code.enthought.com/projects/mayavi/"
  * "Paraview": "http://www.paraview.org/"
  * "OpenDX": "http://www.opendx.org/"

Different groups can explore different tools. Other groups can explore
somewhat less sophisticated tools (but easier to use):

 * MATLAB
 * Matplotlib

=== Open boundary condition ===

Implement an open boundary condition at $x=L_x$, $u_t + \sqrt{q}u_x=0$,
as suggested
in "Exercise 14": "../pub/main_wave.html#wave:app:exer:tsunami1D:radiation".
See how well this condition works in letting the tsunami pass out of
the domain. The distance from the subsea hill (which disturbes the wave)
and the outlet boundary $x=L_x$ is an important parameter.

Instead of using a condition $u_t + \sqrt{q}u_x=0$, which is exact only
for plane waves propagating in $x$ direction, one can add an
artificial domain $[L_x,L_x+\delta]\times [0,L_y]$ where waves are
sufficiently damped and absorbed. The goal of an open boundary condition
is to avoid waves being reflected back into the domain. Turn on
the damping parameter $b$ in $[L_x,L_x+\delta]\times [0,L_y]$,
and test if it is wise to vary $b$, say in a linear or exponential
fashion to have a smooth transition from $b=0$ in the physical
domain and to some significant (efficient) $b$ value towards the
artificial boundary $x=L_x+\delta$.


=== Compiled loops ===

Extend the program with compiled loops using

 * Cython code
 * Fortran code interfaced via `f2py`
 * C/C++ code interfaced via `scipy.weave`
 * C/C++ code interfaced via "Instant": "https://launchpad.net/instant"
 * C code interfaced via Cython or `f2py`

Note that Instant comes with FEniCS (`sudo apt-get install fenics` on
Ubuntu will install Instant) and it is described in the
"FEniCS book": "https://launchpad.net/fenics-book".

=== Parallel computing ===

Make a parallel version of the program using different approaches:

 * OpenMP in migrated C or Fortran loops
 * MPI in migrated C or Fortran loops
 * mpi4py MPI programming from Python (distribute vectorized code)


=== 3D wave equation ===

Implement a 3D version of the wave equation and simulate, e.g., seismic
waves. A 3D box can then be built of different layers with different
(constant) wave velocity $\sqrt{q}$ in each layer.
Visualization of 3D waves is challenging, but one can follow
isosurfaces $u=\hbox{const}$ through the domain.

===== How to hand in the project =====

 * Target date for delivery: October 15 (negotiable!)
 * Make a project repository on Bitbucket, GitHub, Googlecode, or similar.
   Send the clone command to hpl@simula.no when you are ready to submit
   (or earlier if you need help or want to discuss things).
 * Focus on making flexible code with modules.
 * Write a short report summarizing the main results.
   See examples on "various report formats":
   "../writing_reports/index.html".
 * Be prepared to make a 5-10 min presentation of the main results.

